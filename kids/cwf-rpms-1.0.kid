KIDS Distribution saved on Mar 21, 2014@14:26:19
CAREWEB DISTRIBUTION (RPMS) 1.0
**KIDS**:CAREWEB DISTRIBUTION (RPMS) 1.0^CIA RPC BROKER 1.1^CAREWEB FRAMEWORK 1.0^CAREWEB CONTEXT 1.0^CAREWEB RPMS ENHANCEMENTS 1.0^

**INSTALL NAME**
CAREWEB DISTRIBUTION (RPMS) 1.0
"BLD",8495,0)
CAREWEB DISTRIBUTION (RPMS) 1.0^^1^3140321^n
"BLD",8495,6.3)
39
"BLD",8495,10,0)
^9.63^100^4
"BLD",8495,10,30,0)
CIA RPC BROKER 1.1^1
"BLD",8495,10,40,0)
CAREWEB FRAMEWORK 1.0^1
"BLD",8495,10,60,0)
CAREWEB CONTEXT 1.0^1
"BLD",8495,10,100,0)
CAREWEB RPMS ENHANCEMENTS 1.0^1
"BLD",8495,10,"B","CAREWEB CONTEXT 1.0",60)

"BLD",8495,10,"B","CAREWEB FRAMEWORK 1.0",40)

"BLD",8495,10,"B","CAREWEB RPMS ENHANCEMENTS 1.0",100)

"BLD",8495,10,"B","CIA RPC BROKER 1.1",30)

"BLD",8495,"INIT")
SETLOGIN^RGCWFUTL
"BLD",8495,"KRN",0)
^9.67PA^8994^20
"BLD",8495,"KRN",.4,0)
.4
"BLD",8495,"KRN",.401,0)
.401
"BLD",8495,"KRN",.402,0)
.402
"BLD",8495,"KRN",.403,0)
.403
"BLD",8495,"KRN",.5,0)
.5
"BLD",8495,"KRN",.84,0)
.84
"BLD",8495,"KRN",3.6,0)
3.6
"BLD",8495,"KRN",3.8,0)
3.8
"BLD",8495,"KRN",9.2,0)
9.2
"BLD",8495,"KRN",9.8,0)
9.8
"BLD",8495,"KRN",19,0)
19
"BLD",8495,"KRN",19.1,0)
19.1
"BLD",8495,"KRN",101,0)
101
"BLD",8495,"KRN",409.61,0)
409.61
"BLD",8495,"KRN",771,0)
771
"BLD",8495,"KRN",779.2,0)
779.2
"BLD",8495,"KRN",870,0)
870
"BLD",8495,"KRN",8989.51,0)
8989.51
"BLD",8495,"KRN",8989.52,0)
8989.52
"BLD",8495,"KRN",8994,0)
8994
"BLD",8495,"KRN","B",.4,.4)

"BLD",8495,"KRN","B",.401,.401)

"BLD",8495,"KRN","B",.402,.402)

"BLD",8495,"KRN","B",.403,.403)

"BLD",8495,"KRN","B",.5,.5)

"BLD",8495,"KRN","B",.84,.84)

"BLD",8495,"KRN","B",3.6,3.6)

"BLD",8495,"KRN","B",3.8,3.8)

"BLD",8495,"KRN","B",9.2,9.2)

"BLD",8495,"KRN","B",9.8,9.8)

"BLD",8495,"KRN","B",19,19)

"BLD",8495,"KRN","B",19.1,19.1)

"BLD",8495,"KRN","B",101,101)

"BLD",8495,"KRN","B",409.61,409.61)

"BLD",8495,"KRN","B",771,771)

"BLD",8495,"KRN","B",779.2,779.2)

"BLD",8495,"KRN","B",870,870)

"BLD",8495,"KRN","B",8989.51,8989.51)

"BLD",8495,"KRN","B",8989.52,8989.52)

"BLD",8495,"KRN","B",8994,8994)

"INIT")
SETLOGIN^RGCWFUTL
"MBREQ")
0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","RGCWFUTL")
0^^B7701648
"RTN","RGCWFUTL",1,0)
RGCWFUTL ;RI/CBMI/DKM CareWeb Management Utilites;18-Mar-2014 18:39;DKM
"RTN","RGCWFUTL",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 39
"RTN","RGCWFUTL",3,0)
 ; Initiate shutdown sequence for applications
"RTN","RGCWFUTL",4,0)
SHUTDOWN N DELAY,MSG
"RTN","RGCWFUTL",5,0)
 W !,"Initiate CareWeb Shutdown Sequence",!!
"RTN","RGCWFUTL",6,0)
 D SHOWSESS()
"RTN","RGCWFUTL",7,0)
 W:$$GETLOGIN'="" "Note: shutdown has already been initiated.",!!
"RTN","RGCWFUTL",8,0)
 F  D  Q:$D(DELAY)
"RTN","RGCWFUTL",9,0)
 .R !,"# of seconds till shutdown (30 minimum): ",DELAY:DTIME,!
"RTN","RGCWFUTL",10,0)
 .E  S DELAY=U
"RTN","RGCWFUTL",11,0)
 .S DELAY=$TR(DELAY," ")
"RTN","RGCWFUTL",12,0)
 .Q:DELAY[U
"RTN","RGCWFUTL",13,0)
 .I DELAY["?" D  Q
"RTN","RGCWFUTL",14,0)
 ..K DELAY
"RTN","RGCWFUTL",15,0)
 ..W "Enter number of seconds before shutdown.",!
"RTN","RGCWFUTL",16,0)
 ..W "To specify time in minutes, follow number with letter M.",!
"RTN","RGCWFUTL",17,0)
 .S:DELAY?1.N1(1"M",1"m") DELAY=DELAY*60
"RTN","RGCWFUTL",18,0)
 .S DELAY=DELAY\1
"RTN","RGCWFUTL",19,0)
 .K:DELAY<30 DELAY
"RTN","RGCWFUTL",20,0)
 Q:DELAY[U
"RTN","RGCWFUTL",21,0)
 Q:'$$ASK^CIAU("Do you really want to shut down CareWeb in "_DELAY_" seconds")
"RTN","RGCWFUTL",22,0)
 D SDINIT(.MSG,DELAY,1)
"RTN","RGCWFUTL",23,0)
 W !!,MSG,!!
"RTN","RGCWFUTL",24,0)
 Q
"RTN","RGCWFUTL",25,0)
 ; Abort a shutdown sequence in progress
"RTN","RGCWFUTL",26,0)
ABORTSD N MSG
"RTN","RGCWFUTL",27,0)
 W !,"Abort CareWeb Shutdown and Enable Logins",!!
"RTN","RGCWFUTL",28,0)
 D SHOWSESS()
"RTN","RGCWFUTL",29,0)
 W:$$GETLOGIN="" "Note: a shutdown does not appear to be in progress.",!!
"RTN","RGCWFUTL",30,0)
 Q:'$$ASK^CIAU("Do you really want to abort any shutdowns in progress and enable logins")
"RTN","RGCWFUTL",31,0)
 D SDABORT(.MSG,1)
"RTN","RGCWFUTL",32,0)
 W !!,MSG,!!
"RTN","RGCWFUTL",33,0)
 Q
"RTN","RGCWFUTL",34,0)
 ; RPC: Initiate shutdown
"RTN","RGCWFUTL",35,0)
SDINIT(DATA,DELAY,LOCK,USR) ;
"RTN","RGCWFUTL",36,0)
 S DELAY=DELAY\1
"RTN","RGCWFUTL",37,0)
 I DELAY<30 S DATA="Invalid value for shutdown delay." Q
"RTN","RGCWFUTL",38,0)
 D:$G(LOCK) SETLOGIN("Application is currently offline.  Please try later.")
"RTN","RGCWFUTL",39,0)
 D BRDCAST^CIANBEVT("DESKTOP.SHUTDOWN.START",DELAY*1000,.USR)
"RTN","RGCWFUTL",40,0)
 S DATA="Shutdown sequence initiated.  "_$$SDMSG
"RTN","RGCWFUTL",41,0)
 Q
"RTN","RGCWFUTL",42,0)
 ; RPC: Abort shutdown
"RTN","RGCWFUTL",43,0)
SDABORT(DATA,UNLOCK,USR) ;
"RTN","RGCWFUTL",44,0)
 D BRDCAST^CIANBEVT("DESKTOP.SHUTDOWN.ABORT","Application shutdown has been aborted.  You may continue.",.USR)
"RTN","RGCWFUTL",45,0)
 D:$G(UNLOCK) SETLOGIN()
"RTN","RGCWFUTL",46,0)
 S DATA="Shutdown sequence aborted.  "_$$SDMSG
"RTN","RGCWFUTL",47,0)
 Q
"RTN","RGCWFUTL",48,0)
 ; Login status message
"RTN","RGCWFUTL",49,0)
SDMSG() Q "Logins are "_$S($L($$GETLOGIN):"disabled.",1:"enabled.")
"RTN","RGCWFUTL",50,0)
 ; Get inhibit login message
"RTN","RGCWFUTL",51,0)
GETLOGIN() ;
"RTN","RGCWFUTL",52,0)
 Q $$OPTMSG^CIANBUTL("RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWFUTL",53,0)
 ; Set inhibit login message
"RTN","RGCWFUTL",54,0)
SETLOGIN(MSG) ;
"RTN","RGCWFUTL",55,0)
 D OPTMSG^CIANBUTL("RGCWF CAREWEB FRAMEWORK",$G(MSG))
"RTN","RGCWFUTL",56,0)
 Q
"RTN","RGCWFUTL",57,0)
 ; RPC: Get/set inhibit login message
"RTN","RGCWFUTL",58,0)
MSGLOGIN(DATA,MSG) ;
"RTN","RGCWFUTL",59,0)
 I '$D(MSG) S DATA=$$GETLOGIN
"RTN","RGCWFUTL",60,0)
 E  D SETLOGIN(MSG)
"RTN","RGCWFUTL",61,0)
 Q
"RTN","RGCWFUTL",62,0)
 ; Show active CareWeb sessions
"RTN","RGCWFUTL",63,0)
SHOWSESS() ;
"RTN","RGCWFUTL",64,0)
 N X
"RTN","RGCWFUTL",65,0)
 S X=$$SHOWSESS^CIANBUTL("RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWFUTL",66,0)
 Q:$Q X
"RTN","RGCWFUTL",67,0)
 Q
"VER")
8.0^22.0
**INSTALL NAME**
CIA RPC BROKER 1.1
"BLD",8484,0)
CIA RPC BROKER 1.1^CIA NETWORK COMPONENTS^0^3140321^n
"BLD",8484,1,0)
^9.61A^1^1^3101115^^^^
"BLD",8484,1,1,0)
CIA's remote procedure call broker.
"BLD",8484,4,0)
^9.64PA^19941.24^5
"BLD",8484,4,19941.2,0)
19941.2
"BLD",8484,4,19941.2,222)
y^y^f^^^^n
"BLD",8484,4,19941.21,0)
19941.21
"BLD",8484,4,19941.21,222)
y^y^f^^^^n
"BLD",8484,4,19941.22,0)
19941.22
"BLD",8484,4,19941.22,222)
y^y^f^^n^^y^o^n
"BLD",8484,4,19941.23,0)
19941.23
"BLD",8484,4,19941.23,222)
y^y^f^^^^n
"BLD",8484,4,19941.24,0)
19941.24
"BLD",8484,4,19941.24,222)
y^y^f^^^^n
"BLD",8484,4,"B",19941.2,19941.2)

"BLD",8484,4,"B",19941.21,19941.21)

"BLD",8484,4,"B",19941.22,19941.22)

"BLD",8484,4,"B",19941.23,19941.23)

"BLD",8484,4,"B",19941.24,19941.24)

"BLD",8484,6.3)
63
"BLD",8484,"INI")
PRE^CIANBINI
"BLD",8484,"INIT")
POST^CIANBINI
"BLD",8484,"KRN",0)
^9.67PA^8994^20
"BLD",8484,"KRN",.4,0)
.4
"BLD",8484,"KRN",.4,"NM",0)
^9.68A^^
"BLD",8484,"KRN",.401,0)
.401
"BLD",8484,"KRN",.402,0)
.402
"BLD",8484,"KRN",.403,0)
.403
"BLD",8484,"KRN",.5,0)
.5
"BLD",8484,"KRN",.84,0)
.84
"BLD",8484,"KRN",.84,"NM",0)
^9.68A^29^29
"BLD",8484,"KRN",.84,"NM",1,0)
199412001^^0
"BLD",8484,"KRN",.84,"NM",2,0)
199412002^^0
"BLD",8484,"KRN",.84,"NM",3,0)
199412003^^0
"BLD",8484,"KRN",.84,"NM",4,0)
199412004^^0
"BLD",8484,"KRN",.84,"NM",5,0)
199412005^^0
"BLD",8484,"KRN",.84,"NM",6,0)
199412006^^0
"BLD",8484,"KRN",.84,"NM",7,0)
199412007^^0
"BLD",8484,"KRN",.84,"NM",8,0)
199412500^^0
"BLD",8484,"KRN",.84,"NM",9,0)
199412501^^0
"BLD",8484,"KRN",.84,"NM",10,0)
199412008^^0
"BLD",8484,"KRN",.84,"NM",11,0)
199412009^^0
"BLD",8484,"KRN",.84,"NM",12,0)
199412010^^0
"BLD",8484,"KRN",.84,"NM",13,0)
199412011^^0
"BLD",8484,"KRN",.84,"NM",14,0)
199412012^^0
"BLD",8484,"KRN",.84,"NM",15,0)
199412013^^0
"BLD",8484,"KRN",.84,"NM",16,0)
199412014^^0
"BLD",8484,"KRN",.84,"NM",17,0)
199412015^^0
"BLD",8484,"KRN",.84,"NM",18,0)
199412016^^0
"BLD",8484,"KRN",.84,"NM",19,0)
199412017^^0
"BLD",8484,"KRN",.84,"NM",20,0)
199412018^^0
"BLD",8484,"KRN",.84,"NM",21,0)
199412019^^0
"BLD",8484,"KRN",.84,"NM",22,0)
199412020^^0
"BLD",8484,"KRN",.84,"NM",23,0)
199412021^^0
"BLD",8484,"KRN",.84,"NM",24,0)
199412022^^0
"BLD",8484,"KRN",.84,"NM",25,0)
199412023^^0
"BLD",8484,"KRN",.84,"NM",26,0)
199412024^^0
"BLD",8484,"KRN",.84,"NM",27,0)
199412025^^0
"BLD",8484,"KRN",.84,"NM",28,0)
199412026^^0
"BLD",8484,"KRN",.84,"NM",29,0)
199412027^^0
"BLD",8484,"KRN",.84,"NM","B",199412001,1)

"BLD",8484,"KRN",.84,"NM","B",199412002,2)

"BLD",8484,"KRN",.84,"NM","B",199412003,3)

"BLD",8484,"KRN",.84,"NM","B",199412004,4)

"BLD",8484,"KRN",.84,"NM","B",199412005,5)

"BLD",8484,"KRN",.84,"NM","B",199412006,6)

"BLD",8484,"KRN",.84,"NM","B",199412007,7)

"BLD",8484,"KRN",.84,"NM","B",199412008,10)

"BLD",8484,"KRN",.84,"NM","B",199412009,11)

"BLD",8484,"KRN",.84,"NM","B",199412010,12)

"BLD",8484,"KRN",.84,"NM","B",199412011,13)

"BLD",8484,"KRN",.84,"NM","B",199412012,14)

"BLD",8484,"KRN",.84,"NM","B",199412013,15)

"BLD",8484,"KRN",.84,"NM","B",199412014,16)

"BLD",8484,"KRN",.84,"NM","B",199412015,17)

"BLD",8484,"KRN",.84,"NM","B",199412016,18)

"BLD",8484,"KRN",.84,"NM","B",199412017,19)

"BLD",8484,"KRN",.84,"NM","B",199412018,20)

"BLD",8484,"KRN",.84,"NM","B",199412019,21)

"BLD",8484,"KRN",.84,"NM","B",199412020,22)

"BLD",8484,"KRN",.84,"NM","B",199412021,23)

"BLD",8484,"KRN",.84,"NM","B",199412022,24)

"BLD",8484,"KRN",.84,"NM","B",199412023,25)

"BLD",8484,"KRN",.84,"NM","B",199412024,26)

"BLD",8484,"KRN",.84,"NM","B",199412025,27)

"BLD",8484,"KRN",.84,"NM","B",199412026,28)

"BLD",8484,"KRN",.84,"NM","B",199412027,29)

"BLD",8484,"KRN",.84,"NM","B",199412500,8)

"BLD",8484,"KRN",.84,"NM","B",199412501,9)

"BLD",8484,"KRN",3.6,0)
3.6
"BLD",8484,"KRN",3.8,0)
3.8
"BLD",8484,"KRN",9.2,0)
9.2
"BLD",8484,"KRN",9.8,0)
9.8
"BLD",8484,"KRN",9.8,"NM",0)
^9.68A^8^8
"BLD",8484,"KRN",9.8,"NM",1,0)
CIANBACT^^0^B32294268
"BLD",8484,"KRN",9.8,"NM",2,0)
CIANBASY^^0^B5533083
"BLD",8484,"KRN",9.8,"NM",3,0)
CIANBEVT^^0^B59877150
"BLD",8484,"KRN",9.8,"NM",4,0)
CIANBLIS^^0^B58819275
"BLD",8484,"KRN",9.8,"NM",5,0)
CIANBRPC^^0^B60754770
"BLD",8484,"KRN",9.8,"NM",6,0)
CIANBUTL^^0^B38343690
"BLD",8484,"KRN",9.8,"NM",7,0)
CIANBLOG^^0^B10435539
"BLD",8484,"KRN",9.8,"NM",8,0)
CIANBINI^^0^B14896343
"BLD",8484,"KRN",9.8,"NM","B","CIANBACT",1)

"BLD",8484,"KRN",9.8,"NM","B","CIANBASY",2)

"BLD",8484,"KRN",9.8,"NM","B","CIANBEVT",3)

"BLD",8484,"KRN",9.8,"NM","B","CIANBINI",8)

"BLD",8484,"KRN",9.8,"NM","B","CIANBLIS",4)

"BLD",8484,"KRN",9.8,"NM","B","CIANBLOG",7)

"BLD",8484,"KRN",9.8,"NM","B","CIANBRPC",5)

"BLD",8484,"KRN",9.8,"NM","B","CIANBUTL",6)

"BLD",8484,"KRN",19,0)
19
"BLD",8484,"KRN",19,"NM",0)
^9.68A^8^7
"BLD",8484,"KRN",19,"NM",1,0)
CIANB STARTALL^^0
"BLD",8484,"KRN",19,"NM",2,0)
CIANB STOPALL^^0
"BLD",8484,"KRN",19,"NM",3,0)
CIANB MAIN MENU^^0
"BLD",8484,"KRN",19,"NM",5,0)
CIANB PURGE EVENT LOG^^0
"BLD",8484,"KRN",19,"NM",6,0)
CIANB NIGHTLY TASK^^0
"BLD",8484,"KRN",19,"NM",7,0)
CIANB SITE PARAMETERS^^0
"BLD",8484,"KRN",19,"NM",8,0)
CIANB REGISTERED LISTENERS^^0
"BLD",8484,"KRN",19,"NM","B","CIANB MAIN MENU",3)

"BLD",8484,"KRN",19,"NM","B","CIANB NIGHTLY TASK",6)

"BLD",8484,"KRN",19,"NM","B","CIANB PURGE EVENT LOG",5)

"BLD",8484,"KRN",19,"NM","B","CIANB REGISTERED LISTENERS",8)

"BLD",8484,"KRN",19,"NM","B","CIANB SITE PARAMETERS",7)

"BLD",8484,"KRN",19,"NM","B","CIANB STARTALL",1)

"BLD",8484,"KRN",19,"NM","B","CIANB STOPALL",2)

"BLD",8484,"KRN",19.1,0)
19.1
"BLD",8484,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",8484,"KRN",101,0)
101
"BLD",8484,"KRN",101,"NM",0)
^9.68A^^0
"BLD",8484,"KRN",409.61,0)
409.61
"BLD",8484,"KRN",771,0)
771
"BLD",8484,"KRN",779.2,0)
779.2
"BLD",8484,"KRN",870,0)
870
"BLD",8484,"KRN",8989.51,0)
8989.51
"BLD",8484,"KRN",8989.51,"NM",0)
^9.68A^6^6
"BLD",8484,"KRN",8989.51,"NM",1,0)
CIANB ACTIVITY LOGGING^^0
"BLD",8484,"KRN",8989.51,"NM",2,0)
CIANB ACTIVITY RETENTION^^0
"BLD",8484,"KRN",8989.51,"NM",3,0)
CIANB AUTHENTICATION^^0
"BLD",8484,"KRN",8989.51,"NM",4,0)
CIANB POLLING INTERVAL^^0
"BLD",8484,"KRN",8989.51,"NM",5,0)
CIANB RESOURCE DEVICE COUNT^^0
"BLD",8484,"KRN",8989.51,"NM",6,0)
CIANB RESOURCE DEVICE SLOTS^^0
"BLD",8484,"KRN",8989.51,"NM","B","CIANB ACTIVITY LOGGING",1)

"BLD",8484,"KRN",8989.51,"NM","B","CIANB ACTIVITY RETENTION",2)

"BLD",8484,"KRN",8989.51,"NM","B","CIANB AUTHENTICATION",3)

"BLD",8484,"KRN",8989.51,"NM","B","CIANB POLLING INTERVAL",4)

"BLD",8484,"KRN",8989.51,"NM","B","CIANB RESOURCE DEVICE COUNT",5)

"BLD",8484,"KRN",8989.51,"NM","B","CIANB RESOURCE DEVICE SLOTS",6)

"BLD",8484,"KRN",8989.52,0)
8989.52
"BLD",8484,"KRN",8989.52,"NM",0)
^9.68A^1^1
"BLD",8484,"KRN",8989.52,"NM",1,0)
CIANB SITE PARAMETERS^^0
"BLD",8484,"KRN",8989.52,"NM","B","CIANB SITE PARAMETERS",1)

"BLD",8484,"KRN",8994,0)
8994
"BLD",8484,"KRN",8994,"NM",0)
^9.68A^18^16
"BLD",8484,"KRN",8994,"NM",1,0)
CIANBRPC AUTH^^0
"BLD",8484,"KRN",8994,"NM",3,0)
CIANBRPC CVC^^0
"BLD",8484,"KRN",8994,"NM",4,0)
CIANBRPC DIVGET^^0
"BLD",8484,"KRN",8994,"NM",5,0)
CIANBRPC DIVSET^^0
"BLD",8484,"KRN",8994,"NM",7,0)
CIANBRPC DIALOG^^0
"BLD",8484,"KRN",8994,"NM",8,0)
CIANBRPC GETRPCS^^0
"BLD",8484,"KRN",8994,"NM",9,0)
CIANBEVT BCAST^^0
"BLD",8484,"KRN",8994,"NM",10,0)
CIANBEVT GETSUBSC^^0
"BLD",8484,"KRN",8994,"NM",11,0)
CIANBRPC SETVAR^^0
"BLD",8484,"KRN",8994,"NM",12,0)
CIANBRPC GETSESSN^^0
"BLD",8484,"KRN",8994,"NM",13,0)
CIANBASY STOP^^0
"BLD",8484,"KRN",8994,"NM",14,0)
CIANBRPC GETVAR^^0
"BLD",8484,"KRN",8994,"NM",15,0)
CIANBRPC GETINFO^^0
"BLD",8484,"KRN",8994,"NM",16,0)
CIANBRPC CANRUN^^0
"BLD",8484,"KRN",8994,"NM",17,0)
CIANBRPC LOCK^^0
"BLD",8484,"KRN",8994,"NM",18,0)
CIANBRPC LOCKRES^^0
"BLD",8484,"KRN",8994,"NM","B","CIANBASY STOP",13)

"BLD",8484,"KRN",8994,"NM","B","CIANBEVT BCAST",9)

"BLD",8484,"KRN",8994,"NM","B","CIANBEVT GETSUBSC",10)

"BLD",8484,"KRN",8994,"NM","B","CIANBRPC AUTH",1)

"BLD",8484,"KRN",8994,"NM","B","CIANBRPC CANRUN",16)

"BLD",8484,"KRN",8994,"NM","B","CIANBRPC CVC",3)

"BLD",8484,"KRN",8994,"NM","B","CIANBRPC DIALOG",7)

"BLD",8484,"KRN",8994,"NM","B","CIANBRPC DIVGET",4)

"BLD",8484,"KRN",8994,"NM","B","CIANBRPC DIVSET",5)

"BLD",8484,"KRN",8994,"NM","B","CIANBRPC GETINFO",15)

"BLD",8484,"KRN",8994,"NM","B","CIANBRPC GETRPCS",8)

"BLD",8484,"KRN",8994,"NM","B","CIANBRPC GETSESSN",12)

"BLD",8484,"KRN",8994,"NM","B","CIANBRPC GETVAR",14)

"BLD",8484,"KRN",8994,"NM","B","CIANBRPC LOCK",17)

"BLD",8484,"KRN",8994,"NM","B","CIANBRPC LOCKRES",18)

"BLD",8484,"KRN",8994,"NM","B","CIANBRPC SETVAR",11)

"BLD",8484,"KRN","B",.4,.4)

"BLD",8484,"KRN","B",.401,.401)

"BLD",8484,"KRN","B",.402,.402)

"BLD",8484,"KRN","B",.403,.403)

"BLD",8484,"KRN","B",.5,.5)

"BLD",8484,"KRN","B",.84,.84)

"BLD",8484,"KRN","B",3.6,3.6)

"BLD",8484,"KRN","B",3.8,3.8)

"BLD",8484,"KRN","B",9.2,9.2)

"BLD",8484,"KRN","B",9.8,9.8)

"BLD",8484,"KRN","B",19,19)

"BLD",8484,"KRN","B",19.1,19.1)

"BLD",8484,"KRN","B",101,101)

"BLD",8484,"KRN","B",409.61,409.61)

"BLD",8484,"KRN","B",771,771)

"BLD",8484,"KRN","B",779.2,779.2)

"BLD",8484,"KRN","B",870,870)

"BLD",8484,"KRN","B",8989.51,8989.51)

"BLD",8484,"KRN","B",8989.52,8989.52)

"BLD",8484,"KRN","B",8994,8994)

"BLD",8484,"PRE")

"BLD",8484,"PRET")
GBL^CIAVINX
"BLD",8484,"QUES",0)
^9.62^^
"BLD",8484,"REQB",0)
^9.611^^0
"DATA",19941.22,1,0)
CAREWEB^9300
"FIA",19941.2)
CIA AUTHENTICATION
"FIA",19941.2,0)
^CIANB(19941.2,
"FIA",19941.2,0,0)
19941.2AI
"FIA",19941.2,0,1)
y^y^f^^^^n
"FIA",19941.2,0,10)

"FIA",19941.2,0,11)

"FIA",19941.2,0,"RLRO")

"FIA",19941.2,0,"VR")
1.1^CIA RPC BROKER
"FIA",19941.2,19941.2)
0
"FIA",19941.21)
CIA EVENT TYPE
"FIA",19941.21,0)
^CIANB(19941.21,
"FIA",19941.21,0,0)
19941.21
"FIA",19941.21,0,1)
y^y^f^^^^n
"FIA",19941.21,0,10)

"FIA",19941.21,0,11)

"FIA",19941.21,0,"RLRO")

"FIA",19941.21,0,"VR")
1.1^CIA RPC BROKER
"FIA",19941.21,19941.21)
0
"FIA",19941.21,19941.212)
0
"FIA",19941.21,19941.2121)
0
"FIA",19941.21,19941.2199)
0
"FIA",19941.22)
CIA LISTENER
"FIA",19941.22,0)
^CIANB(19941.22,
"FIA",19941.22,0,0)
19941.22
"FIA",19941.22,0,1)
y^y^f^^n^^y^o^n
"FIA",19941.22,0,10)

"FIA",19941.22,0,11)

"FIA",19941.22,0,"RLRO")

"FIA",19941.22,0,"VR")
1.1^CIA RPC BROKER
"FIA",19941.22,19941.22)
0
"FIA",19941.23)
CIA EVENT LOG
"FIA",19941.23,0)
^CIANB(19941.23,
"FIA",19941.23,0,0)
19941.23DI
"FIA",19941.23,0,1)
y^y^f^^^^n
"FIA",19941.23,0,10)

"FIA",19941.23,0,11)

"FIA",19941.23,0,"RLRO")

"FIA",19941.23,0,"VR")
1.1^CIA RPC BROKER
"FIA",19941.23,19941.23)
0
"FIA",19941.23,19941.232)
0
"FIA",19941.24)
CIA ACTIVITY LOG
"FIA",19941.24,0)
^CIANB(19941.24,
"FIA",19941.24,0,0)
19941.24
"FIA",19941.24,0,1)
y^y^f^^^^n
"FIA",19941.24,0,10)

"FIA",19941.24,0,11)

"FIA",19941.24,0,"RLRO")

"FIA",19941.24,0,"VR")
1.1^CIA RPC BROKER
"FIA",19941.24,19941.24)
0
"FIA",19941.24,19941.241)
0
"FIA",19941.24,19941.242)
0
"INI")
PRE^CIANBINI
"INIT")
POST^CIANBINI
"KRN",.84,199412001,-1)
0^1
"KRN",.84,199412001,0)
199412001^1^y^CIA NETWORK COMPONENTS^Server error
"KRN",.84,199412001,2,0)
^^5^5^3021028.221459
"KRN",.84,199412001,2,1,0)
The server has reported the following error:
"KRN",.84,199412001,2,2,0)

"KRN",.84,199412001,2,3,0)
|1|
"KRN",.84,199412001,2,4,0)

"KRN",.84,199412001,2,5,0)
A detailed log of the error has been created.
"KRN",.84,199412001,3,0)
^.845^1^1
"KRN",.84,199412001,3,1,0)
1^M error text
"KRN",.84,199412002,-1)
0^2
"KRN",.84,199412002,0)
199412002^1^y^CIA NETWORK COMPONENTS^Unknown context
"KRN",.84,199412002,2,0)
^^1^1^3021016.135912
"KRN",.84,199412002,2,1,0)
The specified RPC context (|1|) could not be found.
"KRN",.84,199412002,3,0)
^.845^1^1
"KRN",.84,199412002,3,1,0)
1^Context name
"KRN",.84,199412003,-1)
0^3
"KRN",.84,199412003,0)
199412003^1^y^CIA NETWORK COMPONENTS^Unknown remote procedure
"KRN",.84,199412003,2,0)
^.844^1^1^3021016.141847
"KRN",.84,199412003,2,1,0)
Unknown remote procedure: |1|
"KRN",.84,199412003,3,0)
^.845^1^1
"KRN",.84,199412003,3,1,0)
1^Remote procedure name
"KRN",.84,199412004,-1)
0^4
"KRN",.84,199412004,0)
199412004^1^y^CIA NETWORK COMPONENTS^Access denied
"KRN",.84,199412004,2,0)
^^1^1^3021016.142047
"KRN",.84,199412004,2,1,0)
Access denied for remote procedure: |1|
"KRN",.84,199412004,3,0)
^.845^1^1
"KRN",.84,199412004,3,1,0)
1^Remote procedure name
"KRN",.84,199412005,-1)
0^5
"KRN",.84,199412005,0)
199412005^1^y^CIA NETWORK COMPONENTS^Inactive remote procedure
"KRN",.84,199412005,2,0)
^.844^1^1^3021016^
"KRN",.84,199412005,2,1,0)
The requested remote procedure is inactive: |1|
"KRN",.84,199412005,3,0)
^.845^1^1
"KRN",.84,199412005,3,1,0)
1^Remote procedure name
"KRN",.84,199412006,-1)
0^6
"KRN",.84,199412006,0)
199412006^1^y^CIA NETWORK COMPONENTS^Invalid remote procedure definition
"KRN",.84,199412006,2,0)
^^1^1^3021016.142346
"KRN",.84,199412006,2,1,0)
The requested remote procedure is improperly defined: |1|
"KRN",.84,199412006,3,0)
^.845^1^1
"KRN",.84,199412006,3,1,0)
1^Remote procedure name
"KRN",.84,199412007,-1)
0^7
"KRN",.84,199412007,0)
199412007^1^y^CIA NETWORK COMPONENTS^Too many arguments
"KRN",.84,199412007,2,0)
^^2^2^3021016.154446
"KRN",.84,199412007,2,1,0)
The number of arguments (|2|) passed to the remote procedure
"KRN",.84,199412007,2,2,0)
|1| exceeds the maximum limit of |3|.
"KRN",.84,199412007,3,0)
^.845^3^3
"KRN",.84,199412007,3,1,0)
1^Remote procedure name
"KRN",.84,199412007,3,2,0)
2^Number of arguments
"KRN",.84,199412007,3,3,0)
3^Maximum number of arguments
"KRN",.84,199412008,-1)
0^10
"KRN",.84,199412008,0)
199412008^1^y^CIA NETWORK COMPONENTS^Async RPC Failed
"KRN",.84,199412008,2,0)
^.844^1^1^3021017^
"KRN",.84,199412008,2,1,0)
Failed to start task for asynchronous RPC: |1|
"KRN",.84,199412008,3,0)
^.845^1^1
"KRN",.84,199412008,3,1,0)
1^Remote procedure name
"KRN",.84,199412009,-1)
0^11
"KRN",.84,199412009,0)
199412009^1^y^CIA NETWORK COMPONENTS^Invalid Server Request
"KRN",.84,199412009,2,0)
^^1^1^3021018.233253
"KRN",.84,199412009,2,1,0)
The server rejected the requested action (|1|).
"KRN",.84,199412009,3,0)
^.845^1^1
"KRN",.84,199412009,3,1,0)
1^Action Code
"KRN",.84,199412010,-1)
0^12
"KRN",.84,199412010,0)
199412010^1^y^CIA NETWORK COMPONENTS^Too Many Users
"KRN",.84,199412010,2,0)
^^1^1^3021021.090207
"KRN",.84,199412010,2,1,0)
There are too many users (|1|) logged on at this time.  Please try again later.
"KRN",.84,199412010,3,0)
^.845^2^2
"KRN",.84,199412010,3,1,0)
1^Number of Active Users
"KRN",.84,199412010,3,2,0)
2^Maximum Active Users
"KRN",.84,199412011,-1)
0^13
"KRN",.84,199412011,0)
199412011^1^^CIA NETWORK COMPONENTS^Unknown Volume Set
"KRN",.84,199412011,2,0)
^^1^1^3021021.084612
"KRN",.84,199412011,2,1,0)
Cannot determine volume set for server child process.
"KRN",.84,199412012,-1)
0^14
"KRN",.84,199412012,0)
199412012^1^^CIA NETWORK COMPONENTS^Cannot Start Child Process
"KRN",.84,199412012,2,0)
^^1^1^3021021.090533
"KRN",.84,199412012,2,1,0)
Unable to start child process.
"KRN",.84,199412013,-1)
0^15
"KRN",.84,199412013,0)
199412013^1^y^CIA NETWORK COMPONENTS^Cannot Subscribe to Event
"KRN",.84,199412013,2,0)
^^1^1^3021021.160356
"KRN",.84,199412013,2,1,0)
You do not have the required key(s) to subscribe to the requested event: (|1|).
"KRN",.84,199412013,3,0)
^.845^1^1
"KRN",.84,199412013,3,1,0)
1^Event Name
"KRN",.84,199412014,-1)
0^16
"KRN",.84,199412014,0)
199412014^1^y^CIA NETWORK COMPONENTS^Unknown UCI
"KRN",.84,199412014,2,0)
^^1^1^3021028.121952
"KRN",.84,199412014,2,1,0)
Unknown UCI: |1|
"KRN",.84,199412014,3,0)
^.845^1^1
"KRN",.84,199412014,3,1,0)
1^UCI Name
"KRN",.84,199412015,-1)
0^17
"KRN",.84,199412015,0)
199412015^1^y^CIA NETWORK COMPONENTS^Unsupported OS
"KRN",.84,199412015,2,0)
^^1^1^3021030.121347
"KRN",.84,199412015,2,1,0)
Unsupported operating system: |1|.
"KRN",.84,199412015,3,0)
^.845^1^1
"KRN",.84,199412015,3,1,0)
1^Operating System Name
"KRN",.84,199412016,-1)
0^18
"KRN",.84,199412016,0)
199412016^1^y^CIA NETWORK COMPONENTS^Mode Not Supported
"KRN",.84,199412016,2,0)
^^1^1^3021030.122454
"KRN",.84,199412016,2,1,0)
Mode |2| not supported by operating system |1|.
"KRN",.84,199412016,3,0)
^.845^2^2
"KRN",.84,199412016,3,1,0)
1^Operating System Name
"KRN",.84,199412016,3,2,0)
2^Mode
"KRN",.84,199412017,-1)
0^19
"KRN",.84,199412017,0)
199412017^1^^CIA NETWORK COMPONENTS^Null Device Error
"KRN",.84,199412017,2,0)
^^1^1^3021030.122543
"KRN",.84,199412017,2,1,0)
The NULL device has not been properly setup.
"KRN",.84,199412018,-1)
0^20
"KRN",.84,199412018,0)
199412018^1^y^CIA NETWORK COMPONENTS^Unknown Application
"KRN",.84,199412018,2,0)
^^1^1^3021104.094347
"KRN",.84,199412018,2,1,0)
Unknown application: |1|
"KRN",.84,199412018,3,0)
^.845^1^1
"KRN",.84,199412018,3,1,0)
1^Application Name
"KRN",.84,199412019,-1)
0^21
"KRN",.84,199412019,0)
199412019^1^y^CIA NETWORK COMPONENTS^Logins Disabled
"KRN",.84,199412019,2,0)
^.844^1^1^3021203^
"KRN",.84,199412019,2,1,0)
Logins are disabled: |1|
"KRN",.84,199412019,3,0)
^.845^1^1
"KRN",.84,199412019,3,1,0)
1^Disable Message
"KRN",.84,199412020,-1)
0^22
"KRN",.84,199412020,0)
199412020^1^y^CIA NETWORK COMPONENTS^Invalid option type
"KRN",.84,199412020,2,0)
^.844^1^1^3031209^
"KRN",.84,199412020,2,1,0)
The option specified (|1|) was not of the expected type (|2|).
"KRN",.84,199412020,3,0)
^.845^2^2
"KRN",.84,199412020,3,1,0)
1^Option name
"KRN",.84,199412020,3,2,0)
2^Expected type
"KRN",.84,199412021,-1)
0^23
"KRN",.84,199412021,0)
199412021^1^y^CIA NETWORK COMPONENTS^Reverse key denies access
"KRN",.84,199412021,2,0)
^.844^1^1^3031209^^
"KRN",.84,199412021,2,1,0)
The |2| key prohibits access to the |1| option.
"KRN",.84,199412021,3,0)
^.845^2^2
"KRN",.84,199412021,3,1,0)
1^Option name
"KRN",.84,199412021,3,2,0)
2^Key name
"KRN",.84,199412022,-1)
0^24
"KRN",.84,199412022,0)
199412022^1^y^CIA NETWORK COMPONENTS^Access requires key
"KRN",.84,199412022,2,0)
^.844^1^1^3031209^
"KRN",.84,199412022,2,1,0)
Access to the |1| option requires the |2| key.
"KRN",.84,199412022,3,0)
^.845^2^2
"KRN",.84,199412022,3,1,0)
1^Option name
"KRN",.84,199412022,3,2,0)
2^Key name
"KRN",.84,199412023,-1)
0^25
"KRN",.84,199412023,0)
199412023^1^y^CIA NETWORK COMPONENTS^Access prohibited
"KRN",.84,199412023,2,0)
^.844^1^1^3031209^^
"KRN",.84,199412023,2,1,0)
Access to option |1| prohibited at this time.
"KRN",.84,199412023,3,0)
^.845^1^1
"KRN",.84,199412023,3,1,0)
1^Option name
"KRN",.84,199412024,-1)
0^26
"KRN",.84,199412024,0)
199412024^1^y^CIA NETWORK COMPONENTS^Prohibited UCI
"KRN",.84,199412024,2,0)
^.844^1^1^3031209^
"KRN",.84,199412024,2,1,0)
Logins prohibited on |1|.
"KRN",.84,199412024,3,0)
^.845^1^1
"KRN",.84,199412024,3,1,0)
1^UCI name
"KRN",.84,199412025,-1)
0^27
"KRN",.84,199412025,0)
199412025^1^y^CIA NETWORK COMPONENTS^Session context unavailable
"KRN",.84,199412025,2,0)
^^1^1^3031226.132723
"KRN",.84,199412025,2,1,0)
The reconnection attempt for session #|1| has failed.  The session context no longer exists.
"KRN",.84,199412025,3,0)
^.845^1^1
"KRN",.84,199412025,3,1,0)
1^Session ID
"KRN",.84,199412026,-1)
0^28
"KRN",.84,199412026,0)
199412026^1^y^CIA NETWORK COMPONENTS^Session context locked
"KRN",.84,199412026,2,0)
^^1^1^3031226.132737
"KRN",.84,199412026,2,1,0)
The reconnection attempt for session #|1| has failed.  The session context is in use. 
"KRN",.84,199412026,3,0)
^.845^1^1
"KRN",.84,199412026,3,1,0)
1^Session ID
"KRN",.84,199412027,-1)
0^29
"KRN",.84,199412027,0)
199412027^1^y^CIA NETWORK COMPONENTS^Session context invalid
"KRN",.84,199412027,2,0)
^^1^1^3031226.132749
"KRN",.84,199412027,2,1,0)
The reconnection attempt for session #|1| has failed.  The session was authenticated for a different user. 
"KRN",.84,199412027,3,0)
^.845^1^1
"KRN",.84,199412027,3,1,0)
1^Session ID
"KRN",.84,199412500,-1)
0^8
"KRN",.84,199412500,0)
199412500^3^^CIA NETWORK COMPONENTS^AV Help
"KRN",.84,199412500,2,0)
^^5^5^3021017.111201
"KRN",.84,199412500,2,1,0)
Enter 6-20 characters mixed alphanumeric.
"KRN",.84,199412500,2,2,0)

"KRN",.84,199412500,2,3,0)
For example,  12ABC44Z
"KRN",.84,199412500,2,4,0)

"KRN",.84,199412500,2,5,0)
Verify codes are not case sensitive.
"KRN",.84,199412501,-1)
0^9
"KRN",.84,199412501,0)
199412501^3^^CIA NETWORK COMPONENTS^Division Help
"KRN",.84,199412501,2,0)
^.844^4^4^3060307^
"KRN",.84,199412501,2,1,0)
Select a division from the list and click OK.
"KRN",.84,199412501,2,2,0)

"KRN",.84,199412501,2,3,0)
A division must be selected in order to continue with your signon.
"KRN",.84,199412501,2,4,0)
To abort your signon, click Cancel.
"KRN",19,11311,-1)
0^1
"KRN",19,11311,0)
CIANB STARTALL^Start All Registered Listeners^^A^^^^^^^^^^1
"KRN",19,11311,1,0)
^^1^1^3030113.101517
"KRN",19,11311,1,1,0)
Starts all enabled listener processes registered in the CIA LISTENER file.
"KRN",19,11311,20)
D MNUEXEC^CIAU("D STARTALL^CIANBLIS",1)
"KRN",19,11311,25)

"KRN",19,11311,"U")
START ALL REGISTERED LISTENERS
"KRN",19,11312,-1)
0^2
"KRN",19,11312,0)
CIANB STOPALL^Stop All Registered Listeners^^A^^^^^^^^^^1
"KRN",19,11312,1,0)
^^1^1^3030113.101632
"KRN",19,11312,1,1,0)
Stops all listeners registered in the CIA LISTENER file. 
"KRN",19,11312,20)
D MNUEXEC^CIAU("D STOPALL^CIANBLIS",1)
"KRN",19,11312,25)

"KRN",19,11312,"U")
STOP ALL REGISTERED LISTENERS
"KRN",19,11313,-1)
0^3
"KRN",19,11313,0)
CIANB MAIN MENU^CIA Broker Main Menu^^M^^^^^^^^CIA NETWORK COMPONENTS^^^^^1
"KRN",19,11313,10,0)
^19.01IP^5^5
"KRN",19,11313,10,1,0)
11316^1^10
"KRN",19,11313,10,1,"^")
CIANB SITE PARAMETERS
"KRN",19,11313,10,2,0)
11311^2^20
"KRN",19,11313,10,2,"^")
CIANB STARTALL
"KRN",19,11313,10,3,0)
11312^3^30
"KRN",19,11313,10,3,"^")
CIANB STOPALL
"KRN",19,11313,10,4,0)
11314^4^40
"KRN",19,11313,10,4,"^")
CIANB PURGE EVENT LOG
"KRN",19,11313,10,5,0)
11317^5^
"KRN",19,11313,10,5,"^")
CIANB REGISTERED LISTENERS
"KRN",19,11313,15)

"KRN",19,11313,20)

"KRN",19,11313,26)
D MNUHDR^CIAU()
"KRN",19,11313,99)
63265,61696
"KRN",19,11313,"U")
CIA BROKER MAIN MENU
"KRN",19,11314,-1)
0^5
"KRN",19,11314,0)
CIANB PURGE EVENT LOG^Purge Event Log^^A^^^^^^^^^^1^
"KRN",19,11314,1,0)
^^1^1^3030611.123339
"KRN",19,11314,1,1,0)
Tasks the nightly purge of the CIA Broker event log file.
"KRN",19,11314,15)

"KRN",19,11314,20)
D MNUEXEC^CIAU("D TASKPRG^CIANBEVT",1)
"KRN",19,11314,25)

"KRN",19,11314,"U")
PURGE EVENT LOG
"KRN",19,11315,-1)
0^6
"KRN",19,11315,0)
CIANB NIGHTLY TASK^Submit Cleanup Task^^R^^^^^^^^CIA NETWORK COMPONENTS^^1^
"KRN",19,11315,15)

"KRN",19,11315,20)
D MNUHDR^CIAU()
"KRN",19,11315,25)
NIGHTLY^CIANBUTL
"KRN",19,11315,200.9)
y
"KRN",19,11315,"U")
SUBMIT CLEANUP TASK
"KRN",19,11316,-1)
0^7
"KRN",19,11316,0)
CIANB SITE PARAMETERS^Edit CIA Broker Package Parameters^^A^^^^^^^^^^1
"KRN",19,11316,20)
D MNUTEMPL^CIAU()
"KRN",19,11316,"U")
EDIT CIA BROKER PACKAGE PARAME
"KRN",19,11317,-1)
0^8
"KRN",19,11317,0)
CIANB REGISTERED LISTENERS^Edit Registered Listeners^^E^^^^^^^^^^1^
"KRN",19,11317,15)

"KRN",19,11317,20)
D MNUHDR^CIAU()
"KRN",19,11317,30)
CIANB(19941.22,
"KRN",19,11317,31)
AELM
"KRN",19,11317,50)
19941.22
"KRN",19,11317,51)
.01;1;1.5;2
"KRN",19,11317,"U")
EDIT REGISTERED LISTENERS
"KRN",8989.5,1894,0)
219;DIC(9.4,^CIANB ACTIVITY RETENTION^1
"KRN",8989.5,1894,1)
30
"KRN",8989.5,1896,0)
219;DIC(9.4,^CIANB POLLING INTERVAL^1
"KRN",8989.5,1896,1)
3
"KRN",8989.5,1897,0)
219;DIC(9.4,^CIANB RESOURCE DEVICE COUNT^1
"KRN",8989.5,1897,1)
4
"KRN",8989.5,1898,0)
219;DIC(9.4,^CIANB RESOURCE DEVICE SLOTS^1
"KRN",8989.5,1898,1)
4
"KRN",8989.51,120,-1)
0^3
"KRN",8989.51,120,0)
CIANB AUTHENTICATION^Authentication method^1^UCI^Authentication method
"KRN",8989.51,120,1)
S^0:Normal;1:Client Cached;2:Server Cached
"KRN",8989.51,120,6)
F
"KRN",8989.51,120,20,0)
^8989.512^5^5^3061024^^^^
"KRN",8989.51,120,20,1,0)
Dictates authentication method used.
"KRN",8989.51,120,20,2,0)

"KRN",8989.51,120,20,3,0)
Normal        - No password caching is used.
"KRN",8989.51,120,20,4,0)
Client Cached - Username and password are encrypted and cached in NT user profile.
"KRN",8989.51,120,20,5,0)
Server Cached - User SID (security identifier) cached on server. 
"KRN",8989.51,120,30,0)
^8989.513I^1^1
"KRN",8989.51,120,30,1,0)
100^4.2
"KRN",8989.51,202,-1)
0^4
"KRN",8989.51,202,0)
CIANB POLLING INTERVAL^Host polling interval^0^Interval^Host Polling Interval
"KRN",8989.51,202,1)
N^^Number of seconds (1-60) between polls.
"KRN",8989.51,202,2)
S Y=Y\1 S:Y<1 Y=1 S:Y>60 Y=60
"KRN",8989.51,202,20,0)
^8989.512^4^4^3070607^^
"KRN",8989.51,202,20,1,0)
This is the interval in seconds that the client will poll the server for 
"KRN",8989.51,202,20,2,0)
signaled events or asynchronous remote procedure calls.  
"KRN",8989.51,202,20,3,0)

"KRN",8989.51,202,20,4,0)
Range should be 1-60, inclusive.  Typical values are 3-5 seconds.
"KRN",8989.51,202,30,0)
^8989.513I^1^1
"KRN",8989.51,202,30,1,0)
100^4.2
"KRN",8989.51,207,-1)
0^5
"KRN",8989.51,207,0)
CIANB RESOURCE DEVICE COUNT^Maximum number of resource devices^0^Count^Resource Device Count
"KRN",8989.51,207,1)
N^^The maximum number (1-20) of resource devices that may be created.
"KRN",8989.51,207,2)
S Y=Y\1 S:Y<1 Y=1 S:Y>20 Y=20
"KRN",8989.51,207,20,0)
^8989.512^4^4^3061024^
"KRN",8989.51,207,20,1,0)
This is the maximum number of resource devices that can be used by the package.
"KRN",8989.51,207,20,2,0)
Must be between 1 and 20, inclusive.  Higher values will increase server load,
"KRN",8989.51,207,20,3,0)
but improve application response to asynchronous remote procedure calls and 
"KRN",8989.51,207,20,4,0)
host-signalled events
"KRN",8989.51,207,30,0)
^8989.513I^1^1
"KRN",8989.51,207,30,1,0)
100^4.2
"KRN",8989.51,208,-1)
0^6
"KRN",8989.51,208,0)
CIANB RESOURCE DEVICE SLOTS^Number of resource slots to allocate^0^Slots^Resource Device Slots
"KRN",8989.51,208,1)
N^^Maximum number (1-20) of slots per resource device.
"KRN",8989.51,208,2)
S Y=Y\1 S:Y<1 Y=1 S:Y>20 Y=20 D SETSLOTS^CIANBUTL(Y)
"KRN",8989.51,208,20,0)
^8989.512^4^4^3061024^
"KRN",8989.51,208,20,1,0)
This is the maximum number of slots that will be allocated to resource devices
"KRN",8989.51,208,20,2,0)
used by the package. Must be between 1 and 20, inclusive.  Higher values will 
"KRN",8989.51,208,20,3,0)
increase server load, but improve application performance for asynchronous 
"KRN",8989.51,208,20,4,0)
remote procedure calls.
"KRN",8989.51,208,30,0)
^8989.513I^1^1
"KRN",8989.51,208,30,1,0)
100^4.2
"KRN",8989.51,249,-1)
0^1
"KRN",8989.51,249,0)
CIANB ACTIVITY LOGGING^Enable logging of session activities^1^Application^Enable activity logging
"KRN",8989.51,249,1)
Y
"KRN",8989.51,249,6)
P^19
"KRN",8989.51,249,20,0)
^8989.512^3^3^3080104^^
"KRN",8989.51,249,20,1,0)
If activated, results in logging session activities such as remote procedure 
"KRN",8989.51,249,20,2,0)
calls and events to the CIA ACTIVITY LOG file.  Activating this feature may 
"KRN",8989.51,249,20,3,0)
have significant adverse impact on application performance and disk usage. 
"KRN",8989.51,249,30,0)
^8989.513I^3^3
"KRN",8989.51,249,30,1,0)
400^4.2
"KRN",8989.51,249,30,2,0)
200^4
"KRN",8989.51,249,30,3,0)
100^200
"KRN",8989.51,260,-1)
0^2
"KRN",8989.51,260,0)
CIANB ACTIVITY RETENTION^Retention period for logged activities.^^^Retention period (days)
"KRN",8989.51,260,1)
N^1:9999999^Enter retention period in days for logged activities.
"KRN",8989.51,260,20,0)
^8989.512^1^1^3080104^
"KRN",8989.51,260,20,1,0)
This controls how long entries in the CIA ACTIVITY LOG file are retained.
"KRN",8989.51,260,30,0)
^8989.513I^1^1
"KRN",8989.51,260,30,1,0)
400^4.2
"KRN",8989.52,209,-1)
0^1
"KRN",8989.52,209,0)
CIANB SITE PARAMETERS^CIA RPC Broker Site Parameters^4.2
"KRN",8989.52,209,10,0)
^8989.521IA^7^4
"KRN",8989.52,209,10,3,0)
10.1^CIANB POLLING INTERVAL
"KRN",8989.52,209,10,5,0)
20.1^CIANB RESOURCE DEVICE COUNT
"KRN",8989.52,209,10,6,0)
20.2^CIANB RESOURCE DEVICE SLOTS
"KRN",8989.52,209,10,7,0)
30.1^CIANB AUTHENTICATION
"KRN",8994,2590,-1)
0^1
"KRN",8994,2590,0)
CIANBRPC AUTH^AUTH^CIANBRPC^2
"KRN",8994,2591,-1)
0^5
"KRN",8994,2591,0)
CIANBRPC DIVSET^DIVSET^CIANBRPC^1
"KRN",8994,2592,-1)
0^4
"KRN",8994,2592,0)
CIANBRPC DIVGET^DIVGET^CIANBRPC^2
"KRN",8994,2593,-1)
0^7
"KRN",8994,2593,0)
CIANBRPC DIALOG^DIALOG^CIANBRPC^2
"KRN",8994,2594,-1)
0^8
"KRN",8994,2594,0)
CIANBRPC GETRPCS^GETRPCS^CIANBRPC^4
"KRN",8994,2595,-1)
0^11
"KRN",8994,2595,0)
CIANBRPC SETVAR^SETVAR^CIANBRPC^1
"KRN",8994,2596,-1)
0^9
"KRN",8994,2596,0)
CIANBEVT BCAST^BCAST^CIANBEVT^1
"KRN",8994,2597,-1)
0^10
"KRN",8994,2597,0)
CIANBEVT GETSUBSC^GETSUBSC^CIANBEVT^4^^^^1
"KRN",8994,2598,-1)
0^12
"KRN",8994,2598,0)
CIANBRPC GETSESSN^GETSESSN^CIANBRPC^4^^^^1
"KRN",8994,2599,-1)
0^13
"KRN",8994,2599,0)
CIANBASY STOP^STOP^CIANBASY^1
"KRN",8994,2600,-1)
0^14
"KRN",8994,2600,0)
CIANBRPC GETVAR^GETVAR^CIANBRPC^2^^^^1
"KRN",8994,2601,-1)
0^15
"KRN",8994,2601,0)
CIANBRPC GETINFO^GETINFO^CIANBRPC^4^^^^1
"KRN",8994,2602,-1)
0^16
"KRN",8994,2602,0)
CIANBRPC CANRUN^CANRUN^CIANBRPC^1
"KRN",8994,2603,-1)
0^17
"KRN",8994,2603,0)
CIANBRPC LOCK^LOCK^CIANBRPC^1
"KRN",8994,2604,-1)
0^18
"KRN",8994,2604,0)
CIANBRPC LOCKRES^LOCKRES^CIANBRPC^4^^^^1
"KRN",8994,2605,-1)
0^3
"KRN",8994,2605,0)
CIANBRPC CVC^CVC^CIANBRPC^1^^^^1
"MBREQ")
1
"ORD",9,.84)
.84;9;;;EDEOUT^DIFROMSO(.84,DA,"",XPDA);FPRE^DIFROMSI(.84,"",XPDA);EPRE^DIFROMSI(.84,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.84,DA,"",XPDA);DEL^DIFROMSK(.84,"",%)
"ORD",9,.84,0)
DIALOG
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"ORD",20,8989.51)
8989.51;20;;;PAR1E1^XPDTA2;PAR1F1^XPDIA3;PAR1E1^XPDIA3;PAR1F2^XPDIA3;;PAR1DEL^XPDIA3(%)
"ORD",20,8989.51,0)
PARAMETER DEFINITION
"ORD",21,8989.52)
8989.52;21;1;;PAR2E1^XPDTA2;PAR2F1^XPDIA3;PAR2E1^XPDIA3;PAR2F2^XPDIA3;;PAR2DEL^XPDIA3(%)
"ORD",21,8989.52,0)
PARAMETER TEMPLATE
"PKG",219,-1)
1^1
"PKG",219,0)
CIA NETWORK COMPONENTS^CIAN^Networking components from CIA
"PKG",219,1,0)
^9.41A^4^4^3040121^^
"PKG",219,1,1,0)
This package includes the following network I/O components from CIA:
"PKG",219,1,2,0)

"PKG",219,1,3,0)
WebMan
"PKG",219,1,4,0)
RPC Broker
"PKG",219,5)
CIA
"PKG",219,7)
^^III
"PKG",219,22,0)
^9.49I^1^1
"PKG",219,22,1,0)
1.1^3140321^3140319^1
"PKG",219,22,1,1,0)
^^1^1^3140321
"PKG",219,22,1,1,1,0)
CIA's remote procedure call broker.
"PKG",219,"DEV")
DKM/CIA
"PKG",219,"VERSION")
1.1
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
8
"RTN","CIANBACT")
0^1^B32294268
"RTN","CIANBACT",1,0)
CIANBACT ;MSC/IND/DKM - MSC RPC Broker Actions;16-Apr-2010 11:55;DKM
"RTN","CIANBACT",2,0)
 ;;1.1;CIA NETWORK COMPONENTS;**001007**;Sep 18, 2007;Build 63
"RTN","CIANBACT",3,0)
 ;;Copyright 2000-2008, Medsphere Systems Corporation
"RTN","CIANBACT",4,0)
 ;=================================================================
"RTN","CIANBACT",5,0)
 ; Connect action
"RTN","CIANBACT",6,0)
 ; CIADATA is returned to client as:
"RTN","CIANBACT",7,0)
 ;   callback flag^authentication method^server version^case sensitive^context cached
"RTN","CIANBACT",8,0)
ACTC N X,Y,VOL,UCI,PORT,IP,AUTH
"RTN","CIANBACT",9,0)
 S Y=$$GETUCI,UCI(0)=Y,UCI=$$UP^XLFSTR($G(CIA("UCI"),Y)),VOL=$P(UCI,",",2)
"RTN","CIANBACT",10,0)
 S:'$L(UCI) UCI=Y
"RTN","CIANBACT",11,0)
 S:'$L(VOL) VOL=$P(Y,",",2),$P(UCI,",",2)=VOL
"RTN","CIANBACT",12,0)
 I UCI'=UCI(0),$$ERRCHK(0[$$UCICHECK^%ZOSV(UCI),14,UCI) Q
"RTN","CIANBACT",13,0)
 Q:$$ERRCHK('$L(VOL),11)
"RTN","CIANBACT",14,0)
 S AUTH=$$AUTHMETH(UCI),CIADATA="0^"_AUTH_"^1.1^"_$$GET^XPAR("SYS","XU VC CASE SENSITIVE")_"^1"
"RTN","CIANBACT",15,0)
 Q:$$ERRCHK('$L(AUTH),24,UCI)
"RTN","CIANBACT",16,0)
 I $D(^%ZOSF("ACTJ")) D  Q:$$ERRCHK(X'>Y&X,10,Y,X)
"RTN","CIANBACT",17,0)
 .; Y=# active jobs, X=max active jobs
"RTN","CIANBACT",18,0)
 .X ^%ZOSF("ACTJ")
"RTN","CIANBACT",19,0)
 .S X=+$O(^XTV(8989.3,1,4,"B",VOL,0)),X=$S(X:+$P($G(^XTV(8989.3,1,4,X,0)),U,3),1:0)
"RTN","CIANBACT",20,0)
 S PORT=CIA("LP"),X=$$CLIENTIP^CIAUOS,IP=$S(CIAMODE=2:CIAIP,$L(X):X,1:CIA("IP"))
"RTN","CIANBACT",21,0)
 S @("X=$$JOB"_CIAOS)
"RTN","CIANBACT",22,0)
 D ERRCHK('X,12)
"RTN","CIANBACT",23,0)
 Q
"RTN","CIANBACT",24,0)
 ; Disconnect action
"RTN","CIANBACT",25,0)
ACTD D RESET^CIANBRPC()
"RTN","CIANBACT",26,0)
 S CIADATA=1,CIAQUIT=1
"RTN","CIANBACT",27,0)
 Q
"RTN","CIANBACT",28,0)
 ; Query action
"RTN","CIANBACT",29,0)
ACTQ Q:$$ASYCHK^CIANBASY
"RTN","CIANBACT",30,0)
 Q:$$EVTCHK^CIANBEVT
"RTN","CIANBACT",31,0)
 ; Ping action
"RTN","CIANBACT",32,0)
ACTP S DT=$$NOW^XLFDT,CIADATA=$$PARAM^CIANBUTL("CIANB POLLING INTERVAL",1,60)_U_DT,DT=DT\1
"RTN","CIANBACT",33,0)
 Q
"RTN","CIANBACT",34,0)
 ; Subscribe action
"RTN","CIANBACT",35,0)
ACTS S CIADATA=1
"RTN","CIANBACT",36,0)
 Q:$$ERRCHK('$$SUBSCR^CIANBEVT(CIA("EVT"),1),13,CIA("EVT"))
"RTN","CIANBACT",37,0)
 Q
"RTN","CIANBACT",38,0)
 ; Unsubscribe action
"RTN","CIANBACT",39,0)
ACTU S CIADATA=$$SUBSCR^CIANBEVT(CIA("EVT"),0)
"RTN","CIANBACT",40,0)
 Q
"RTN","CIANBACT",41,0)
 ; RPC action
"RTN","CIANBACT",42,0)
ACTR N RPC,RTN,CIAD,XWBWRAP,XWBPTYPE,I
"RTN","CIANBACT",43,0)
 I '$D(CIA("CTX")) S CIA("CTX")=$$GETVAR^CIANBUTL("CTX")
"RTN","CIANBACT",44,0)
 E  D SETVAR^CIANBUTL("CTX",CIA("CTX"))
"RTN","CIANBACT",45,0)
 S:CIA("CTX")="" CIA("CTX")=$$GETVAR^CIANBUTL("AID")
"RTN","CIANBACT",46,0)
 S RPC=$$FIND1^DIC(8994,,"QX",$G(CIA("RPC")))
"RTN","CIANBACT",47,0)
 Q:$$ERRCHK('RPC,3)
"RTN","CIANBACT",48,0)
 S I=$G(^XWB(8994,RPC,0)),RTN=$P(I,U,2,3),XWBWRAP=+$P(I,U,8),XWBPTYPE=$P(I,U,4)
"RTN","CIANBACT",49,0)
 Q:$$ERRCHK($S($E($P(RTN,U,2),1,5)="CIANB":0,1:'$$CANRUN(RPC,CIA("CTX"))),4,CIA("RPC"),CIA("CTX"))
"RTN","CIANBACT",50,0)
 Q:$$ERRCHK("03"'[$P(I,U,6),5)
"RTN","CIANBACT",51,0)
 Q:$$ERRCHK(RTN'?.8AN1"^"1.8AN,6)
"RTN","CIANBACT",52,0)
 Q:$$ERRCHK("^1^2^3^4^5^H^"'[(U_XWBPTYPE_U),6)
"RTN","CIANBACT",53,0)
 Q:$$ERRCHK(ARG>40,7,,ARG,40)
"RTN","CIANBACT",54,0)
 I $G(CIA("ASY")) D
"RTN","CIANBACT",55,0)
 .N RD
"RTN","CIANBACT",56,0)
 .S RD="CIANB THREAD RESOURCE #"_$$GETVAR^CIANBUTL("RDEV")
"RTN","CIANBACT",57,0)
 .S CIAD=$$QUEUE^CIAUTSK("TASK^CIANBASY","ASYNC RPC: "_CIA("RPC"),,"RTN^XWBWRAP^XWBPTYPE^ARG^ARG(^CIA(^XWBOS^P*",RD)
"RTN","CIANBACT",58,0)
 .Q:$$ERRCHK(CIAD<1,8)
"RTN","CIANBACT",59,0)
 .S ^XTMP("CIA",CIA("UID"),"T",CIAD)=""
"RTN","CIANBACT",60,0)
 .D REPLY^CIANBLIS(CIAD)
"RTN","CIANBACT",61,0)
 E  D
"RTN","CIANBACT",62,0)
 .S:XWBPTYPE=4 CIAD=$$TMPGBL^CIANBRPC("X")
"RTN","CIANBACT",63,0)
 .D STREST^CIANBLIS(1),DORPC,DATAOUT
"RTN","CIANBACT",64,0)
 Q
"RTN","CIANBACT",65,0)
 ; Builds the RPC entry code and executes it
"RTN","CIANBACT",66,0)
DORPC N I,P,XWBAPVER,XQY,CIAQUIT,ALOG,$ET
"RTN","CIANBACT",67,0)
 S RTN=RTN_"(.CIAD",XWBAPVER=$G(CIA("VER")),XQY=$$GETVAR^CIANBUTL("AID0")
"RTN","CIANBACT",68,0)
 S ALOG=$$ISACTIVE^CIANBLOG,ALOG(0)=$S(ALOG:$$LOG^CIANBLOG(ALOG,1,CIA("RPC")),1:0)
"RTN","CIANBACT",69,0)
 F I=1:1:ARG D
"RTN","CIANBACT",70,0)
 .S RTN=RTN_","
"RTN","CIANBACT",71,0)
 .Q:'$D(ARG(I))
"RTN","CIANBACT",72,0)
 .S P="P"_I,RTN=RTN_"."_P
"RTN","CIANBACT",73,0)
 .S:$D(@P)=10 @P=""
"RTN","CIANBACT",74,0)
 .D:ALOG(0) ADD^CIANBLOG(ALOG,ALOG(0),P,1)
"RTN","CIANBACT",75,0)
 S RTN=RTN_")"
"RTN","CIANBACT",76,0)
 D
"RTN","CIANBACT",77,0)
 .N ALOG
"RTN","CIANBACT",78,0)
 .D @RTN
"RTN","CIANBACT",79,0)
 I ALOG(0) D
"RTN","CIANBACT",80,0)
 .N VAL,ARY
"RTN","CIANBACT",81,0)
 .S VAL=$C(13)_"Return Data:"_$C(13)
"RTN","CIANBACT",82,0)
 .D ADD^CIANBLOG(ALOG,ALOG(0),"VAL")
"RTN","CIANBACT",83,0)
 .I XWBPTYPE=1 S VAL=$G(CIAD),ARY="VAL"
"RTN","CIANBACT",84,0)
 .E  I XWBPTYPE=2 S ARY="CIAD"
"RTN","CIANBACT",85,0)
 .E  I XWBPTYPE=3 S ARY="CIAD"
"RTN","CIANBACT",86,0)
 .E  I XWBPTYPE=4 S ARY=CIAD
"RTN","CIANBACT",87,0)
 .E  I XWBPTYPE=5 S VAL=$G(@CIAD),ARY="VAL"
"RTN","CIANBACT",88,0)
 .E  I XWBPTYPE="H" S VAL=CIAD,ARY="VAL"
"RTN","CIANBACT",89,0)
 .E  Q
"RTN","CIANBACT",90,0)
 .D ADD^CIANBLOG(ALOG,ALOG(0),ARY)
"RTN","CIANBACT",91,0)
 Q
"RTN","CIANBACT",92,0)
 ; Test for error condition
"RTN","CIANBACT",93,0)
 ; TEST = If true, setup the error
"RTN","CIANBACT",94,0)
 ; ERR  = Error code
"RTN","CIANBACT",95,0)
 ; Pn   = Optional parameters (up to 3)
"RTN","CIANBACT",96,0)
ERRCHK(TEST,ERR,P1,P2,P3) ;
"RTN","CIANBACT",97,0)
 I TEST,'$G(CIAERR(0)) D
"RTN","CIANBACT",98,0)
 .D GETDLG^CIANBUTL(ERR,.CIAERR,.P1,.P2,.P3)
"RTN","CIANBACT",99,0)
 .S CIAERR(0)=ERR
"RTN","CIANBACT",100,0)
 Q:$Q +$G(CIAERR(0))
"RTN","CIANBACT",101,0)
 Q
"RTN","CIANBACT",102,0)
 ; Writes return data to TCP stream
"RTN","CIANBACT",103,0)
DATAOUT D TCPUSE^CIANBLIS
"RTN","CIANBACT",104,0)
 W $C(0)
"RTN","CIANBACT",105,0)
 I XWBPTYPE=1 W $G(CIAD),! Q
"RTN","CIANBACT",106,0)
 I XWBPTYPE=2 D OUT("CIAD",1) Q
"RTN","CIANBACT",107,0)
 I XWBPTYPE=3 D OUT("CIAD",XWBWRAP) Q
"RTN","CIANBACT",108,0)
 I XWBPTYPE=4 D OUT(CIAD,XWBWRAP) Q
"RTN","CIANBACT",109,0)
 I XWBPTYPE=5 W $G(@CIAD),! Q
"RTN","CIANBACT",110,0)
 I XWBPTYPE="H" D HFSOUT(CIAD,XWBWRAP) Q
"RTN","CIANBACT",111,0)
 Q
"RTN","CIANBACT",112,0)
 ; Write array (local or global) to TCP stream
"RTN","CIANBACT",113,0)
OUT(ARY,EOL) ;
"RTN","CIANBACT",114,0)
 N X,L,K
"RTN","CIANBACT",115,0)
 S K=$E(ARY)'="~"
"RTN","CIANBACT",116,0)
 S:'K ARY=$E(ARY,2,999)
"RTN","CIANBACT",117,0)
 Q:'$L(ARY)
"RTN","CIANBACT",118,0)
 S ARY=$NA(@ARY)
"RTN","CIANBACT",119,0)
 S X=ARY,L=$QL(ARY),EOL=$S($G(EOL):$C(13),1:"")
"RTN","CIANBACT",120,0)
 F  S X=$Q(@X) Q:'$L(X)  Q:$NA(@X,L)'=ARY  W @X,EOL,!
"RTN","CIANBACT",121,0)
 K:K @ARY
"RTN","CIANBACT",122,0)
 Q
"RTN","CIANBACT",123,0)
 ; Write contents of HFS to TCP stream
"RTN","CIANBACT",124,0)
HFSOUT(HFS,EOL) ;
"RTN","CIANBACT",125,0)
 N X
"RTN","CIANBACT",126,0)
 S EOL=$S($G(EOL):$C(13),1:"")
"RTN","CIANBACT",127,0)
 D OPEN^CIAUOS(.HFS,"R")
"RTN","CIANBACT",128,0)
 F  Q:$$READ^CIAUOS(.X,HFS)  D
"RTN","CIANBACT",129,0)
 .D TCPUSE^CIANBLIS
"RTN","CIANBACT",130,0)
 .W X,EOL,!
"RTN","CIANBACT",131,0)
 D CLOSE^CIAUOS(.HFS),DELETE^CIAUOS(HFS)
"RTN","CIANBACT",132,0)
 Q
"RTN","CIANBACT",133,0)
 ; Returns true if RPC can run in current context
"RTN","CIANBACT",134,0)
CANRUN(RPC,CTX) ;
"RTN","CIANBACT",135,0)
 Q:'$G(DUZ)!'RPC 0
"RTN","CIANBACT",136,0)
 S CTX(0)=$$OPTLKP^CIANBUTL(CTX)
"RTN","CIANBACT",137,0)
 Q:$$ERRCHK('$L(CTX(0)),2,CTX) 0
"RTN","CIANBACT",138,0)
 D:'$G(^XTMP("CIA",CIA("UID"),"C",CTX(0))) BLDCTX(CTX(0))
"RTN","CIANBACT",139,0)
 Q:$$KCHK^XUSRB("XUPROGMODE") 1
"RTN","CIANBACT",140,0)
 Q $D(^XTMP("CIA",CIA("UID"),"C",CTX(0),RPC))
"RTN","CIANBACT",141,0)
 ; Build RPC context table
"RTN","CIANBACT",142,0)
BLDCTX(OPT,CTX) ;
"RTN","CIANBACT",143,0)
 N X
"RTN","CIANBACT",144,0)
 I '$D(CTX) K ^XTMP("CIA",CIA("UID"),"C",OPT) S ^(OPT)=1,CTX=OPT
"RTN","CIANBACT",145,0)
 Q:$D(^XTMP("CIA",CIA("UID"),"C",CTX,0,OPT))  S ^(OPT)=""
"RTN","CIANBACT",146,0)
 Q:$$OPTCHK^CIANBUTL(OPT,"B")
"RTN","CIANBACT",147,0)
 M ^XTMP("CIA",CIA("UID"),"C",CTX)=^DIC(19,OPT,"RPC","B")
"RTN","CIANBACT",148,0)
 F X=0:0 S X=$O(^DIC(19,OPT,10,"B",X)) Q:'X  D BLDCTX(X,CTX)
"RTN","CIANBACT",149,0)
 K:CTX=OPT ^XTMP("CIA",CIA("UID"),"C",CTX,0)
"RTN","CIANBACT",150,0)
 Q
"RTN","CIANBACT",151,0)
 ; OS-specific job commands
"RTN","CIANBACT",152,0)
JOB1() I CIAMODE=2 D MODE2 Q 1
"RTN","CIANBACT",153,0)
 J EN^CIANBLIS(PORT,IP,1)[UCI]::15
"RTN","CIANBACT",154,0)
 Q $T
"RTN","CIANBACT",155,0)
JOB2() I CIAMODE=2 D MODE2 Q 1
"RTN","CIANBACT",156,0)
 J EN^CIANBLIS(PORT,IP,1)[UCI]:100000:15
"RTN","CIANBACT",157,0)
 Q $T
"RTN","CIANBACT",158,0)
JOB3() I $G(CIA("DBG"))!($G(CIA("VER"))<1.5) J EN^CIANBLIS(PORT,IP,1)[$P(UCI,",")]::15 Q $T
"RTN","CIANBACT",159,0)
 S $P(CIADATA,U)=1
"RTN","CIANBACT",160,0)
 D REPLY^CIANBLIS(CIADATA)
"RTN","CIANBACT",161,0)
 K CIADATA
"RTN","CIANBACT",162,0)
 J EN^CIANBLIS(CIAPORT,CIAIP,2)[$P(UCI,",")]:(:4:CIATDEV:CIATDEV):15
"RTN","CIANBACT",163,0)
 Q $T
"RTN","CIANBACT",164,0)
 ; Mode 2 support for MSM and DSM
"RTN","CIANBACT",165,0)
MODE2 D:UCI'=UCI(0) SETUCI(UCI)
"RTN","CIANBACT",166,0)
 S UCI(0)=UCI
"RTN","CIANBACT",167,0)
 I '$G(CIA("DBG")),$G(CIA("VER"))'<1.5 S $P(CIADATA,U)=1,CIAMODE=1
"RTN","CIANBACT",168,0)
 E  S CIAQUIT=1 D REPLY^CIANBLIS(),TCPCLOSE^CIANBLIS,EN^CIANBLIS(PORT,IP,1)
"RTN","CIANBACT",169,0)
 Q
"RTN","CIANBACT",170,0)
 ; Return current UCI
"RTN","CIANBACT",171,0)
GETUCI() N Y
"RTN","CIANBACT",172,0)
 D UCI^%ZOSV
"RTN","CIANBACT",173,0)
 Q Y
"RTN","CIANBACT",174,0)
 ; Change UCI
"RTN","CIANBACT",175,0)
SETUCI(X) D SWAP^%XUCI
"RTN","CIANBACT",176,0)
 Q
"RTN","CIANBACT",177,0)
 ; Get authentication method for target UCI
"RTN","CIANBACT",178,0)
AUTHMETH(UCI) ;
"RTN","CIANBACT",179,0)
 N X,PC
"RTN","CIANBACT",180,0)
 F PC=2,1 D  Q:$L(X)
"RTN","CIANBACT",181,0)
 .S X=$$GET^XPAR("ALL","CIANB AUTHENTICATION",$P(UCI,",",1,PC))
"RTN","CIANBACT",182,0)
 Q X
"RTN","CIANBASY")
0^2^B5533083
"RTN","CIANBASY",1,0)
CIANBASY ;MSC/IND/DKM - Asynchronous RPC calls ;29-Jun-2012 15:50;PLS
"RTN","CIANBASY",2,0)
 ;;1.1;CIA NETWORK COMPONENTS;**001007,001009**;Sep 18, 2007;Build 63
"RTN","CIANBASY",3,0)
 ;;Copyright 2000-2012, Medsphere Systems Corporation
"RTN","CIANBASY",4,0)
 ;=================================================================
"RTN","CIANBASY",5,0)
 ; Background task for executing an asynchronous RPC
"RTN","CIANBASY",6,0)
TASK N CIAD,TGT,$ET,$ES
"RTN","CIANBASY",7,0)
 S $ET="D ERROR^CIANBASY",ZTREQ="@"
"RTN","CIANBASY",8,0)
 K ^XTMP("CIA",CIA("UID"),"T",ZTSK)
"RTN","CIANBASY",9,0)
 Q:$$S^%ZTLOAD
"RTN","CIANBASY",10,0)
 S ^XTMP("CIA",CIA("UID"),"T",ZTSK)=0,TGT=$NA(^(ZTSK,0))
"RTN","CIANBASY",11,0)
 S:XWBPTYPE=4 CIAD=TGT
"RTN","CIANBASY",12,0)
 D DORPC^CIANBACT
"RTN","CIANBASY",13,0)
 I XWBPTYPE=1 S @TGT@(0)=CIAD
"RTN","CIANBASY",14,0)
 E  I XWBPTYPE>1,XWBPTYPE<4 M @TGT=CIAD S:XWBPTYPE=2 XWBWRAP=1
"RTN","CIANBASY",15,0)
 E  I XWBPTYPE=4,$L(CIAD),CIAD'=TGT M @TGT=@CIAD K @CIAD
"RTN","CIANBASY",16,0)
 E  I XWBPTYPE=5 S @TGT@(0)=$G(@CIAD)
"RTN","CIANBASY",17,0)
 E  I XWBPTYPE="H" D
"RTN","CIANBASY",18,0)
 .N X,Y,FIL,DIR
"RTN","CIANBASY",19,0)
 .S X=$E($$DIRDLM^CIAUOS,3),Y=$L(CIAD,X),DIR=$P(CIAD,X,1,Y-1),FIL=$P(CIAD,X,Y)
"RTN","CIANBASY",20,0)
 .I '$$FTG^%ZISH(DIR,FIL,$NA(@TGT@(0)),$QL(TGT)+1)
"RTN","CIANBASY",21,0)
 .D DELETE^CIAUOS(CIAD)
"RTN","CIANBASY",22,0)
 I $$S^%ZTLOAD K ^XTMP("CIA",CIA("UID"),"T",ZTSK)
"RTN","CIANBASY",23,0)
 E  S ^XTMP("CIA",CIA("UID"),"T",ZTSK)=ZTSK_"^0^"_XWBWRAP
"RTN","CIANBASY",24,0)
 Q
"RTN","CIANBASY",25,0)
ERROR D SETERR(-1,$$EC^%ZOSV)
"RTN","CIANBASY",26,0)
 D ^%ZTER,UNWIND^%ZTER
"RTN","CIANBASY",27,0)
 Q
"RTN","CIANBASY",28,0)
 ; Retrieve specified routine line
"RTN","CIANBASY",29,0)
RTNTEXT(RTN) ;
"RTN","CIANBASY",30,0)
 N TAG
"RTN","CIANBASY",31,0)
 S TAG=$P(RTN,U),RTN=$P(RTN,U,2)
"RTN","CIANBASY",32,0)
 Q $S('$L(RTN):$T(^@TAG),$L(TAG):$T(@TAG^@RTN),1:$T(^@RTN))
"RTN","CIANBASY",33,0)
 ; Set error info to return to client
"RTN","CIANBASY",34,0)
SETERR(CODE,TEXT) ;
"RTN","CIANBASY",35,0)
 K ^XTMP("CIA",CIA("UID"),"T",ZTSK) M ^(ZTSK,0,0)=TEXT
"RTN","CIANBASY",36,0)
 S ^XTMP("CIA",CIA("UID"),"T",ZTSK)=ZTSK_U_CODE_"^1"
"RTN","CIANBASY",37,0)
 Q
"RTN","CIANBASY",38,0)
 ; RPC to check for completed tasks
"RTN","CIANBASY",39,0)
 ; Results[0] at the client end will contain the TaskMan ID of the
"RTN","CIANBASY",40,0)
 ; completed RPC. The remainder of the Result will be the data
"RTN","CIANBASY",41,0)
 ; returned by the RPC.
"RTN","CIANBASY",42,0)
ASYCHK() N ZTSK,CIAD,X
"RTN","CIANBASY",43,0)
 S ZTSK=0
"RTN","CIANBASY",44,0)
 F  S ZTSK=+$O(^XTMP("CIA",CIA("UID"),"T",ZTSK)) Q:'ZTSK  S X=$G(^(ZTSK)),CIAD=$NA(^(ZTSK,0)) I X D  Q
"RTN","CIANBASY",45,0)
 .D TCPUSE^CIANBLIS
"RTN","CIANBASY",46,0)
 .W $C(2),X,$C(13),!
"RTN","CIANBASY",47,0)
 .D OUT^CIANBACT(CIAD,$P(X,U,3))
"RTN","CIANBASY",48,0)
 .K ^XTMP("CIA",CIA("UID"),"T",ZTSK)
"RTN","CIANBASY",49,0)
 Q ZTSK
"RTN","CIANBASY",50,0)
 ; RPC: Stop a task
"RTN","CIANBASY",51,0)
 ; Signals to a backround task that it should stop running.  Cleans up
"RTN","CIANBASY",52,0)
 ; any output generated by completed tasks.
"RTN","CIANBASY",53,0)
STOP(CIAD,ZTSK) ;
"RTN","CIANBASY",54,0)
 S CIAD=''$D(^XTMP("CIA",CIA("UID"),"T",ZTSK)) K:CIAD ^(ZTSK)
"RTN","CIANBASY",55,0)
 Q:'$D(^%ZTSK(ZTSK))
"RTN","CIANBASY",56,0)
 S $P(^%ZTSK(ZTSK,.1),U,10)=$P($G(^VA(200,DUZ,0)),U)
"RTN","CIANBASY",57,0)
 D DQ^%ZTLOAD
"RTN","CIANBASY",58,0)
 I $G(ZTSK(0)) D KILL^%ZTLOAD
"RTN","CIANBASY",59,0)
 Q
"RTN","CIANBASY",60,0)
 ; Stop all tasks in task list
"RTN","CIANBASY",61,0)
STOPALL N ZTSK
"RTN","CIANBASY",62,0)
 S ZTSK=0
"RTN","CIANBASY",63,0)
 F  S ZTSK=$O(^XTMP("CIA",CIA("UID"),"T",ZTSK)) Q:'ZTSK  D STOP(,ZTSK)
"RTN","CIANBASY",64,0)
 K ^XTMP("CIA",CIA("UID"),"T")
"RTN","CIANBASY",65,0)
 Q
"RTN","CIANBEVT")
0^3^B59877150
"RTN","CIANBEVT",1,0)
CIANBEVT ;MSC/IND/DKM - Event Support ;03-Dec-2009 16:53;PLS
"RTN","CIANBEVT",2,0)
 ;;1.1;CIA NETWORK COMPONENTS;**001007**;Sep 18, 2007;Build 63
"RTN","CIANBEVT",3,0)
 ;;Copyright 2000-2008, Medsphere Systems Corporation
"RTN","CIANBEVT",4,0)
 ;=================================================================
"RTN","CIANBEVT",5,0)
 ; Check for the occurrence of host events
"RTN","CIANBEVT",6,0)
EVTCHK() ;EP
"RTN","CIANBEVT",7,0)
 N RTN,$ET,X
"RTN","CIANBEVT",8,0)
 S $ET="",X="ERR1^CIANBEVT",@^%ZOSF("TRAP")
"RTN","CIANBEVT",9,0)
 L +^XTMP("CIA",CIA("UID"),"E"):0
"RTN","CIANBEVT",10,0)
 E  Q 0
"RTN","CIANBEVT",11,0)
 S RTN=+$O(^XTMP("CIA",CIA("UID"),"E",0)),X=$NA(^(RTN))
"RTN","CIANBEVT",12,0)
 I RTN D
"RTN","CIANBEVT",13,0)
 .D TCPUSE^CIANBLIS
"RTN","CIANBEVT",14,0)
 .W $C(3)
"RTN","CIANBEVT",15,0)
 .D OUT^CIANBACT(X)
"RTN","CIANBEVT",16,0)
ERR1 L -^XTMP("CIA",CIA("UID"),"E")
"RTN","CIANBEVT",17,0)
 Q $G(RTN)
"RTN","CIANBEVT",18,0)
 ; Start monitor in background if not already running
"RTN","CIANBEVT",19,0)
MONSTART ;EP
"RTN","CIANBEVT",20,0)
 I '$$MONCHECK,$$QUEUE^CIAUTSK("MONITOR^CIANBEVT","VueCentric Event Monitor")
"RTN","CIANBEVT",21,0)
 Q
"RTN","CIANBEVT",22,0)
 ; Returns true if event monitor is running
"RTN","CIANBEVT",23,0)
 ;   LOCK = If specified and true, do not release lock.
"RTN","CIANBEVT",24,0)
MONCHECK(LOCK) ;EP
"RTN","CIANBEVT",25,0)
 L +^XTMP("CIANBEVT MONITOR"):0
"RTN","CIANBEVT",26,0)
 E  Q 1
"RTN","CIANBEVT",27,0)
 L:'$G(LOCK) -^XTMP("CIANBEVT MONITOR")
"RTN","CIANBEVT",28,0)
 Q 0
"RTN","CIANBEVT",29,0)
 ; Taskman entry point for background event monitor
"RTN","CIANBEVT",30,0)
MONITOR ;EP
"RTN","CIANBEVT",31,0)
 N IEN,TYPE,EXE,IDLE,PMETH,X
"RTN","CIANBEVT",32,0)
 S ZTREQ="@",IDLE=360
"RTN","CIANBEVT",33,0)
 Q:$$MONCHECK(1)
"RTN","CIANBEVT",34,0)
 F  D  Q:IDLE<1!$$S^%ZTLOAD
"RTN","CIANBEVT",35,0)
 .H 5
"RTN","CIANBEVT",36,0)
 .F IEN=0:0 S IEN=$O(^CIANB(19941.21,IEN)) Q:'IEN  D
"RTN","CIANBEVT",37,0)
 ..S X=$G(^(IEN,0)),TYPE=$P(X,U),PMETH=$P(X,U,6),EXE=$G(^(1)) ; Note: NR set above
"RTN","CIANBEVT",38,0)
 ..I $L(EXE),'$P(X,U,2),$$CHKINT(+$P(X,U,3)) D
"RTN","CIANBEVT",39,0)
 ...I PMETH D EXEMON Q
"RTN","CIANBEVT",40,0)
 ...N UID
"RTN","CIANBEVT",41,0)
 ...F  Q:'$$NXTUID^CIANBUTL(.UID)  D EXEUID(UID,TYPE)
"RTN","CIANBEVT",42,0)
 .S IDLE=$S($$NXTUID^CIANBUTL:360,1:IDLE-1)
"RTN","CIANBEVT",43,0)
 L -^XTMP("CIANBEVT MONITOR")
"RTN","CIANBEVT",44,0)
 Q
"RTN","CIANBEVT",45,0)
 ; Execute an event monitor in session context
"RTN","CIANBEVT",46,0)
EXEUID(UID,TYPE) ;EP
"RTN","CIANBEVT",47,0)
 Q:'$$ISSUBSCR(UID,TYPE)
"RTN","CIANBEVT",48,0)
 N CIA,DUZ
"RTN","CIANBEVT",49,0)
 S CIA("UID")=UID,DUZ=$$EXEVAR("DUZ"),DUZ(0)=$$EXEVAR("DUZ0"),DUZ(2)=$$EXEVAR("DUZ2")
"RTN","CIANBEVT",50,0)
 D EXEMON
"RTN","CIANBEVT",51,0)
 Q
"RTN","CIANBEVT",52,0)
 ; Execute the event monitor
"RTN","CIANBEVT",53,0)
EXEMON N X,$ET
"RTN","CIANBEVT",54,0)
 S X="EXEERR^CIANBEVT",@^%ZOSF("TRAP"),$ET=""
"RTN","CIANBEVT",55,0)
 D EXERUN
"RTN","CIANBEVT",56,0)
 Q
"RTN","CIANBEVT",57,0)
EXERUN N IEN,IDLE
"RTN","CIANBEVT",58,0)
 X EXE
"RTN","CIANBEVT",59,0)
 Q
"RTN","CIANBEVT",60,0)
 ; Log any errors
"RTN","CIANBEVT",61,0)
EXEERR N ERT,ERD,X
"RTN","CIANBEVT",62,0)
 S ERT=$TR($$EC^%ZOSV,U,"~"),ERD=$$NOW^XLFDT
"RTN","CIANBEVT",63,0)
 S X=$G(^CIANB(19941.21,IEN,100)),^(100)=ERD_U_ERT
"RTN","CIANBEVT",64,0)
 D:(ERD\1'=(X\1))!($P(X,U,2)'=ERT) ^%ZTER
"RTN","CIANBEVT",65,0)
 Q
"RTN","CIANBEVT",66,0)
EXEVAR(VAR) ;
"RTN","CIANBEVT",67,0)
 Q $$GETVAR^CIANBUTL(VAR,,,UID)
"RTN","CIANBEVT",68,0)
 ; Check nominal polling interval.  Return true if event needs to be polled.
"RTN","CIANBEVT",69,0)
CHKINT(INT) ;EP
"RTN","CIANBEVT",70,0)
 Q:'INT 1
"RTN","CIANBEVT",71,0)
 N NXT,NOW,CHK
"RTN","CIANBEVT",72,0)
 S NOW=$H,NOW=NOW*86400+$P(NOW,",",2)
"RTN","CIANBEVT",73,0)
 S NXT=$G(IEN(IEN),NOW),CHK=NOW'<NXT
"RTN","CIANBEVT",74,0)
 S:CHK IEN(IEN)=NOW+INT
"RTN","CIANBEVT",75,0)
 Q CHK
"RTN","CIANBEVT",76,0)
 ; RPC: Broadcast an event to some or all active users
"RTN","CIANBEVT",77,0)
BCAST(DATA,EVENT,STUB,LST,AID) ;
"RTN","CIANBEVT",78,0)
 S DATA=$$BRDCAST(.EVENT,.STUB,.LST,.AID)
"RTN","CIANBEVT",79,0)
 Q
"RTN","CIANBEVT",80,0)
 ; Called by event monitor to signal an event to client
"RTN","CIANBEVT",81,0)
SIGNAL(STUB) ;
"RTN","CIANBEVT",82,0)
 D QUEUE(TYPE,.STUB)
"RTN","CIANBEVT",83,0)
 Q
"RTN","CIANBEVT",84,0)
 ; Add an event to a process event queue
"RTN","CIANBEVT",85,0)
QUEUE(TYPE,STUB,UID) ;EP
"RTN","CIANBEVT",86,0)
 N Q
"RTN","CIANBEVT",87,0)
 S:'$D(UID) UID=$G(CIA("UID"))
"RTN","CIANBEVT",88,0)
 I '$$ISSUBSCR(UID,TYPE) Q:$Q 0 Q
"RTN","CIANBEVT",89,0)
 L +^XTMP("CIA",UID,"E"):5
"RTN","CIANBEVT",90,0)
 E  Q:$Q 0 Q
"RTN","CIANBEVT",91,0)
 S Q=1+$O(^XTMP("CIA",UID,"E",$C(1)),-1),^(Q,0)=TYPE_$C(13) M ^(1)=STUB
"RTN","CIANBEVT",92,0)
 L -^XTMP("CIA",UID,"E")
"RTN","CIANBEVT",93,0)
 Q:$Q 1
"RTN","CIANBEVT",94,0)
 Q
"RTN","CIANBEVT",95,0)
 ; Lookup event type, returning IEN
"RTN","CIANBEVT",96,0)
EVENTIEN(TYPE) ;EP
"RTN","CIANBEVT",97,0)
 N X,Y
"RTN","CIANBEVT",98,0)
 Q:TYPE=+TYPE!'$L(TYPE) +TYPE
"RTN","CIANBEVT",99,0)
 S X=$E(TYPE,1,30),Y=0
"RTN","CIANBEVT",100,0)
 F  S Y=+$O(^CIANB(19941.21,"B",X,Y)) Q:'Y!($P($G(^CIANB(19941.21,Y,0)),U)=TYPE)
"RTN","CIANBEVT",101,0)
 Q $S(Y:Y,1:$$EVENTIEN($P(TYPE,".",1,$L(TYPE,".")-1)))
"RTN","CIANBEVT",102,0)
 ; Return event name, given IEN
"RTN","CIANBEVT",103,0)
EVENTNAM(IEN) ;EP
"RTN","CIANBEVT",104,0)
 Q $P($G(^CIANB(19941.21,+IEN,0)),U)
"RTN","CIANBEVT",105,0)
 ; Check to see if an event type is disabled
"RTN","CIANBEVT",106,0)
DISABLED(TYPE) ;EP
"RTN","CIANBEVT",107,0)
 N X,Y
"RTN","CIANBEVT",108,0)
 S X=$$EVENTIEN(TYPE),Y=$G(^CIANB(19941.21,+X,0)),TYPE=$P(Y,U),Y=+$P(Y,U,2)
"RTN","CIANBEVT",109,0)
 S:'Y Y=$$KEYCHECK(X,20)
"RTN","CIANBEVT",110,0)
 Q $S(Y:Y,'X:0,1:$$DISABLED($P(TYPE,".",1,$L(TYPE,".")-1)))
"RTN","CIANBEVT",111,0)
 ; Check to see if event type is protected by security key(s)
"RTN","CIANBEVT",112,0)
 ; Returns true if user does not have required keys
"RTN","CIANBEVT",113,0)
 ;   SB=20: Publication keys; SB=21: Subscription keys
"RTN","CIANBEVT",114,0)
KEYCHECK(TYPE,SB) ;EP
"RTN","CIANBEVT",115,0)
 N X,Y,Z
"RTN","CIANBEVT",116,0)
 S X=$$EVENTIEN(TYPE),(Y,Z)=0
"RTN","CIANBEVT",117,0)
 F  S Z=$O(^CIANB(19941.21,X,SB,"B",Z)) Q:'Z  D  Q:'Y
"RTN","CIANBEVT",118,0)
 .S Y='$$HASKEY(Z)
"RTN","CIANBEVT",119,0)
 Q Y
"RTN","CIANBEVT",120,0)
 ; Return true if user has key
"RTN","CIANBEVT",121,0)
HASKEY(KEY) ;EP
"RTN","CIANBEVT",122,0)
 S:KEY=+KEY KEY=$$LKUP^XPDKEY(KEY)
"RTN","CIANBEVT",123,0)
 Q $S($L(KEY):''$$KCHK^XUSRB(KEY),1:0)
"RTN","CIANBEVT",124,0)
 ; Signal an event to all or selected sessions
"RTN","CIANBEVT",125,0)
 ; If called as extrinsic, returns # of events broadcast
"RTN","CIANBEVT",126,0)
BRDCAST(TYPE,STUB,USR,AID) ;EP
"RTN","CIANBEVT",127,0)
 N X,C
"RTN","CIANBEVT",128,0)
 S C=0
"RTN","CIANBEVT",129,0)
 I '$$DISABLED(TYPE) D
"RTN","CIANBEVT",130,0)
 .I $D(USR("DUZ"))>1 D
"RTN","CIANBEVT",131,0)
 ..F  Q:'$$NXTUID^CIANBUTL(.X,-1,.AID)  D
"RTN","CIANBEVT",132,0)
 ...S:$D(USR("DUZ",+$$GETVAR^CIANBUTL("DUZ",,,X))) USR("UID",X)=""
"RTN","CIANBEVT",133,0)
 .S X=""
"RTN","CIANBEVT",134,0)
 .F  D  Q:'X
"RTN","CIANBEVT",135,0)
 ..I $D(USR)>1 S X=$O(USR("UID",X))
"RTN","CIANBEVT",136,0)
 ..E  D NXTUID^CIANBUTL(.X,-1,.AID)
"RTN","CIANBEVT",137,0)
 ..S:X C=C+$$QUEUE(.TYPE,.STUB,X)
"RTN","CIANBEVT",138,0)
 .D LOG(TYPE,.STUB)
"RTN","CIANBEVT",139,0)
 .D FPRTCOL(TYPE,.STUB)
"RTN","CIANBEVT",140,0)
 Q:$Q C
"RTN","CIANBEVT",141,0)
 Q
"RTN","CIANBEVT",142,0)
 ; Fire Associated Event Protocol
"RTN","CIANBEVT",143,0)
FPRTCOL(TYPE,STUB) ;
"RTN","CIANBEVT",144,0)
 N EVT,X
"RTN","CIANBEVT",145,0)
 S EVT=$$EVENTIEN(TYPE)
"RTN","CIANBEVT",146,0)
 Q:'EVT
"RTN","CIANBEVT",147,0)
 S X=$P($G(^CIANB(19941.21,+EVT,0)),U,7)_";ORD(101,"
"RTN","CIANBEVT",148,0)
 Q:'X
"RTN","CIANBEVT",149,0)
 D EN^XQOR
"RTN","CIANBEVT",150,0)
 Q
"RTN","CIANBEVT",151,0)
 ; Subscribe to / unsubscribe from a named event
"RTN","CIANBEVT",152,0)
 ; Returns new subscription state
"RTN","CIANBEVT",153,0)
SUBSCR(TYPE,SUBSCR) ;EP
"RTN","CIANBEVT",154,0)
 I '$L(TYPE) Q:$Q 0 Q
"RTN","CIANBEVT",155,0)
 N CURRNT
"RTN","CIANBEVT",156,0)
 S CURRNT=''$D(^XTMP("CIA",CIA("UID"),"S",TYPE)),SUBSCR=''$G(SUBSCR)
"RTN","CIANBEVT",157,0)
 I CURRNT'=SUBSCR D
"RTN","CIANBEVT",158,0)
 .I SUBSCR D  Q:'SUBSCR
"RTN","CIANBEVT",159,0)
 ..I $$KEYCHECK(TYPE,21) S SUBSCR=0
"RTN","CIANBEVT",160,0)
 ..E  S ^XTMP("CIA",CIA("UID"),"S",TYPE)=""
"RTN","CIANBEVT",161,0)
 .E  D
"RTN","CIANBEVT",162,0)
 ..K ^XTMP("CIA",CIA("UID"),"S",TYPE)
"RTN","CIANBEVT",163,0)
 ..D CLRVAR^CIANBUTL("EVENT."_TYPE)
"RTN","CIANBEVT",164,0)
 .D BRDCAST($S(SUBSCR:"",1:"UN")_"SUBSCRIBE."_TYPE,$$SESSION^CIANBUTL)
"RTN","CIANBEVT",165,0)
 Q:$Q SUBSCR
"RTN","CIANBEVT",166,0)
 Q
"RTN","CIANBEVT",167,0)
 ; Unsubscribe from all events (done at logout)
"RTN","CIANBEVT",168,0)
UNSUBALL ;EP
"RTN","CIANBEVT",169,0)
 N TYPE
"RTN","CIANBEVT",170,0)
 S TYPE=""
"RTN","CIANBEVT",171,0)
 F  S TYPE=$O(^XTMP("CIA",CIA("UID"),"S",TYPE)) Q:'$L(TYPE)  D
"RTN","CIANBEVT",172,0)
 .D SUBSCR(TYPE,0)
"RTN","CIANBEVT",173,0)
 Q
"RTN","CIANBEVT",174,0)
 ; Returns true if session is a subscriber
"RTN","CIANBEVT",175,0)
ISSUBSCR(UID,TYPE) ;EP
"RTN","CIANBEVT",176,0)
 Q $S('$$ISACTIVE^CIANBUTL(UID):0,1:$$ISSUBX(TYPE))
"RTN","CIANBEVT",177,0)
ISSUBX(TYPE) ;
"RTN","CIANBEVT",178,0)
 Q $S('$L(TYPE):0,$D(^XTMP("CIA",UID,"S",TYPE)):1,1:$$ISSUBX($P(TYPE,".",1,$L(TYPE,".")-1)))
"RTN","CIANBEVT",179,0)
 ; Returns list of subscribers to a given event type
"RTN","CIANBEVT",180,0)
GETSUBSC(DATA,TYPE) ;EP
"RTN","CIANBEVT",181,0)
 N Z
"RTN","CIANBEVT",182,0)
 D GETSESSN^CIANBRPC(.DATA)
"RTN","CIANBEVT",183,0)
 F Z=0:0 S Z=$O(@DATA@(Z)) Q:'Z  K:'$$ISSUBSCR(+@DATA@(Z),TYPE) @DATA@(Z)
"RTN","CIANBEVT",184,0)
 Q
"RTN","CIANBEVT",185,0)
 ; Returns number of days to retain log entries for an event type.
"RTN","CIANBEVT",186,0)
ISLOGGED(TYPE) ;EP
"RTN","CIANBEVT",187,0)
 N X,Y
"RTN","CIANBEVT",188,0)
 S TYPE=$$EVENTIEN(TYPE)
"RTN","CIANBEVT",189,0)
 S:TYPE X=^CIANB(19941.21,TYPE,0),Y=$P(X,U,4),X=$P(X,U)
"RTN","CIANBEVT",190,0)
 Q $S('TYPE:0,'$L(Y):$$ISLOGGED($P(X,".",$L(X,".")-1)),1:Y)
"RTN","CIANBEVT",191,0)
 ; Log an event
"RTN","CIANBEVT",192,0)
LOG(TYPE,STUB) ;EP
"RTN","CIANBEVT",193,0)
 N IEN,FDA,ERR,STB,X
"RTN","CIANBEVT",194,0)
 S IEN=$$ISACTIVE^CIANBLOG
"RTN","CIANBEVT",195,0)
 I IEN D
"RTN","CIANBEVT",196,0)
 .S X=$$LOG^CIANBLOG(IEN,2,TYPE)
"RTN","CIANBEVT",197,0)
 .D:X ADD^CIANBLOG(IEN,X,"STUB")
"RTN","CIANBEVT",198,0)
 Q:'$$ISLOGGED(TYPE)
"RTN","CIANBEVT",199,0)
 S FDA=$NA(FDA(19941.23,"+1,")),STB="STUB",X=0
"RTN","CIANBEVT",200,0)
 F  D  Q:'$L(STB)
"RTN","CIANBEVT",201,0)
 .S:$D(@STB)#2 X=X+1,STB(X)=@STB
"RTN","CIANBEVT",202,0)
 .S STB=$Q(@STB)
"RTN","CIANBEVT",203,0)
 S @FDA@(.01)=$$NOW^XLFDT
"RTN","CIANBEVT",204,0)
 S @FDA@(1)=TYPE
"RTN","CIANBEVT",205,0)
 S @FDA@(2)=DUZ
"RTN","CIANBEVT",206,0)
 S @FDA@(3)=$$GETUID^CIANBUTL
"RTN","CIANBEVT",207,0)
 S:X @FDA@(10)="STB"
"RTN","CIANBEVT",208,0)
 D UPDATE^DIE("U","FDA",,"ERR")
"RTN","CIANBEVT",209,0)
 Q
"RTN","CIANBEVT",210,0)
 ; Purge event log.  Specify at least one of:
"RTN","CIANBEVT",211,0)
 ;   DATE = Date before which entries will be purged.
"RTN","CIANBEVT",212,0)
 ;   TYPE = Event type to be purged.
"RTN","CIANBEVT",213,0)
 ;   FLAG = If set, purges child events as well.
"RTN","CIANBEVT",214,0)
PURGELOG(DATE,TYPE,FLAG) ;EP
"RTN","CIANBEVT",215,0)
 N IEN,CNT
"RTN","CIANBEVT",216,0)
 S CNT=0,TYPE=$G(TYPE),FLAG=$S($G(FLAG):12,1:1)
"RTN","CIANBEVT",217,0)
 S:TYPE=+TYPE TYPE=$$EVENTNAM(TYPE)
"RTN","CIANBEVT",218,0)
 I $G(DATE) D
"RTN","CIANBEVT",219,0)
 .F  S DATE=$O(^CIANB(19941.23,"B",DATE),-1),IEN=0 Q:'DATE  D
"RTN","CIANBEVT",220,0)
 ..F  S IEN=$O(^CIANB(19941.23,"B",DATE,IEN)) Q:'IEN  D
"RTN","CIANBEVT",221,0)
 ...I $L(TYPE),FLAG'[$$RELATES(TYPE,$P(^CIANB(19941.23,IEN,0),U,2)) Q
"RTN","CIANBEVT",222,0)
 ...S CNT=CNT+$$DELLOG(IEN)
"RTN","CIANBEVT",223,0)
 E  D
"RTN","CIANBEVT",224,0)
 .N TYP
"RTN","CIANBEVT",225,0)
 .S IEN=0,TYP=TYPE
"RTN","CIANBEVT",226,0)
 .F  Q:'$L(TYPE)  D
"RTN","CIANBEVT",227,0)
 ..F  S IEN=$O(^CIANB(19941.23,"C",TYPE,IEN)) Q:'IEN  S CNT=CNT+$$DELLOG(IEN)
"RTN","CIANBEVT",228,0)
 ..S TYPE=$O(^CIANB(19941.23,"C",TYPE))
"RTN","CIANBEVT",229,0)
 ..S:FLAG'[$$RELATES(TYP,TYPE) TYPE=""
"RTN","CIANBEVT",230,0)
 Q:$Q CNT
"RTN","CIANBEVT",231,0)
 Q
"RTN","CIANBEVT",232,0)
 ; Delete log entry corresponding to IEN
"RTN","CIANBEVT",233,0)
DELLOG(IEN) ;EP
"RTN","CIANBEVT",234,0)
 N FDA,ERR
"RTN","CIANBEVT",235,0)
 S FDA(19941.23,IEN_",",.01)="@"
"RTN","CIANBEVT",236,0)
 D FILE^DIE(,"FDA","ERR")
"RTN","CIANBEVT",237,0)
 Q:$Q '$D(ERR)
"RTN","CIANBEVT",238,0)
 Q
"RTN","CIANBEVT",239,0)
 ; Task purge in background
"RTN","CIANBEVT",240,0)
TASKPRG ;EP
"RTN","CIANBEVT",241,0)
 N ZTSK
"RTN","CIANBEVT",242,0)
 S ZTSK=$$QUEUE^CIAUTSK("DOPURGE^CIANBEVT(1)","Purge CIA EVENT LOG")
"RTN","CIANBEVT",243,0)
 I ZTSK>0 W !,"CIA EVENT LOG purge submitted as task #",ZTSK,!!
"RTN","CIANBEVT",244,0)
 E  W !,"Error submitting CIA EVENT LOG purge.",!!
"RTN","CIANBEVT",245,0)
 Q
"RTN","CIANBEVT",246,0)
 ; Purges event log according to retention settings
"RTN","CIANBEVT",247,0)
DOPURGE(SILENT) ;EP
"RTN","CIANBEVT",248,0)
 N IEN,TPNM,TPEN,DATE,CNT,TOT
"RTN","CIANBEVT",249,0)
 S TPNM="",SILENT=+$G(SILENT),TOT=0
"RTN","CIANBEVT",250,0)
 F  S TPNM=$O(^CIANB(19941.23,"C",TPNM)) Q:'$L(TPNM)  D
"RTN","CIANBEVT",251,0)
 .S TPEN=$$EVENTIEN(TPNM),DATE=+$P($G(^CIANB(19941.21,TPEN,0)),U,5)
"RTN","CIANBEVT",252,0)
 .S DATE=$$FMADD^XLFDT(DT,$S(DATE:1-DATE,1:-13))
"RTN","CIANBEVT",253,0)
 .S CNT=$$PURGELOG(DATE,TPNM),TOT=TOT+CNT
"RTN","CIANBEVT",254,0)
 .I CNT,'SILENT W $$SNGPLR^CIAU(CNT,"event")," purged for ",TPNM,!
"RTN","CIANBEVT",255,0)
 W:'SILENT !,"Total events purged: ",TOT,!!
"RTN","CIANBEVT",256,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","CIANBEVT",257,0)
 Q
"RTN","CIANBEVT",258,0)
 ; Returns the relationship between event types
"RTN","CIANBEVT",259,0)
 ;   0 = none
"RTN","CIANBEVT",260,0)
 ;   1 = same
"RTN","CIANBEVT",261,0)
 ;   2 = A is parent of B
"RTN","CIANBEVT",262,0)
 ;   3 = B is parent of A
"RTN","CIANBEVT",263,0)
RELATES(EVA,EVB) ;EP
"RTN","CIANBEVT",264,0)
 N SWP,X
"RTN","CIANBEVT",265,0)
 S:EVA=+EVA EVA=$$EVENTNAM(EVA)
"RTN","CIANBEVT",266,0)
 S:EVB=+EVB EVB=$$EVENTNAM(EVB)
"RTN","CIANBEVT",267,0)
 S:$L(EVA)>$L(EVB) SWP=EVA,EVA=EVB,EVB=SWP
"RTN","CIANBEVT",268,0)
 Q:EVA=EVB 1
"RTN","CIANBEVT",269,0)
 F  D  Q:'$L(EVB)!(EVA=EVB)
"RTN","CIANBEVT",270,0)
 .S EVB=$P(EVB,".",1,$L(EVB,".")-1)
"RTN","CIANBEVT",271,0)
 Q $S(EVA'=EVB:0,$D(SWP):3,1:2)
"RTN","CIANBINI")
0^8^B14896343
"RTN","CIANBINI",1,0)
CIANBINI ;MSC/IND/DKM - MSC RPC Broker Installation ;20-Mar-2014 14:38;PIW
"RTN","CIANBINI",2,0)
 ;;1.1;CIA NETWORK COMPONENTS;**001007,001009**;Sep 18, 2007;Build 63
"RTN","CIANBINI",3,0)
 ;;Copyright 2000-2012, Medsphere Systems Corporation
"RTN","CIANBINI",4,0)
 ;=================================================================
"RTN","CIANBINI",5,0)
 ; Environment check
"RTN","CIANBINI",6,0)
EC D PATCH("XPAREDT2","26,35,52","KERNEL TOOLKIT")
"RTN","CIANBINI",7,0)
 D RTNTST("CIAU",1.2,"CIA UTILITIES 1.2")
"RTN","CIANBINI",8,0)
 D OBJCHK
"RTN","CIANBINI",9,0)
 I '$G(XPDQUIT),$G(XPDENV)=1 D
"RTN","CIANBINI",10,0)
 .N X
"RTN","CIANBINI",11,0)
 .L +^XTMP("CIANBLIS"):0
"RTN","CIANBINI",12,0)
 .I  L -^XTMP("CIANBLIS") Q
"RTN","CIANBINI",13,0)
 .D MES("One or more broker processes are currently running."),MES()
"RTN","CIANBINI",14,0)
 .I '$$ASK^CIAU("   Do you wish to continue the installation") S XPDABORT=2
"RTN","CIANBINI",15,0)
 .E  D:$L($T(+0^CIANBLIS)) STOPALL^CIANBLIS
"RTN","CIANBINI",16,0)
 .F X="XPI1","XPO1","XPZ1" S XPDDIQ(X)=0
"RTN","CIANBINI",17,0)
 .S XPDNOQUE=1
"RTN","CIANBINI",18,0)
 Q
"RTN","CIANBINI",19,0)
 ; Check if specified routine is installed
"RTN","CIANBINI",20,0)
RTNTST(RTN,VN,MSG) ;
"RTN","CIANBINI",21,0)
 D:$$RTNVER(RTN)<VN MES(MSG_" must be installed before proceeding.",2)
"RTN","CIANBINI",22,0)
 Q
"RTN","CIANBINI",23,0)
 ; Get version # for specified routine
"RTN","CIANBINI",24,0)
RTNVER(RTN) ;
"RTN","CIANBINI",25,0)
 Q $P($T(+2^@RTN),";",3)
"RTN","CIANBINI",26,0)
 ; Check patch #s for specified routine
"RTN","CIANBINI",27,0)
PATCH(RTN,PN,MSG) ;
"RTN","CIANBINI",28,0)
 N X,Y,L,F
"RTN","CIANBINI",29,0)
 F X=1:1:$L(PN,",") D
"RTN","CIANBINI",30,0)
 .S Y=$P(PN,",",X),F=0
"RTN","CIANBINI",31,0)
 .F L=2,3 D  Q:F
"RTN","CIANBINI",32,0)
 ..S F=$TR($P($T(+L^@RTN),";",5),"*",",")[(","_Y_",")
"RTN","CIANBINI",33,0)
 .D:'F MES(MSG_" patch #"_Y_" must be installed before proceeding.",2)
"RTN","CIANBINI",34,0)
 Q
"RTN","CIANBINI",35,0)
 ; Check binary version against M system
"RTN","CIANBINI",36,0)
OBJCHK ; EP
"RTN","CIANBINI",37,0)
 N VER,MSYS
"RTN","CIANBINI",38,0)
 D GETMSYS(.MSYS,.VER)
"RTN","CIANBINI",39,0)
 Q:'$D(MSYS)
"RTN","CIANBINI",40,0)
 I '$D(VER) D
"RTN","CIANBINI",41,0)
 .D MES("This package contains object code that is not supported on "_MSYS_" installations.",2)
"RTN","CIANBINI",42,0)
 E  I VER="" D
"RTN","CIANBINI",43,0)
 .D MES("This package does not contain object code for this version of "_MSYS_" installations.",2)
"RTN","CIANBINI",44,0)
 Q
"RTN","CIANBINI",45,0)
 ; Get M system type and target version
"RTN","CIANBINI",46,0)
GETMSYS(MSYS,VER) ;
"RTN","CIANBINI",47,0)
 K MSYS,VER
"RTN","CIANBINI",48,0)
 Q:'$D(@XPDGREF@("OBJ"))
"RTN","CIANBINI",49,0)
 S MSYS=$$UP^XLFSTR($P($$VERSION^%ZOSV(1)," ")),MSYS(0)=$S(MSYS="CACHE":1,MSYS="JUMPS":2,1:0)
"RTN","CIANBINI",50,0)
 Q:'$D(@XPDGREF@("OBJ",MSYS(0)))
"RTN","CIANBINI",51,0)
 S VER=$TR($$VERSION^%ZOSV()," ")
"RTN","CIANBINI",52,0)
 F  Q:'$L(VER)  Q:$D(@XPDGREF@("OBJ",MSYS(0),VER))  S VER=$P(VER,".",1,$L(VER,".")-1)
"RTN","CIANBINI",53,0)
 Q
"RTN","CIANBINI",54,0)
 ; Display message in MSG and optionally set quit flag to QUIT
"RTN","CIANBINI",55,0)
MES(MSG,QUIT) ;
"RTN","CIANBINI",56,0)
 D BMES^XPDUTL("  "_$G(MSG))
"RTN","CIANBINI",57,0)
 S:$G(QUIT) XPDQUIT=QUIT
"RTN","CIANBINI",58,0)
 Q
"RTN","CIANBINI",59,0)
 ; Pre-init
"RTN","CIANBINI",60,0)
PRE S @XPDGREF@("NEW")=$D(^CIANB)<10
"RTN","CIANBINI",61,0)
 D OBJINST
"RTN","CIANBINI",62,0)
 X $G(@XPDGREF@("INITIAL"))
"RTN","CIANBINI",63,0)
 Q
"RTN","CIANBINI",64,0)
 ; Post-init
"RTN","CIANBINI",65,0)
POST X ^%ZOSF("EON"),^%ZOSF("TRMOFF")
"RTN","CIANBINI",66,0)
 D CVT,DEFPAR
"RTN","CIANBINI",67,0)
 X $G(@XPDGREF@("FINAL"))
"RTN","CIANBINI",68,0)
 ;D:$G(@XPDGREF@("NEW")) TEDH^XPAREDIT("CIANB SITE PARAMETERS","BA")
"RTN","CIANBINI",69,0)
 D CLEANUP^CIANBUTL,STARTALL^CIANBLIS
"RTN","CIANBINI",70,0)
 K ^DIC(19941.24,0,"RD")
"RTN","CIANBINI",71,0)
 Q
"RTN","CIANBINI",72,0)
 ; Convert entries from old event file
"RTN","CIANBINI",73,0)
CVT N X,FN
"RTN","CIANBINI",74,0)
 S FN=19941.21
"RTN","CIANBINI",75,0)
 Q:$O(^CIANB(FN,0))!'$O(^CIAVEVT(0))
"RTN","CIANBINI",76,0)
 S X=$P(^CIANB(FN,0),U,1,2)
"RTN","CIANBINI",77,0)
 M ^CIANB(FN)=^CIAVEVT
"RTN","CIANBINI",78,0)
 S $P(^CIANB(FN,0),U,1,2)=X,X=0
"RTN","CIANBINI",79,0)
 F  S X=$O(^CIANB(FN,X)) Q:'X  D
"RTN","CIANBINI",80,0)
 .D CVTX(2,99,99)
"RTN","CIANBINI",81,0)
 .D CVTX(3,20,"2P")
"RTN","CIANBINI",82,0)
 Q
"RTN","CIANBINI",83,0)
 ; Move multiples to new nodes and fix sfn
"RTN","CIANBINI",84,0)
CVTX(NF,NT,SN) ;
"RTN","CIANBINI",85,0)
 M ^CIANB(FN,X,NT)=^CIANB(FN,X,NF)
"RTN","CIANBINI",86,0)
 K ^CIANB(FN,X,NF)
"RTN","CIANBINI",87,0)
 S $P(^CIANB(FN,X,NT,0),U,2)=FN_SN
"RTN","CIANBINI",88,0)
 Q
"RTN","CIANBINI",89,0)
 ; Initializes default parameter values.  Does not affect existing entries.
"RTN","CIANBINI",90,0)
DEFPAR N PAR,VAL,INST,LP,Y
"RTN","CIANBINI",91,0)
 D MES("Setting up default site parameters...")
"RTN","CIANBINI",92,0)
 F LP=0:0 S LP=$O(@XPDGREF@("PARAM",LP)) Q:'LP  K VAL M VAL=^(LP) D
"RTN","CIANBINI",93,0)
 .S Y=VAL,VAL=$$MSG^CIAU($P(Y,U,3,999),"|",0),PAR=$P(Y,U),INST=$$MSG^CIAU($P(Y,U,2),"|")
"RTN","CIANBINI",94,0)
 .D ADD^XPAR("SYS",PAR,INST,.VAL)
"RTN","CIANBINI",95,0)
 Q
"RTN","CIANBINI",96,0)
 ; Install routine binaries
"RTN","CIANBINI",97,0)
OBJINST ; EP
"RTN","CIANBINI",98,0)
 N MSYS,RTN,OBJ,SUB,GBL
"RTN","CIANBINI",99,0)
 D GETMSYS(.MSYS,.VER)
"RTN","CIANBINI",100,0)
 Q:'$D(MSYS)
"RTN","CIANBINI",101,0)
 Q:$D(@XPDGREF@("OBJ",MSYS(0)))<10
"RTN","CIANBINI",102,0)
 S RTN=""
"RTN","CIANBINI",103,0)
 D MES("Installing Routine Binaries...")
"RTN","CIANBINI",104,0)
 F  S RTN=$O(@XPDGREF@("OBJ",MSYS(0),VER,RTN)) Q:'$L(RTN)  D
"RTN","CIANBINI",105,0)
 .X "ZR  ZS @RTN"
"RTN","CIANBINI",106,0)
 .S OBJ="",SUB=0,GBL=$NA(@$S(MSYS(0)=1:"^rOBJ(RTN)",1:"^$R(RTN,""OBJECT"")"))
"RTN","CIANBINI",107,0)
 .F  S SUB=$O(@XPDGREF@("OBJ",MSYS(0),VER,RTN,SUB)) Q:'SUB  S OBJ=OBJ_^(SUB,0)
"RTN","CIANBINI",108,0)
 .S @GBL=$S(MSYS(0)=1:$$DECODE^CIAUUU(OBJ),1:OBJ)
"RTN","CIANBINI",109,0)
 .D MES("  "_RTN_" installed.")
"RTN","CIANBINI",110,0)
 Q
"RTN","CIANBLIS")
0^4^B58819275
"RTN","CIANBLIS",1,0)
CIANBLIS ;MSC/IND/DKM - MSC RPC Broker ;23-Mar-2011 18:36;PLS
"RTN","CIANBLIS",2,0)
 ;;1.1;CIA NETWORK COMPONENTS;**001007,001008**;Sep 18, 2007;Build 63
"RTN","CIANBLIS",3,0)
 ;;Copyright 2000-2011, Medsphere Systems Corporation
"RTN","CIANBLIS",4,0)
 ;=================================================================
"RTN","CIANBLIS",5,0)
 ; Start listener process (primary and secondary)
"RTN","CIANBLIS",6,0)
 ;   CIAPORT = Listener port
"RTN","CIANBLIS",7,0)
 ;   CIAIP = IP address of client
"RTN","CIANBLIS",8,0)
 ;   CIAMODE = Connection type:
"RTN","CIANBLIS",9,0)
 ;     0: primary listener - dispatches connections
"RTN","CIANBLIS",10,0)
 ;     1: secondary listener - services individual clients
"RTN","CIANBLIS",11,0)
 ;     2: secondary listener - concurrent mode
"RTN","CIANBLIS",12,0)
 ;
"RTN","CIANBLIS",13,0)
EN(CIAPORT,CIAIP,CIAMODE) ;PEP - See above
"RTN","CIANBLIS",14,0)
 N CIAVER,CIAOS,CIATDEV,CIAQUIT,CIALN,CIAXUT,CIAUCI,CIARETRY,XWBOS,X,Y,$ET,$ES
"RTN","CIANBLIS",15,0)
 D UCI^%ZOSV
"RTN","CIANBLIS",16,0)
 S U="^",CIAUCI=$P(Y,","),CIAMODE=+$G(CIAMODE),CIAIP=$G(CIAIP),(CIAQUIT,CIARETRY)=0
"RTN","CIANBLIS",17,0)
 D MONSTART^CIANBEVT                                                   ; Start background event monitor if not already running
"RTN","CIANBLIS",18,0)
 S:'$G(CIAPORT) CIAPORT=9000                                           ; Default service port
"RTN","CIANBLIS",19,0)
 Q:'$$STATE(1)                                                         ; Quit if listener already running
"RTN","CIANBLIS",20,0)
 S Y=$G(^%ZOSF("OS")),(CIAOS,X)=0
"RTN","CIANBLIS",21,0)
 F XWBOS="DSM","MSM","OpenM" S X=X+1 I Y[XWBOS S CIAOS=X Q
"RTN","CIANBLIS",22,0)
 D:'CIAOS RAISE(15,Y)
"RTN","CIANBLIS",23,0)
 D CLEANUP,STSAVE(0),NULLOPEN,STSAVE(1)
"RTN","CIANBLIS",24,0)
 D:CIAMODE=1 LOGRSRC^%ZOSV("$BROKER HANDLER$",2,1)                     ; Start RUM for Broker Handler
"RTN","CIANBLIS",25,0)
 D CHPRN("CIA"_$S($L(CIAIP):$P(CIAIP,".",3,4)_":"_CIAPORT,1:CIAPORT))  ; Change process name
"RTN","CIANBLIS",26,0)
 D LISTEN
"RTN","CIANBLIS",27,0)
 D:CIAMODE=1 LOGRSRC^%ZOSV("$BROKER HANDLER$",2,2)                     ; Stop RUM for handler
"RTN","CIANBLIS",28,0)
 D:CIAQUIT>0!'CIAMODE STATE(0),STREST(1),^%ZISC,STREST(0),CLEANUP,LOGOUT^XUSRB:$G(DUZ)
"RTN","CIANBLIS",29,0)
 I 'CIAMODE,'CIAQUIT J EN^CIANBLIS(CIAPORT)                            ; Restart primary listener after fatal error
"RTN","CIANBLIS",30,0)
 Q
"RTN","CIANBLIS",31,0)
 ; Entry point for interactive debugging
"RTN","CIANBLIS",32,0)
DEBUG N CIAPORT,CIAIP
"RTN","CIANBLIS",33,0)
 W !!,"Debug Mode Support",!!
"RTN","CIANBLIS",34,0)
 S CIAIP=$$PMPT("Addr","Enter callback IP address.","127.0.0.1")
"RTN","CIANBLIS",35,0)
 Q:U[CIAIP
"RTN","CIANBLIS",36,0)
 S CIAPORT=$$PMPT("Port","Enter callback port.")
"RTN","CIANBLIS",37,0)
 Q:U[CIAPORT
"RTN","CIANBLIS",38,0)
 I $L($T(^%Serenji)),$$ASK^CIAU("Use Serenji Debugger","Y") D  Q
"RTN","CIANBLIS",39,0)
 .N SRJIP,SRJPORT
"RTN","CIANBLIS",40,0)
 .S SRJIP=$$PMPT("Serenji Listener Addr","Enter Serenji listener address",CIAIP)
"RTN","CIANBLIS",41,0)
 .Q:U[SRJIP
"RTN","CIANBLIS",42,0)
 .S SRJPORT=$$PMPT("Serenji Listener Port","Enter Serenji listener port",4321)
"RTN","CIANBLIS",43,0)
 .Q:U[SRJPORT
"RTN","CIANBLIS",44,0)
 .D DEBUG^%Serenji("EN^CIANBLIS(CIAPORT,CIAIP,1)",SRJIP,SRJPORT)
"RTN","CIANBLIS",45,0)
 W !
"RTN","CIANBLIS",46,0)
 D EN(CIAPORT,CIAIP,1)
"RTN","CIANBLIS",47,0)
 Q
"RTN","CIANBLIS",48,0)
PMPT(PMPT,HELP,DFLT) ;
"RTN","CIANBLIS",49,0)
 N RET
"RTN","CIANBLIS",50,0)
PMPTX W PMPT,": ",$S($D(DFLT):DFLT_"// ",1:"")
"RTN","CIANBLIS",51,0)
 R RET:$G(DTIME,30)
"RTN","CIANBLIS",52,0)
 E  S RET=U
"RTN","CIANBLIS",53,0)
 I $D(DFLT),'$L(RET) S RET=DFLT W DFLT
"RTN","CIANBLIS",54,0)
 W !
"RTN","CIANBLIS",55,0)
 I RET["?" W !,HELP,!! G PMPTX
"RTN","CIANBLIS",56,0)
 Q RET
"RTN","CIANBLIS",57,0)
 ; Entry point for MSERVER process (MSM only)
"RTN","CIANBLIS",58,0)
MSERVER D EN(%("PORT"),%("ADDRESS"),2)
"RTN","CIANBLIS",59,0)
 Q
"RTN","CIANBLIS",60,0)
 ; Entry point for UCX process (DSM only)
"RTN","CIANBLIS",61,0)
USERVER D EN($P(%,":",2),$P(%,":"),2)
"RTN","CIANBLIS",62,0)
 Q
"RTN","CIANBLIS",63,0)
 ; Start primary listener
"RTN","CIANBLIS",64,0)
START(CIAPORT) ;EP
"RTN","CIANBLIS",65,0)
 D SSLIS(,CIAPORT,,1),CLEANUP^CIANBUTL
"RTN","CIANBLIS",66,0)
 Q
"RTN","CIANBLIS",67,0)
 ; Stop primary or secondary listener
"RTN","CIANBLIS",68,0)
STOP(CIAPORT,CIAIP) ;EP
"RTN","CIANBLIS",69,0)
 D SSLIS(.CIAIP,CIAPORT,,0)
"RTN","CIANBLIS",70,0)
 Q
"RTN","CIANBLIS",71,0)
 ; Start all primary listeners
"RTN","CIANBLIS",72,0)
STARTALL ;PEP - see above
"RTN","CIANBLIS",73,0)
 D SSALL(1)
"RTN","CIANBLIS",74,0)
 Q
"RTN","CIANBLIS",75,0)
 ; Stop all primary listeners
"RTN","CIANBLIS",76,0)
STOPALL ;PEP - see above
"RTN","CIANBLIS",77,0)
 D SSALL(0)
"RTN","CIANBLIS",78,0)
 Q
"RTN","CIANBLIS",79,0)
 ; Start/stop all registered listeners
"RTN","CIANBLIS",80,0)
SSALL(SS,SL) ;
"RTN","CIANBLIS",81,0)
 N IEN,X
"RTN","CIANBLIS",82,0)
 S SL=$G(SL,$D(ZTQUEUED)),U="^"
"RTN","CIANBLIS",83,0)
 F IEN=0:0 S IEN=$O(^CIANB(19941.22,IEN)) Q:'IEN  S X=^(IEN,0) D
"RTN","CIANBLIS",84,0)
 .I SS,$P(X,U,3) Q
"RTN","CIANBLIS",85,0)
 .W:'SL !,$P(X,U),": "
"RTN","CIANBLIS",86,0)
 .D SSLIS(,$P(X,U,2),$P(X,U,4),SS,SL)
"RTN","CIANBLIS",87,0)
 Q
"RTN","CIANBLIS",88,0)
 ; Start/stop primary listener
"RTN","CIANBLIS",89,0)
SSLIS(CIAIP,CIAPORT,CIAUCI,SS,SL) ;
"RTN","CIANBLIS",90,0)
 N CIALN,X,P1,P2,$ET
"RTN","CIANBLIS",91,0)
 S SL=$G(SL,$D(ZTQUEUED))
"RTN","CIANBLIS",92,0)
 S:'SL $ET="D SSERR^CIANBLIS"
"RTN","CIANBLIS",93,0)
 S P1=$S(SS:"start",1:"stop"),P2=P1_$S(SS:"ed",1:"ped")
"RTN","CIANBLIS",94,0)
 I $$STATE=SS W:'SL "Listener ",$S(SS:"already",1:"not")," running on port ",CIAPORT,!! Q
"RTN","CIANBLIS",95,0)
 I 'SS S @$$LOCKNODE=1
"RTN","CIANBLIS",96,0)
 E  I $L($G(CIAUCI)) D
"RTN","CIANBLIS",97,0)
 .J EN^CIANBLIS(CIAPORT)[CIAUCI]
"RTN","CIANBLIS",98,0)
 E  J EN^CIANBLIS(CIAPORT)
"RTN","CIANBLIS",99,0)
 Q:SL
"RTN","CIANBLIS",100,0)
 W "Waiting for listener to ",P1,"..."
"RTN","CIANBLIS",101,0)
 F X=1:1:5 D
"RTN","CIANBLIS",102,0)
 .H 2
"RTN","CIANBLIS",103,0)
 .W "."
"RTN","CIANBLIS",104,0)
 .S:$$STATE=SS X=99
"RTN","CIANBLIS",105,0)
 I X<99 W "Listener failed to ",P1,!
"RTN","CIANBLIS",106,0)
 E  W "Listener ",P2," on port ",CIAPORT,!
"RTN","CIANBLIS",107,0)
 Q
"RTN","CIANBLIS",108,0)
SSERR W:'$G(SL) "Listener failed to ",P1,": ",$$EC^%ZOSV,!
"RTN","CIANBLIS",109,0)
 S $ET="D UNWIND^%ZTER"
"RTN","CIANBLIS",110,0)
 Q
"RTN","CIANBLIS",111,0)
 ; Main loop
"RTN","CIANBLIS",112,0)
LISTEN N $ET,$ES
"RTN","CIANBLIS",113,0)
 S $ET="D ETRAP1^CIANBLIS",CIARETRY=0,CIAQUIT='$$TCPOPEN
"RTN","CIANBLIS",114,0)
 F  Q:$$QUIT  D
"RTN","CIANBLIS",115,0)
 .N $ET,$ES
"RTN","CIANBLIS",116,0)
 .S:$$DOACTION($S(CIAMODE=2&(CIAOS'=3):"C",CIAMODE:"DPQRSU",1:"C")) CIARETRY=0
"RTN","CIANBLIS",117,0)
 D TCPCLOSE
"RTN","CIANBLIS",118,0)
 Q
"RTN","CIANBLIS",119,0)
 ; Read action and params
"RTN","CIANBLIS",120,0)
 ;  VAC = List of valid action codes
"RTN","CIANBLIS",121,0)
 ; Returns true if valid inputs
"RTN","CIANBLIS",122,0)
DOACTION(VAC) ;
"RTN","CIANBLIS",123,0)
 N NM,SB,RT,VL,PR,CIA,ACT,SEQ,ARG,CIAERR,CIADATA,X
"RTN","CIANBLIS",124,0)
 S CIAERR(0)=0
"RTN","CIANBLIS",125,0)
 D TCPUSE
"RTN","CIANBLIS",126,0)
 S X=$$TCPREAD(8,10)
"RTN","CIANBLIS",127,0)
 Q:$E(X,1,5)'="{CIA}" 0
"RTN","CIANBLIS",128,0)
 S ARG=0,CIA("EOD")=$A(X,6),SEQ=$E(X,7),ACT=$E(X,8)
"RTN","CIANBLIS",129,0)
 F  S NM=$$TCPREADL Q:'$L(NM)  S PR=NM=+NM,RT=$S(PR:"P"_NM,1:"CIA("""_NM_"""") N:PR&'$D(ARG(NM)) @RT D
"RTN","CIANBLIS",130,0)
 .S:PR ARG=$S(NM>ARG:NM,1:ARG),ARG(NM)=""
"RTN","CIANBLIS",131,0)
 .S SB=$$TCPREADL,VL=$$TCPREADL
"RTN","CIANBLIS",132,0)
 .I $L(SB) S RT=RT_$S(PR:"(",1:",")_SB_")"
"RTN","CIANBLIS",133,0)
 .E  S:'PR RT=RT_")"
"RTN","CIANBLIS",134,0)
 .S @RT=VL
"RTN","CIANBLIS",135,0)
 W SEQ
"RTN","CIANBLIS",136,0)
 I '$$ERRCHK^CIANBACT(VAC'[ACT,9,ACT) D
"RTN","CIANBLIS",137,0)
 .N $ET,$ES
"RTN","CIANBLIS",138,0)
 .S $ET="D ETRAP2^CIANBLIS"
"RTN","CIANBLIS",139,0)
 .D @("ACT"_ACT_"^CIANBACT")
"RTN","CIANBLIS",140,0)
 I CIAERR(0) D
"RTN","CIANBLIS",141,0)
 .D SNDERR
"RTN","CIANBLIS",142,0)
 E  I $D(CIADATA) D
"RTN","CIANBLIS",143,0)
 .D REPLY(.CIADATA)
"RTN","CIANBLIS",144,0)
 E  D SNDEOD
"RTN","CIANBLIS",145,0)
 D:'CIAMODE TCPREL
"RTN","CIANBLIS",146,0)
 Q 1
"RTN","CIANBLIS",147,0)
 ; Cleanup environment
"RTN","CIANBLIS",148,0)
CLEANUP K ^TMP("CIANBRPC",$J),^TMP("CIANBLIS",$J),^XUTL("XQ",$J),@$$LOCKNODE
"RTN","CIANBLIS",149,0)
 Q
"RTN","CIANBLIS",150,0)
 ; Returns true if listener should quit
"RTN","CIANBLIS",151,0)
QUIT() S:'CIAQUIT CIAQUIT=+$G(@$$LOCKNODE)
"RTN","CIANBLIS",152,0)
 Q CIARETRY>5!CIAQUIT
"RTN","CIANBLIS",153,0)
 ; Save application state
"RTN","CIANBLIS",154,0)
STSAVE(ST) ;
"RTN","CIANBLIS",155,0)
 D SAVE^XUS1
"RTN","CIANBLIS",156,0)
 K ^TMP("CIANBLIS",$J,ST)
"RTN","CIANBLIS",157,0)
 M ^TMP("CIANBLIS",$J,ST)=^XUTL("XQ",$J)
"RTN","CIANBLIS",158,0)
 Q
"RTN","CIANBLIS",159,0)
 ; Restore application state
"RTN","CIANBLIS",160,0)
STREST(ST) ;
"RTN","CIANBLIS",161,0)
 K ^XUTL("XQ",$J)
"RTN","CIANBLIS",162,0)
 M ^XUTL("XQ",$J)=^TMP("CIANBLIS",$J,ST)
"RTN","CIANBLIS",163,0)
 K IO
"RTN","CIANBLIS",164,0)
 D RESETVAR^%ZIS
"RTN","CIANBLIS",165,0)
 I ST,$D(IO)#2 D
"RTN","CIANBLIS",166,0)
 .N $ET
"RTN","CIANBLIS",167,0)
 .S $ET="S $EC="""" D NULLOPEN^CIANBLIS"
"RTN","CIANBLIS",168,0)
 .U IO
"RTN","CIANBLIS",169,0)
 Q
"RTN","CIANBLIS",170,0)
 ; Establish null device as default IO device
"RTN","CIANBLIS",171,0)
NULLOPEN N %ZIS,IOP,POP
"RTN","CIANBLIS",172,0)
 S %ZIS="0H",IOP="NULL"
"RTN","CIANBLIS",173,0)
 D ^%ZIS,RAISE(16):POP
"RTN","CIANBLIS",174,0)
 U IO
"RTN","CIANBLIS",175,0)
 Q
"RTN","CIANBLIS",176,0)
 ; Open TCP listener port
"RTN","CIANBLIS",177,0)
 ; Returns true if successful
"RTN","CIANBLIS",178,0)
TCPOPEN() ;
"RTN","CIANBLIS",179,0)
 N POP
"RTN","CIANBLIS",180,0)
 S POP=0
"RTN","CIANBLIS",181,0)
 I CIAMODE=2 D
"RTN","CIANBLIS",182,0)
 .S CIATDEV=$S(CIAOS=1:"SYS$NET",CIAOS=2:56,1:$P)
"RTN","CIANBLIS",183,0)
 .I CIAOS=1 O CIATDEV:TCPDEV:5 S POP='$T
"RTN","CIANBLIS",184,0)
 I CIAMODE=1 D
"RTN","CIANBLIS",185,0)
 .D CALL^%ZISTCP(CIAIP,CIAPORT)
"RTN","CIANBLIS",186,0)
 .Q:POP
"RTN","CIANBLIS",187,0)
 .S CIATDEV=IO,IO(0)=IO
"RTN","CIANBLIS",188,0)
 .D:$T(SHARELIC^%ZOSV)'="" SHARELIC^%ZOSV(1)
"RTN","CIANBLIS",189,0)
 I 'CIAMODE D
"RTN","CIANBLIS",190,0)
 .I CIAOS=1 D
"RTN","CIANBLIS",191,0)
 ..S CIATDEV=CIAPORT
"RTN","CIANBLIS",192,0)
 ..O CIATDEV:TCPCHAN:5
"RTN","CIANBLIS",193,0)
 ..S POP='$T
"RTN","CIANBLIS",194,0)
 .I CIAOS=2 S CIATDEV=56
"RTN","CIANBLIS",195,0)
 .I CIAOS=3 D
"RTN","CIANBLIS",196,0)
 ..S CIATDEV="|TCP|"_CIAPORT
"RTN","CIANBLIS",197,0)
 ..O CIATDEV:(:CIAPORT:"DS"):5
"RTN","CIANBLIS",198,0)
 ..S POP='$T
"RTN","CIANBLIS",199,0)
 Q 'POP
"RTN","CIANBLIS",200,0)
 ; Use TCP listener port
"RTN","CIANBLIS",201,0)
TCPUSE I CIAOS=1 U CIATDEV Q
"RTN","CIANBLIS",202,0)
 I CIAOS=2 D  Q
"RTN","CIANBLIS",203,0)
 .I CIAMODE U CIATDEV S:$ZC CIAQUIT=1 Q
"RTN","CIANBLIS",204,0)
 .O CIATDEV
"RTN","CIANBLIS",205,0)
 .U CIATDEV::"TCP"
"RTN","CIANBLIS",206,0)
 .W /SOCKET("",CIAPORT)
"RTN","CIANBLIS",207,0)
 I CIAOS=3 U CIATDEV
"RTN","CIANBLIS",208,0)
 Q
"RTN","CIANBLIS",209,0)
 ; Close TCP listener port
"RTN","CIANBLIS",210,0)
TCPCLOSE C:$D(CIATDEV) CIATDEV
"RTN","CIANBLIS",211,0)
 Q
"RTN","CIANBLIS",212,0)
 ; Release TCP port
"RTN","CIANBLIS",213,0)
TCPREL I CIAOS=1 U CIATDEV:DISCONNECT Q
"RTN","CIANBLIS",214,0)
 I CIAOS=2 C CIATDEV Q
"RTN","CIANBLIS",215,0)
 I CIAOS=3 W *-3,*-2
"RTN","CIANBLIS",216,0)
 Q
"RTN","CIANBLIS",217,0)
 ; Read from listener port
"RTN","CIANBLIS",218,0)
TCPREAD(CNT,TMO) ;
"RTN","CIANBLIS",219,0)
 N X,Y
"RTN","CIANBLIS",220,0)
 S Y="",TMO=$G(TMO,60)
"RTN","CIANBLIS",221,0)
 F  Q:CNT'>0  D
"RTN","CIANBLIS",222,0)
 .R X#CNT:TMO
"RTN","CIANBLIS",223,0)
 .I '$L(X) S Y="",CNT=0 S:CIAMODE=2 CIARETRY=CIARETRY+.5
"RTN","CIANBLIS",224,0)
 .E  S Y=Y_X,CNT=CNT-$L(X)
"RTN","CIANBLIS",225,0)
 Q Y
"RTN","CIANBLIS",226,0)
 ; Read byte from listener port
"RTN","CIANBLIS",227,0)
TCPREADB() ;
"RTN","CIANBLIS",228,0)
 Q $A($$TCPREAD(1))
"RTN","CIANBLIS",229,0)
 ; Read length-prefixed data from input stream
"RTN","CIANBLIS",230,0)
TCPREADL() ;
"RTN","CIANBLIS",231,0)
 N X,L,I,N
"RTN","CIANBLIS",232,0)
 S X=$$TCPREADB
"RTN","CIANBLIS",233,0)
 Q:X=CIA("EOD") ""
"RTN","CIANBLIS",234,0)
 S N=X#16,X=$$TCPREAD(X\16),L=0
"RTN","CIANBLIS",235,0)
 F I=1:1:$L(X) S L=L*256+$A(X,I)
"RTN","CIANBLIS",236,0)
 Q $$TCPREAD(L*16+N)
"RTN","CIANBLIS",237,0)
 ; Raise an exception
"RTN","CIANBLIS",238,0)
RAISE(MSG,P1,P2) ;
"RTN","CIANBLIS",239,0)
 D GETDLG^CIANBUTL(MSG,.MSG,.P1,.P2)
"RTN","CIANBLIS",240,0)
 S $EC=MSG(1)
"RTN","CIANBLIS",241,0)
 Q
"RTN","CIANBLIS",242,0)
 ; Communication error
"RTN","CIANBLIS",243,0)
ETRAP1 N ECSAV
"RTN","CIANBLIS",244,0)
 S $ET="D UNWIND^CIANBLIS Q:$Q 0 Q",ECSAV=$EC,CIARETRY=CIARETRY+1
"RTN","CIANBLIS",245,0)
 D:CIARETRY=1&(ECSAV'["READ") ^%ZTER
"RTN","CIANBLIS",246,0)
 S $EC=ECSAV
"RTN","CIANBLIS",247,0)
 Q
"RTN","CIANBLIS",248,0)
 ; Unwind stack
"RTN","CIANBLIS",249,0)
UNWIND Q:$ES>1
"RTN","CIANBLIS",250,0)
 S $EC=""
"RTN","CIANBLIS",251,0)
 Q
"RTN","CIANBLIS",252,0)
 ; Trapped error, send error info to client
"RTN","CIANBLIS",253,0)
ETRAP2 N ECSAV
"RTN","CIANBLIS",254,0)
 S $ET="D UNWIND^CIANBLIS Q:$Q 0 Q",ECSAV=$$EC^%ZOSV,CIARETRY=CIARETRY+1
"RTN","CIANBLIS",255,0)
 D:CIARETRY=1 ^%ZTER,ERRCHK^CIANBACT(1,1,ECSAV)
"RTN","CIANBLIS",256,0)
 S $EC=ECSAV
"RTN","CIANBLIS",257,0)
 Q
"RTN","CIANBLIS",258,0)
 ; Send a reply
"RTN","CIANBLIS",259,0)
REPLY(DATA,ACK) ;
"RTN","CIANBLIS",260,0)
 D TCPUSE
"RTN","CIANBLIS",261,0)
 W $C(+$G(ACK)),$G(DATA)
"RTN","CIANBLIS",262,0)
 D SNDEOD
"RTN","CIANBLIS",263,0)
 Q
"RTN","CIANBLIS",264,0)
 ; Send error information
"RTN","CIANBLIS",265,0)
SNDERR ;
"RTN","CIANBLIS",266,0)
 N X
"RTN","CIANBLIS",267,0)
 D TCPUSE
"RTN","CIANBLIS",268,0)
 W $C(1)
"RTN","CIANBLIS",269,0)
 D OUT^CIANBACT("CIAERR",1),SNDEOD
"RTN","CIANBLIS",270,0)
 S CIAERR(0)=0
"RTN","CIANBLIS",271,0)
 Q
"RTN","CIANBLIS",272,0)
 ; Send end of data byte if not already sent
"RTN","CIANBLIS",273,0)
SNDEOD I $D(CIA("EOD")) D
"RTN","CIANBLIS",274,0)
 .D TCPUSE
"RTN","CIANBLIS",275,0)
 .W $C(CIA("EOD")),!
"RTN","CIANBLIS",276,0)
 .K CIA("EOD")
"RTN","CIANBLIS",277,0)
 Q
"RTN","CIANBLIS",278,0)
 ; Lock/Unlock listener
"RTN","CIANBLIS",279,0)
 ; CIAACT:  1 = lock, 0 = unlock, missing = return status
"RTN","CIANBLIS",280,0)
 ; Returns true if locked, false if not.
"RTN","CIANBLIS",281,0)
STATE(CIAACT) ;
"RTN","CIANBLIS",282,0)
 N RES,Y
"RTN","CIANBLIS",283,0)
 S Y=$$LOCKNODE
"RTN","CIANBLIS",284,0)
 I '$D(CIAACT) D
"RTN","CIANBLIS",285,0)
 .L +@Y:0
"RTN","CIANBLIS",286,0)
 .S RES='$T
"RTN","CIANBLIS",287,0)
 .L:'RES -@Y
"RTN","CIANBLIS",288,0)
 E  I CIAACT D
"RTN","CIANBLIS",289,0)
 .L +@Y:1
"RTN","CIANBLIS",290,0)
 .S RES=$T
"RTN","CIANBLIS",291,0)
 E  D
"RTN","CIANBLIS",292,0)
 .L -@Y
"RTN","CIANBLIS",293,0)
 .S RES=0
"RTN","CIANBLIS",294,0)
 Q:$Q RES
"RTN","CIANBLIS",295,0)
 Q
"RTN","CIANBLIS",296,0)
 ; Get global reference for lock node
"RTN","CIANBLIS",297,0)
LOCKNODE(LN) ;
"RTN","CIANBLIS",298,0)
 S:'$D(LN) LN=$NA(^[$G(CIAUCI)]XTMP("CIANBLIS",$G(CIAIP)_":"_CIAPORT_$S($G(CIAMODE)=2:":"_$J,1:"")))
"RTN","CIANBLIS",299,0)
 Q:$Q LN
"RTN","CIANBLIS",300,0)
 Q
"RTN","CIANBLIS",301,0)
 ; Change process name to X
"RTN","CIANBLIS",302,0)
CHPRN(X) D SETNM^%ZOSV($E(X,1,15))
"RTN","CIANBLIS",303,0)
 Q
"RTN","CIANBLOG")
0^7^B10435539
"RTN","CIANBLOG",1,0)
CIANBLOG ;MSC/IND/DKM - MSC RPC Broker Activity Log Support ;10-Jan-2011 13:06;PLS
"RTN","CIANBLOG",2,0)
 ;;1.1;CIA NETWORK COMPONENTS;**001007,001008**;Jan 3, 2008;Build 63
"RTN","CIANBLOG",3,0)
 ;;Copyright 2000-2008, Medsphere Systems Corporation
"RTN","CIANBLOG",4,0)
 ;=================================================================
"RTN","CIANBLOG",5,0)
 ; Open a log entry.  The return value is the IEN of the new entry.
"RTN","CIANBLOG",6,0)
 ;   UID  = Unique session id
"RTN","CIANBLOG",7,0)
 ;   USER = User IEN
"RTN","CIANBLOG",8,0)
 ;   WID  = Workstation id
"RTN","CIANBLOG",9,0)
OPEN(UID,USER,WID) ;EP
"RTN","CIANBLOG",10,0)
 N IEN,NOW,X
"RTN","CIANBLOG",11,0)
 S NOW=$$NOW^XLFDT
"RTN","CIANBLOG",12,0)
 S:$G(WID)="" WID="UNKNOWN"
"RTN","CIANBLOG",13,0)
 L +^CIANB(19941.24,0):2
"RTN","CIANBLOG",14,0)
 S X=1+$P(^CIANB(19941.24,0),U,3),IEN=$O(^($C(1)),-1)+1,$P(^(0),U,3,4)=X_U_IEN,^(IEN,0)=UID_U_USER_U_WID_U_NOW_U_U_DUZ(2)
"RTN","CIANBLOG",15,0)
 L -^CIANB(19941.24,0)
"RTN","CIANBLOG",16,0)
 S ^CIANB(19941.24,"B",UID,IEN)=""
"RTN","CIANBLOG",17,0)
 S ^CIANB(19941.24,"BUSER",USER,IEN)=""
"RTN","CIANBLOG",18,0)
 S ^CIANB(19941.24,"BWID",WID,IEN)=""
"RTN","CIANBLOG",19,0)
 S ^CIANB(19941.24,"BLOGIN",NOW,IEN)=""
"RTN","CIANBLOG",20,0)
 S ^CIANB(19941.24,"BDIV",DUZ(2),IEN)=""
"RTN","CIANBLOG",21,0)
 Q IEN
"RTN","CIANBLOG",22,0)
 ; Close a log entry.
"RTN","CIANBLOG",23,0)
 ;  IEN = IEN of the entry.
"RTN","CIANBLOG",24,0)
CLOSE(IEN) ;EP
"RTN","CIANBLOG",25,0)
 N NOW
"RTN","CIANBLOG",26,0)
 S NOW=$$NOW^XLFDT
"RTN","CIANBLOG",27,0)
 S:$D(^CIANB(19941.24,+IEN,0)) $P(^(0),U,5)=NOW,^CIANB(19941.24,"BLOGOUT",NOW,IEN)=""
"RTN","CIANBLOG",28,0)
 Q
"RTN","CIANBLOG",29,0)
 ; Log an activity
"RTN","CIANBLOG",30,0)
 ;  IEN  = IEN of log entry
"RTN","CIANBLOG",31,0)
 ;  TYPE = Type of log entry (1=RPC, 2=Event)
"RTN","CIANBLOG",32,0)
 ;  NAME = Text name associated with activity
"RTN","CIANBLOG",33,0)
 ;  Returns subfile IEN
"RTN","CIANBLOG",34,0)
LOG(IEN,TYPE,NAME) ;EP
"RTN","CIANBLOG",35,0)
 N SUB,NOW
"RTN","CIANBLOG",36,0)
 Q:'$D(^CIANB(19941.24,IEN)) 0
"RTN","CIANBLOG",37,0)
 S NOW=$$NOW^XLFDT
"RTN","CIANBLOG",38,0)
 S SUB=$O(^CIANB(19941.24,IEN,10,$C(1)),-1)+1,^(0)="^19941.241D^"_SUB_U_SUB,^(SUB,0)=NOW_U_TYPE_U_NAME
"RTN","CIANBLOG",39,0)
 Q SUB
"RTN","CIANBLOG",40,0)
 ; Add an entry to the specified activity
"RTN","CIANBLOG",41,0)
 ;  IEN = IEN of log entry
"RTN","CIANBLOG",42,0)
 ;  SUB = IEN of subfile entry
"RTN","CIANBLOG",43,0)
 ;  ARY = Array or global root
"RTN","CIANBLOG",44,0)
 ;  INC = Include variable name with output (optional)
"RTN","CIANBLOG",45,0)
ADD(IEN,SUB,ARY,INC) ;EP
"RTN","CIANBLOG",46,0)
 N ROOT,WP,A,L,P,X,Y,Z
"RTN","CIANBLOG",47,0)
 S ROOT=$NA(^CIANB(19941.24,IEN,10,SUB,10))
"RTN","CIANBLOG",48,0)
 S WP=$O(@ROOT@($C(1)),-1),WP(0)=WP,INC=+$G(INC),(A,ARY)=$NA(@ARY),L=$QL(ARY)
"RTN","CIANBLOG",49,0)
 F  D:$D(@A)#2  S A=$Q(@A) Q:'$L(A)  Q:$NA(@A,L)'=ARY
"RTN","CIANBLOG",50,0)
 .S X=@A,P=$S(INC:A_" = ",1:"")
"RTN","CIANBLOG",51,0)
 .F  Q:'$L(X)  D
"RTN","CIANBLOG",52,0)
 ..S Y=$F(X,$C(13))
"RTN","CIANBLOG",53,0)
 ..S:'Y!(Y>200) Y=200
"RTN","CIANBLOG",54,0)
 ..S Z=$TR($E(X,1,Y-1),$C(13,10)),X=$E(X,Y,999999)
"RTN","CIANBLOG",55,0)
 ..S WP=WP+1,@ROOT@(WP,0)=P_Z,P=$S(INC:">>> ",1:"")
"RTN","CIANBLOG",56,0)
 S:WP'=WP(0) @ROOT@(0)="^^"_WP_U_WP_U_$$NOW^XLFDT
"RTN","CIANBLOG",57,0)
 Q
"RTN","CIANBLOG",58,0)
 ; Delete a log entry
"RTN","CIANBLOG",59,0)
DELETE(DA) ;
"RTN","CIANBLOG",60,0)
 Q:'$D(^CIANB(19941.24,DA))
"RTN","CIANBLOG",61,0)
 N DIK
"RTN","CIANBLOG",62,0)
 S DIK="^CIANB(19941.24,"
"RTN","CIANBLOG",63,0)
 D ^DIK
"RTN","CIANBLOG",64,0)
 Q
"RTN","CIANBLOG",65,0)
 ; Task purge in background
"RTN","CIANBLOG",66,0)
TASKPRG N ZTSK
"RTN","CIANBLOG",67,0)
 S ZTSK=$$QUEUE^CIAUTSK("DOPURGE^CIANBLOG","Purge CIA ACTIVITY LOG")
"RTN","CIANBLOG",68,0)
 I ZTSK>0 W !,"CIA ACTIVITY LOG purge submitted as task #",ZTSK,!!
"RTN","CIANBLOG",69,0)
 E  W !,"Error submitting CIA ACTIVITY LOG purge.",!!
"RTN","CIANBLOG",70,0)
 Q
"RTN","CIANBLOG",71,0)
 ; Purge log entries according to retention criteria
"RTN","CIANBLOG",72,0)
DOPURGE N DAYS,LP,IEN
"RTN","CIANBLOG",73,0)
 S DAYS=$$GET^XPAR("ALL","CIANB ACTIVITY RETENTION")
"RTN","CIANBLOG",74,0)
 Q:'DAYS
"RTN","CIANBLOG",75,0)
 S LP=$$FMADD^XLFDT(DT,-DAYS)
"RTN","CIANBLOG",76,0)
 F  S LP=$O(^CIANB(19941.24,"BLOGIN",LP),-1) Q:'LP  D
"RTN","CIANBLOG",77,0)
 .S IEN=0
"RTN","CIANBLOG",78,0)
 .F  S IEN=$O(^CIANB(19941.24,"BLOGIN",LP,IEN)) Q:'IEN  D
"RTN","CIANBLOG",79,0)
 ..D DELETE(IEN)
"RTN","CIANBLOG",80,0)
 Q
"RTN","CIANBLOG",81,0)
 ; Returns true if activity logging is active
"RTN","CIANBLOG",82,0)
 ; Creates a log entry if one does not already exist
"RTN","CIANBLOG",83,0)
ISACTIVE() ;
"RTN","CIANBLOG",84,0)
 N RTN,DUZ2
"RTN","CIANBLOG",85,0)
 Q:'$D(CIA("UID")) 0
"RTN","CIANBLOG",86,0)
 Q:'CIA("UID") 0
"RTN","CIANBLOG",87,0)
 S DUZ2=$$GETVAR^CIANBUTL("DUZ2")
"RTN","CIANBLOG",88,0)
 S RTN=$$GETVAR^CIANBUTL("ALOG"_$S(DUZ2:":"_DUZ2,1:""))
"RTN","CIANBLOG",89,0)
 I RTN="" D
"RTN","CIANBLOG",90,0)
 .S RTN=+$$GET^XPAR("ALL","CIANB ACTIVITY LOGGING","`"_$$GETVAR^CIANBUTL("AID0"))
"RTN","CIANBLOG",91,0)
 .S:RTN RTN=$$OPEN(CIA("UID"),DUZ,$$GETVAR^CIANBUTL("WID"))
"RTN","CIANBLOG",92,0)
 .D SETVAR^CIANBUTL("ALOG"_$S(DUZ2:":"_DUZ2,1:""),RTN)
"RTN","CIANBLOG",93,0)
 Q RTN
"RTN","CIANBRPC")
0^5^B60754770
"RTN","CIANBRPC",1,0)
CIANBRPC ;MSC/IND/DKM - MSC RPC Broker Privileged RPCs;20-Apr-2010 10:11;DKM
"RTN","CIANBRPC",2,0)
 ;;1.1;CIA NETWORK COMPONENTS;**001007,001008**;Sep 18, 2007;Build 63
"RTN","CIANBRPC",3,0)
 ;;Copyright 2000-2008, Medsphere Systems Corporation
"RTN","CIANBRPC",4,0)
 ;=================================================================
"RTN","CIANBRPC",5,0)
 ; RPC: User authentication
"RTN","CIANBRPC",6,0)
 ; AID = Application ID
"RTN","CIANBRPC",7,0)
 ; WID = Workstation ID
"RTN","CIANBRPC",8,0)
 ; SID = NT Security ID
"RTN","CIANBRPC",9,0)
 ; AVC = AV Code
"RTN","CIANBRPC",10,0)
 ; WIP = Workstation IP address
"RTN","CIANBRPC",11,0)
 ; DIV = Login division (optional)
"RTN","CIANBRPC",12,0)
 ; Returns:
"RTN","CIANBRPC",13,0)
 ;  DATA(0)=Status code^Status text
"RTN","CIANBRPC",14,0)
 ;  where Status code is one of:
"RTN","CIANBRPC",15,0)
 ;   0 = success                 (Params=UID^net name^div name^DUZ)
"RTN","CIANBRPC",16,0)
 ;   1 = success, verify expired (Params=same as success)
"RTN","CIANBRPC",17,0)
 ;   2 = logins inhibited        (Params=null)
"RTN","CIANBRPC",18,0)
 ;   3 = locked                  (Params=null)
"RTN","CIANBRPC",19,0)
 ;   4 = authentication failure  (Params=server^volume^UCI^port)
"RTN","CIANBRPC",20,0)
 ;   5 = other error             (Params=null)
"RTN","CIANBRPC",21,0)
 ;  DATA(1)=Params
"RTN","CIANBRPC",22,0)
 ;  DATA(2,n)=Greeting message
"RTN","CIANBRPC",23,0)
AUTH(DATA,AID,WID,SID,AVC,WIP,DIV) ;
"RTN","CIANBRPC",24,0)
 N XOPT,XUT,XUTEXT,XOPT,XUEON,XUEOFF,XUTT,XUDEV,XUSER,XUNOW,X
"RTN","CIANBRPC",25,0)
 K DUZ,DATA,^TMP($J),^UTILITY($J)
"RTN","CIANBRPC",26,0)
 D SET1^XUS(0)
"RTN","CIANBRPC",27,0)
 S (DUZ,XUT)=0,DUZ(0)="",XUDEV=0,DATA(0)=4,DATA(1)=""
"RTN","CIANBRPC",28,0)
 S AID(0)=$$OPTLKP^CIANBUTL(.AID),WID=$$ID(.WID),SID=$G(SID),WIP=$G(WIP)
"RTN","CIANBRPC",29,0)
 I '$L(AID(0)),$$CHK(18,5,.AID) Q
"RTN","CIANBRPC",30,0)
 S X=$$OPTMSG^CIANBUTL(AID(0))
"RTN","CIANBRPC",31,0)
 I $L(X),$$CHK(19,2,X) Q
"RTN","CIANBRPC",32,0)
 I '$L($G(AVC)) S DUZ=+$$AUTOLOG(SID),CIAXUT=0
"RTN","CIANBRPC",33,0)
 E  D
"RTN","CIANBRPC",34,0)
 .I $E(AVC,1,2)="~1" S DUZ=$$CHKASH^XUSRB4(AVC)
"RTN","CIANBRPC",35,0)
 .S:'DUZ DUZ=$$CHECKAV^XUS($$DECRYP^XUSRB1(AVC)),CIAXUT=$G(CIAXUT)+1
"RTN","CIANBRPC",36,0)
 .I 'DUZ,CIAXUT>$P(XOPT,U,2),$$CHK(-7,3) Q
"RTN","CIANBRPC",37,0)
 .I 'DUZ,$$CHK(-4,4)
"RTN","CIANBRPC",38,0)
 I DUZ D
"RTN","CIANBRPC",39,0)
 .S DATA(0)=0,XUNOW=$$NOW^XLFDT,X=$$OPTCHK^CIANBUTL(AID)
"RTN","CIANBRPC",40,0)
 .Q:$$CHK(+X,2,$P(X,U,2),$P(X,U,3),$P(X,U,4))
"RTN","CIANBRPC",41,0)
 .Q:$$CHK(-$$INHIBIT^XUSRB,2)
"RTN","CIANBRPC",42,0)
 .I XUT>$P(XOPT,U,2),$$CHK(-7,3) Q
"RTN","CIANBRPC",43,0)
 .D USER^XUS(DUZ)
"RTN","CIANBRPC",44,0)
 .Q:$$CHK(-$$UVALID^XUS(),4)
"RTN","CIANBRPC",45,0)
 .Q:$$CHK(-$$USER^XUS1A,4)
"RTN","CIANBRPC",46,0)
 .F X=0:0 S X=$O(XUTEXT(X)) Q:'X  S DATA(2,X)=$E(XUTEXT(X),2,9999)
"RTN","CIANBRPC",47,0)
 .D DUZ^XUS1A,SAVE^XUS1,LOG^XUS1,ABT^XQ12
"RTN","CIANBRPC",48,0)
 .I $$VCVALID^XUSRB,$$CHK(-12,1)
"RTN","CIANBRPC",49,0)
 .I $G(CIA("UID")) D
"RTN","CIANBRPC",50,0)
 ..N UID
"RTN","CIANBRPC",51,0)
 ..S UID=CIA("UID"),CIA("UID")=0
"RTN","CIANBRPC",52,0)
 ..I '$D(^XTMP("CIA",UID)),$$CHK(25,5,UID) Q
"RTN","CIANBRPC",53,0)
 ..I $$SESSION^CIANBUTL(UID,"DUZ")'=DUZ,$$CHK(27,4,UID) Q
"RTN","CIANBRPC",54,0)
 ..D:$$ISACTIVE^CIANBUTL(UID) FORCEEX(CIAPORT_":"_$$GETVAR^CIANBUTL("JOB"))
"RTN","CIANBRPC",55,0)
 ..I $$ISACTIVE^CIANBUTL(UID,1,60),$$CHK(26,4,UID) Q
"RTN","CIANBRPC",56,0)
 ..S CIA("UID")=UID
"RTN","CIANBRPC",57,0)
 ..D RESVAR^CIANBUTL,SETVAR^CIANBUTL("JOB",$J)
"RTN","CIANBRPC",58,0)
 ..D BRDCAST^CIANBEVT("LOGIN",$$SESSION^CIANBUTL)
"RTN","CIANBRPC",59,0)
 .E  D
"RTN","CIANBRPC",60,0)
 ..S CIA("UID")=$$UID^CIANBUTL
"RTN","CIANBRPC",61,0)
 ..D:$G(DIV) DIVSET(,DIV)
"RTN","CIANBRPC",62,0)
 ..D RESET(1)
"RTN","CIANBRPC",63,0)
 .S DATA(1)=CIA("UID")_U_$G(^XMB("NETNAME"))_U_$$GET1^DIQ(4,DUZ(2),".01")_U_DUZ
"RTN","CIANBRPC",64,0)
 .S:AID(0) ^XUTL("XQ",$J,1)=AID(0)_U_$G(^DIC(19,AID(0),0)),^("T")=1
"RTN","CIANBRPC",65,0)
 .D AUTOSET(SID),STSAVE^CIANBLIS(1)
"RTN","CIANBRPC",66,0)
 I +DATA(0)=4 D
"RTN","CIANBRPC",67,0)
 .S DATA(1)=$P(XUENV,U,3)_U_$P(XUVOL,U)_U_XUCI_U_+CIAPORT
"RTN","CIANBRPC",68,0)
 .D INTRO^XUS1A("DATA(2)")
"RTN","CIANBRPC",69,0)
 Q
"RTN","CIANBRPC",70,0)
 ; Force exit disconnected broker session
"RTN","CIANBRPC",71,0)
FORCEEX(CIAPORT) ;
"RTN","CIANBRPC",72,0)
 S @$$LOCKNODE^CIANBLIS=-1
"RTN","CIANBRPC",73,0)
 Q
"RTN","CIANBRPC",74,0)
 ; Transform ID values
"RTN","CIANBRPC",75,0)
ID(ID) Q $E($TR($G(ID),U,"~"),1,40)
"RTN","CIANBRPC",76,0)
 ; RPC: Change verify code
"RTN","CIANBRPC",77,0)
CVC(DATA,OLD,NEW) ;
"RTN","CIANBRPC",78,0)
 S DATA=$$BRCVC^XUS2($$DECRYP^XUSRB1(OLD),$$DECRYP^XUSRB1(NEW))
"RTN","CIANBRPC",79,0)
 S:'DATA DATA="0^Your verify code has been changed."
"RTN","CIANBRPC",80,0)
 Q
"RTN","CIANBRPC",81,0)
 ; RPC: Get division list
"RTN","CIANBRPC",82,0)
DIVGET(DATA) ;
"RTN","CIANBRPC",83,0)
 N X,P,G
"RTN","CIANBRPC",84,0)
 S X=0,G=$S(DUZ:$NA(^VA(200,DUZ,2)),1:$NA(^DG(40.8,"AD"))),P=0
"RTN","CIANBRPC",85,0)
 F  S X=$O(@G@(X)) Q:'X  S:DUZ P=$P(^(X,0),U,2) D
"RTN","CIANBRPC",86,0)
 .N X0,X99
"RTN","CIANBRPC",87,0)
 .S X0=$G(^DIC(4,X,0)),X99=$G(^(99))
"RTN","CIANBRPC",88,0)
 .S DATA(X)=X_U_$P(X0,U)_U_$P(X99,U)_U_$P(X0,U,5)
"RTN","CIANBRPC",89,0)
 .S:P DATA(0)=X
"RTN","CIANBRPC",90,0)
 S:'$D(DATA(0)) DATA(0)=+$O(DATA(0))
"RTN","CIANBRPC",91,0)
 I 'DATA(0),$G(DUZ(2)) S DATA(0)=DUZ(2),DATA(DUZ(2))=DUZ(2)_U_$$NS^XUAF4(DUZ(2))
"RTN","CIANBRPC",92,0)
 D:DATA(0) DIVSET(,DATA(0))
"RTN","CIANBRPC",93,0)
 Q
"RTN","CIANBRPC",94,0)
 ; RPC: Set division
"RTN","CIANBRPC",95,0)
DIVSET(DATA,DIV) ;
"RTN","CIANBRPC",96,0)
 S DUZ(2)=+DIV,DATA=1
"RTN","CIANBRPC",97,0)
 D SETVAR^CIANBUTL("DUZ2",DUZ(2))
"RTN","CIANBRPC",98,0)
 D SETVAR^CIANBUTL("DUZ(2)",DUZ(2),-1)
"RTN","CIANBRPC",99,0)
 Q
"RTN","CIANBRPC",100,0)
 ; RPC: Get dialog text
"RTN","CIANBRPC",101,0)
DIALOG(DATA,DLG,P1,P2,P3) ;
"RTN","CIANBRPC",102,0)
 D GETDLG^CIANBUTL(DLG,.DATA,.P1,.P2,.P3)
"RTN","CIANBRPC",103,0)
 Q
"RTN","CIANBRPC",104,0)
 ; RPC: Reset session
"RTN","CIANBRPC",105,0)
RESET(LOGIN) ;
"RTN","CIANBRPC",106,0)
 Q:'$G(CIA("UID"))
"RTN","CIANBRPC",107,0)
 D STOPALL^CIANBASY,UNSUBALL^CIANBEVT
"RTN","CIANBRPC",108,0)
 S LOGIN=+$G(LOGIN)
"RTN","CIANBRPC",109,0)
 N DUZ2
"RTN","CIANBRPC",110,0)
 S DUZ2=$$GETVAR^CIANBUTL("DUZ2")
"RTN","CIANBRPC",111,0)
 I 'LOGIN D
"RTN","CIANBRPC",112,0)
 .D CLOSE^CIANBLOG($$GETVAR^CIANBUTL("ALOG"_$S(DUZ2:":"_DUZ2,1:"")))
"RTN","CIANBRPC",113,0)
 .S IO("IP")=$$GETVAR^CIANBUTL("WIP")
"RTN","CIANBRPC",114,0)
 .D BRDCAST^CIANBEVT("LOGOUT",$$SESSION^CIANBUTL)
"RTN","CIANBRPC",115,0)
 .K ^XTMP("CIA",CIA("UID"))
"RTN","CIANBRPC",116,0)
 .L -^XTMP("CIA",CIA("UID"),0)
"RTN","CIANBRPC",117,0)
 .D BYE^XUSCLEAN
"RTN","CIANBRPC",118,0)
 E  D
"RTN","CIANBRPC",119,0)
 .N ENV,X,Y,V
"RTN","CIANBRPC",120,0)
 .K ^XTMP("CIA",CIA("UID"))
"RTN","CIANBRPC",121,0)
 .F ENV=0:1 S X=$P($T(ENVDATA+ENV),";;",2) Q:'$L(X)  D
"RTN","CIANBRPC",122,0)
 ..S V=$P(X,";",2),@("Y="_V)
"RTN","CIANBRPC",123,0)
 ..D SETVAR^CIANBUTL($P(X,";"),Y)
"RTN","CIANBRPC",124,0)
 ..D:$P(X,";",3) SETVAR^CIANBUTL(V,Y,-1)
"RTN","CIANBRPC",125,0)
 .D BRDCAST^CIANBEVT("LOGIN",$$SESSION^CIANBUTL)
"RTN","CIANBRPC",126,0)
 .S IO("IP")=$$GETVAR^CIANBUTL("WIP")
"RTN","CIANBRPC",127,0)
 .I $$ISACTIVE^CIANBLOG
"RTN","CIANBRPC",128,0)
 .D LOG^XUS1  ;creates handle with client agent
"RTN","CIANBRPC",129,0)
 Q
"RTN","CIANBRPC",130,0)
 ; Environment data to save
"RTN","CIANBRPC",131,0)
 ;;Name;Value;Local
"RTN","CIANBRPC",132,0)
ENVDATA ;;DUZ;DUZ
"RTN","CIANBRPC",133,0)
 ;;DUZ0;DUZ(0);1
"RTN","CIANBRPC",134,0)
 ;;DUZ2;DUZ(2);1
"RTN","CIANBRPC",135,0)
 ;;USER;$P($G(^VA(200,DUZ,0)),U)
"RTN","CIANBRPC",136,0)
 ;;RDEV;$$RESDEV^CIANBUTL
"RTN","CIANBRPC",137,0)
 ;;LDT;$H
"RTN","CIANBRPC",138,0)
 ;;JOB;$J
"RTN","CIANBRPC",139,0)
 ;;AID;AID
"RTN","CIANBRPC",140,0)
 ;;AID0;AID(0)
"RTN","CIANBRPC",141,0)
 ;;WID;WID
"RTN","CIANBRPC",142,0)
 ;;WIP;WIP
"RTN","CIANBRPC",143,0)
 ;;UID;CIA("UID")
"RTN","CIANBRPC",144,0)
 ;;
"RTN","CIANBRPC",145,0)
 ; Check error code
"RTN","CIANBRPC",146,0)
CHK(ERR,RTN,P1,P2,P3) ;
"RTN","CIANBRPC",147,0)
 I ERR S DATA(0)=RTN_U_$S(ERR<0:$$TXT^XUS3(-ERR),1:$$GETDLG^CIANBUTL(ERR,,.P1,.P2,.P3)) S:RTN>1 DUZ=0
"RTN","CIANBRPC",148,0)
 Q ERR
"RTN","CIANBRPC",149,0)
 ; Attempt autoauthenticate using SID
"RTN","CIANBRPC",150,0)
 ; Returns DUZ if SID has been authenticated, 0 if prohibited from
"RTN","CIANBRPC",151,0)
 ; being authenticated, or null if never been authenticated.
"RTN","CIANBRPC",152,0)
AUTOLOG(SID) ;
"RTN","CIANBRPC",153,0)
 S SID=$S($L($G(SID))<3:"",1:$$DECRYP^XUSRB1(SID))
"RTN","CIANBRPC",154,0)
 Q:$E(SID,1,9)'="S-1-5-21-" 0
"RTN","CIANBRPC",155,0)
 S SID=$E(SID,10,999)
"RTN","CIANBRPC",156,0)
 Q:SID<1000 0
"RTN","CIANBRPC",157,0)
 N X
"RTN","CIANBRPC",158,0)
 S X=$$FIND1^DIC(19941.2,"","QX",SID)
"RTN","CIANBRPC",159,0)
 Q $S(X:+$P($G(^CIANB(19941.2,X,0)),U,2),1:"")
"RTN","CIANBRPC",160,0)
 ; Cache NT authentication information
"RTN","CIANBRPC",161,0)
AUTOSET(SID) ;
"RTN","CIANBRPC",162,0)
 Q:$$AUTOLOG(.SID)'=""
"RTN","CIANBRPC",163,0)
 N FLD
"RTN","CIANBRPC",164,0)
 S FLD(19941.2,"+1,",.01)=SID
"RTN","CIANBRPC",165,0)
 S FLD(19941.2,"+1,",1)=DUZ
"RTN","CIANBRPC",166,0)
 S FLD(19941.2,"+1,",2)=$$NOW^XLFDT
"RTN","CIANBRPC",167,0)
 D UPDATE^DIE("","FLD")
"RTN","CIANBRPC",168,0)
 Q
"RTN","CIANBRPC",169,0)
 ; RPC: Get list of active RPCs
"RTN","CIANBRPC",170,0)
GETRPCS(DATA) ;
"RTN","CIANBRPC",171,0)
 N X
"RTN","CIANBRPC",172,0)
 D LIST^DIC(8994,,".01","Q",,,,,"I ""03""[$P(^(0),U,6)",,.DATA)
"RTN","CIANBRPC",173,0)
 S X=""
"RTN","CIANBRPC",174,0)
 F  S X=$O(@DATA@(X)) Q:'$L(X)  K:X'="ID" @DATA@(X)
"RTN","CIANBRPC",175,0)
 Q
"RTN","CIANBRPC",176,0)
 ; RPC: Can RPC be executed in current context
"RTN","CIANBRPC",177,0)
CANRUN(DATA,RPC) ;
"RTN","CIANBRPC",178,0)
 S DATA=$$CANRUN^CIANBACT($$FIND1^DIC(8994,,"QX",RPC),CIA("CTX"))
"RTN","CIANBRPC",179,0)
 Q
"RTN","CIANBRPC",180,0)
 ; RPC: Retrieve list of active sessions
"RTN","CIANBRPC",181,0)
GETSESSN(DATA,VAR,AID) ;
"RTN","CIANBRPC",182,0)
 N X,Z,C
"RTN","CIANBRPC",183,0)
 S DATA=$$TMPGBL
"RTN","CIANBRPC",184,0)
 F C=1:1 Q:'$$NXTUID^CIANBUTL(.X,,.AID)  S @DATA@(C)=$$SESSION^CIANBUTL(X,.VAR)
"RTN","CIANBRPC",185,0)
 Q
"RTN","CIANBRPC",186,0)
 ; RPC: Get stored variable(s)
"RTN","CIANBRPC",187,0)
GETVAR(DATA,LIST,NMSP) ;
"RTN","CIANBRPC",188,0)
 N CNT
"RTN","CIANBRPC",189,0)
 S:$L($G(LIST)) LIST(-99)=LIST
"RTN","CIANBRPC",190,0)
 S LIST="",CNT=0
"RTN","CIANBRPC",191,0)
 S:0[$G(NMSP) NMSP="@"
"RTN","CIANBRPC",192,0)
 F  S LIST=$O(LIST(LIST)) Q:'$L(LIST)  D
"RTN","CIANBRPC",193,0)
 .S CNT=CNT+1,DATA(CNT)=LIST(LIST)_"="_$$GETVAR^CIANBUTL(LIST(LIST),,NMSP)
"RTN","CIANBRPC",194,0)
 Q
"RTN","CIANBRPC",195,0)
 ; RPC: Set stored variable(s)
"RTN","CIANBRPC",196,0)
SETVAR(DATA,LIST,NMSP,RESET) ;
"RTN","CIANBRPC",197,0)
 S:$L($G(LIST)) LIST(-99)=LIST
"RTN","CIANBRPC",198,0)
 S LIST="",DATA=0
"RTN","CIANBRPC",199,0)
 S:0[$G(NMSP) NMSP="@"
"RTN","CIANBRPC",200,0)
 D:$G(RESET) CLRVAR^CIANBUTL(NMSP)
"RTN","CIANBRPC",201,0)
 F  S LIST=$O(LIST(LIST)) Q:'$L(LIST)  D
"RTN","CIANBRPC",202,0)
 .S DATA=DATA+1
"RTN","CIANBRPC",203,0)
 .D SETVAR^CIANBUTL($P(LIST(LIST),"="),$P(LIST(LIST),"=",2,9999),NMSP)
"RTN","CIANBRPC",204,0)
 Q
"RTN","CIANBRPC",205,0)
 ; RPC: Get requested session info
"RTN","CIANBRPC",206,0)
 ; TYPE = 0=subscriptions, 1=local vars, 2=session vars, 3=locks, 4=pending async RPCs
"RTN","CIANBRPC",207,0)
 ; UID  = Session ID (defaults to current session)
"RTN","CIANBRPC",208,0)
GETINFO(DATA,TYPE,UID) ;
"RTN","CIANBRPC",209,0)
 S UID=$G(UID,$G(CIA("UID")))
"RTN","CIANBRPC",210,0)
 I TYPE=0 D  Q
"RTN","CIANBRPC",211,0)
 .N EV,CN
"RTN","CIANBRPC",212,0)
 .S EV="",CN=0
"RTN","CIANBRPC",213,0)
 .F  S EV=$O(^XTMP("CIA",UID,"S",EV)) Q:'$L(EV)  D
"RTN","CIANBRPC",214,0)
 ..S CN=CN+1,@DATA@(CN)=EV
"RTN","CIANBRPC",215,0)
 I TYPE=1 D  Q
"RTN","CIANBRPC",216,0)
 .D CAPTURE^CIAUHFS("ZW  N X F X=""$ET"",""$EC"",""$ES"",""$J"",""$ZE"",""$ZT"" W !,X,""="",@X",DATA,99999)
"RTN","CIANBRPC",217,0)
 I TYPE=2 D  Q
"RTN","CIANBRPC",218,0)
 .N NS,VN,VL,CN
"RTN","CIANBRPC",219,0)
 .S NS="",CN=0
"RTN","CIANBRPC",220,0)
 .F  S NS=$O(^XTMP("CIA",UID,"V",NS)),VN="" Q:'$L(NS)  D
"RTN","CIANBRPC",221,0)
 ..F  S VN=$O(^XTMP("CIA",UID,"V",NS,VN)) Q:'$L(VN)  S VL=$G(^(VN)) D
"RTN","CIANBRPC",222,0)
 ...S CN=CN+1,@DATA@(CN)=$S(NS=0:"<default>",NS=-1:"<mapped>",1:NS)_U_VN_U_VL
"RTN","CIANBRPC",223,0)
 I TYPE=3 D  Q
"RTN","CIANBRPC",224,0)
 .N GBL,CN,VL
"RTN","CIANBRPC",225,0)
 .S GBL="",CN=0
"RTN","CIANBRPC",226,0)
 .F  S GBL=$O(^XTMP("CIA",UID,"L",GBL)) Q:'$L(GBL)  S VL=$G(^(GBL)) D
"RTN","CIANBRPC",227,0)
 ..S CN=CN+1,@DATA@(CN)=$TR(GBL,U,"~")_U_VL
"RTN","CIANBRPC",228,0)
 I TYPE=4 D  Q
"RTN","CIANBRPC",229,0)
 .N TSK,CN
"RTN","CIANBRPC",230,0)
 .S (TSK,CN)=0
"RTN","CIANBRPC",231,0)
 .F  S TSK=$O(^XTMP("CIA",UID,"T",TSK)) Q:'TSK  D
"RTN","CIANBRPC",232,0)
 ..S CN=CN+1,@DATA@(CN)=TSK_U_$G(^%ZTSK(TSK,.03),"Unknown")
"RTN","CIANBRPC",233,0)
 S @DATA@(1)="Unknown request type: "_TYPE
"RTN","CIANBRPC",234,0)
 Q
"RTN","CIANBRPC",235,0)
 ; Lock/unlock global reference
"RTN","CIANBRPC",236,0)
 ; GBL  = Global reference
"RTN","CIANBRPC",237,0)
 ; OPR  = Operation to perform:
"RTN","CIANBRPC",238,0)
 ;        >=0: Value is timeout for lock operation.  Returns success.
"RTN","CIANBRPC",239,0)
 ;         <0: Returns # of active locks for node.
"RTN","CIANBRPC",240,0)
 ;    missing: Performs unlock operation.  Returns success.
"RTN","CIANBRPC",241,0)
 ; DATA = Returns status according to value of OPR.
"RTN","CIANBRPC",242,0)
LOCK(DATA,GBL,OPR) ;
"RTN","CIANBRPC",243,0)
 N LCK
"RTN","CIANBRPC",244,0)
 S LCK=$D(OPR),OPR=+$G(OPR),GBL=$NA(@GBL)
"RTN","CIANBRPC",245,0)
 I OPR<0 S DATA=$$LOCKCNT(GBL)
"RTN","CIANBRPC",246,0)
 E  I LCK D
"RTN","CIANBRPC",247,0)
 .L +@GBL:OPR
"RTN","CIANBRPC",248,0)
 .S DATA=$T
"RTN","CIANBRPC",249,0)
 .I DATA,$$LOCKCNT(GBL,1)
"RTN","CIANBRPC",250,0)
 E  D
"RTN","CIANBRPC",251,0)
 .S DATA=''$$LOCKCNT(GBL,-1)
"RTN","CIANBRPC",252,0)
 .L:DATA -@GBL
"RTN","CIANBRPC",253,0)
 Q
"RTN","CIANBRPC",254,0)
 ; RPC: Restore locks (after reconnect)
"RTN","CIANBRPC",255,0)
 ; Data returns list of locks that could not be restored.
"RTN","CIANBRPC",256,0)
LOCKRES(DATA) ;
"RTN","CIANBRPC",257,0)
 N GBL,CNT,X
"RTN","CIANBRPC",258,0)
 S GBL="",X=0
"RTN","CIANBRPC",259,0)
 F  S GBL=$O(^XTMP("CIA",CIA("UID"),"L",GBL)) Q:'$L(GBL)  S CNT=+$G(^(GBL))  D
"RTN","CIANBRPC",260,0)
 .F CNT=CNT:-1:1 L +@GBL:1 E  D  Q
"RTN","CIANBRPC",261,0)
 ..S X=X+1,@DATA@(X)=GBL
"RTN","CIANBRPC",262,0)
 ..K ^XTMP("CIA",CIA("UID"),"L",GBL)
"RTN","CIANBRPC",263,0)
 Q
"RTN","CIANBRPC",264,0)
 ; Return lock count.  Optionally increment/decrement afterwards.
"RTN","CIANBRPC",265,0)
 ; Note use of naked reference.
"RTN","CIANBRPC",266,0)
LOCKCNT(GBL,INC) ;
"RTN","CIANBRPC",267,0)
 N X,Y
"RTN","CIANBRPC",268,0)
 S X=+$G(^XTMP("CIA",CIA("UID"),"L",GBL)),Y=X+$G(INC)  ; Sets naked reference
"RTN","CIANBRPC",269,0)
 I Y>0 S ^(GBL)=Y
"RTN","CIANBRPC",270,0)
 E  K ^(GBL)
"RTN","CIANBRPC",271,0)
 Q X
"RTN","CIANBRPC",272,0)
 ; Get temp global reference
"RTN","CIANBRPC",273,0)
TMPGBL(X) ;
"RTN","CIANBRPC",274,0)
 K ^TMP("CIANBTMP"_$G(X),$J) Q $NA(^($J))
"RTN","CIANBUTL")
0^6^B38343690
"RTN","CIANBUTL",1,0)
CIANBUTL ;MSC/IND/DKM - MSC RPC Broker Utilities ;09-Jul-2008 10:37;PLS
"RTN","CIANBUTL",2,0)
 ;;1.1;CIA NETWORK COMPONENTS;**001007**;Sep 18, 2007;Build 63
"RTN","CIANBUTL",3,0)
 ;;Copyright 2000-2008, Medsphere Systems Corporation
"RTN","CIANBUTL",4,0)
 ;=================================================================
"RTN","CIANBUTL",5,0)
 ; Cleanup stray global nodes
"RTN","CIANBUTL",6,0)
CLEANUP ;EP
"RTN","CIANBUTL",7,0)
 N UID
"RTN","CIANBUTL",8,0)
 F  Q:'$$NXTUID(.UID,0)  K ^XTMP("CIA",UID)
"RTN","CIANBUTL",9,0)
 Q
"RTN","CIANBUTL",10,0)
 ; Force RPC context tables to be rebuilt for all active sessions
"RTN","CIANBUTL",11,0)
REBLDCTX ;EP
"RTN","CIANBUTL",12,0)
 N UID,CTX
"RTN","CIANBUTL",13,0)
 F  Q:'$$NXTUID(.UID)  D
"RTN","CIANBUTL",14,0)
 .F CTX=0:0 S CTX=$O(^XTMP("CIA",UID,"C",CTX)) Q:'CTX  S ^(CTX)=0
"RTN","CIANBUTL",15,0)
 Q
"RTN","CIANBUTL",16,0)
 ; Get globally unique instance ID
"RTN","CIANBUTL",17,0)
UID() N UID,FLG
"RTN","CIANBUTL",18,0)
 L +^XTMP("CIA",0):5
"RTN","CIANBUTL",19,0)
 E  Q "-3^Cannot initialize environment"
"RTN","CIANBUTL",20,0)
 S FLG=0
"RTN","CIANBUTL",21,0)
 F UID=$P($G(^XTMP("CIA",0)),U,3)+1:1 D  Q:(UID<1)!(FLG=2)
"RTN","CIANBUTL",22,0)
 .I (UID<1)!(UID>999999) D  Q:UID<1
"RTN","CIANBUTL",23,0)
 ..S UID=$S('FLG:1,1:"-4^Lock table is full"),FLG=1
"RTN","CIANBUTL",24,0)
 .S:'$$ISACTIVE(UID,1) FLG=2
"RTN","CIANBUTL",25,0)
 S:UID>0 ^XTMP("CIA",0)=(DT+10000)_U_DT_U_UID
"RTN","CIANBUTL",26,0)
 L -^XTMP("CIA",0)
"RTN","CIANBUTL",27,0)
 Q UID
"RTN","CIANBUTL",28,0)
 ; Verifies that a session is truly active
"RTN","CIANBUTL",29,0)
 ;   UID = Unique id of session
"RTN","CIANBUTL",30,0)
 ;   LCK = If nonzero, leave lock active (defaults to 0)
"RTN","CIANBUTL",31,0)
 ;   TMO = Optional lock timeout (defaults to 0)
"RTN","CIANBUTL",32,0)
ISACTIVE(UID,LCK,TMO) ;EP
"RTN","CIANBUTL",33,0)
 Q:'$G(UID) 0
"RTN","CIANBUTL",34,0)
 Q:UID=$G(CIA("UID")) 1
"RTN","CIANBUTL",35,0)
 L +^XTMP("CIA",UID,0):+$G(TMO)
"RTN","CIANBUTL",36,0)
 E  Q 1
"RTN","CIANBUTL",37,0)
 L:'$G(LCK) -^XTMP("CIA",UID,0)
"RTN","CIANBUTL",38,0)
 Q 0
"RTN","CIANBUTL",39,0)
 ; Gets the session ID associated with this process
"RTN","CIANBUTL",40,0)
 ; If not in session context, attempt answerback from client
"RTN","CIANBUTL",41,0)
GETUID() ;EP
"RTN","CIANBUTL",42,0)
 I '$D(CIA("UID")) D
"RTN","CIANBUTL",43,0)
 .S CIA("UID")=""
"RTN","CIANBUTL",44,0)
 .Q:$D(ZTQUEUED)
"RTN","CIANBUTL",45,0)
 .N X,UID,I
"RTN","CIANBUTL",46,0)
 .S I=$I,UID=""
"RTN","CIANBUTL",47,0)
 .U $S($D(IO(0)):IO(0),1:$P)                                           ; Use home device
"RTN","CIANBUTL",48,0)
 .X ^%ZOSF("EOFF")                                                     ; Suppress echo
"RTN","CIANBUTL",49,0)
 .F  R X#1:0 Q:'$T                                                     ; Flush keyboard buffer
"RTN","CIANBUTL",50,0)
 .W $C(5)                                                              ; Send answerback request
"RTN","CIANBUTL",51,0)
 .F  R X:4 Q:'$T&'$L(X)  S UID=UID_X                                   ; Listen for response
"RTN","CIANBUTL",52,0)
 .S UID=$P(UID,"CIA#",2)
"RTN","CIANBUTL",53,0)
 .X ^%ZOSF("EON")                                                      ; Restore echo
"RTN","CIANBUTL",54,0)
 .U I                                                                  ; Restore previous device
"RTN","CIANBUTL",55,0)
 .I $$ISACTIVE(UID),$$GETVAR("DUZ",,,UID)=DUZ S CIA("UID")=UID
"RTN","CIANBUTL",56,0)
 .E  S CIA("UID")=""
"RTN","CIANBUTL",57,0)
 Q:$Q CIA("UID")
"RTN","CIANBUTL",58,0)
 Q
"RTN","CIANBUTL",59,0)
 ; Retrieve next session ID from list
"RTN","CIANBUTL",60,0)
 ;   UID passed as last ID processed, returned as next ID or null
"RTN","CIANBUTL",61,0)
 ;   FLT = <0=all; 0=inactive only; >0=active only (default)
"RTN","CIANBUTL",62,0)
 ;   AID = Application ID (optional)
"RTN","CIANBUTL",63,0)
 ;   Return value is true if ID found
"RTN","CIANBUTL",64,0)
NXTUID(UID,FLT,AID) ;EP
"RTN","CIANBUTL",65,0)
 N PFX,FND,ALL,ACT
"RTN","CIANBUTL",66,0)
 S FLT=+$G(FLT,1),FND=0,ALL=FLT<0,ACT=FLT>0,AID=$$OPTLKP(.AID),UID=+$G(UID)
"RTN","CIANBUTL",67,0)
 I $L(AID) F  S UID=$O(^XTMP("CIA",UID)) Q:'UID  D  Q:FND
"RTN","CIANBUTL",68,0)
 .I AID,$$GETVAR("AID0",,,UID)'=AID Q
"RTN","CIANBUTL",69,0)
 .I 'ALL,$$ISACTIVE(UID)'=ACT Q
"RTN","CIANBUTL",70,0)
 .S FND=1
"RTN","CIANBUTL",71,0)
 S:'FND UID=""
"RTN","CIANBUTL",72,0)
 Q:$Q FND
"RTN","CIANBUTL",73,0)
 Q
"RTN","CIANBUTL",74,0)
 ; Retrieve a package parameter value
"RTN","CIANBUTL",75,0)
PARAM(PAR,MIN,MAX) ;EP
"RTN","CIANBUTL",76,0)
 S VAL=+$$GET^XPAR("ALL",PAR)
"RTN","CIANBUTL",77,0)
 S:VAL<MIN VAL=MIN
"RTN","CIANBUTL",78,0)
 S:VAL>MAX VAL=MAX
"RTN","CIANBUTL",79,0)
 Q VAL
"RTN","CIANBUTL",80,0)
 ; Return free resource device
"RTN","CIANBUTL",81,0)
RESDEV() ;EP
"RTN","CIANBUTL",82,0)
 N RD,MX,SL,UID,X,C
"RTN","CIANBUTL",83,0)
 S MX=$$PARAM("CIANB RESOURCE DEVICE COUNT",1,20)
"RTN","CIANBUTL",84,0)
 S SL=$$PARAM("CIANB RESOURCE DEVICE SLOTS",1,20)
"RTN","CIANBUTL",85,0)
 F  Q:'$$NXTUID(.UID)  D
"RTN","CIANBUTL",86,0)
 .S RD=$$GETVAR("RDEV",,,UID)
"RTN","CIANBUTL",87,0)
 .S:RD RD(RD)=$G(RD(RD))+1
"RTN","CIANBUTL",88,0)
 S RD=1,C=999999
"RTN","CIANBUTL",89,0)
 F X=1:1:MX S:+$G(RD(X))<C RD=X,C=+$G(RD(X))
"RTN","CIANBUTL",90,0)
 S X=$$RES^XUDHSET("CIANB THREAD RESOURCE #"_RD,,SL,"CIA Broker Asynchronous Callbacks")
"RTN","CIANBUTL",91,0)
 Q RD
"RTN","CIANBUTL",92,0)
 ; Set maximum slots for resource devices
"RTN","CIANBUTL",93,0)
SETSLOTS(CNT) ;EP
"RTN","CIANBUTL",94,0)
 N RES,IEN,FDA,X,Y
"RTN","CIANBUTL",95,0)
 Q:CNT<2!(CNT>20)
"RTN","CIANBUTL",96,0)
 D FIND^DIC(3.5,,"@","UP","CIANB THREAD RESOURCE #",,"B")
"RTN","CIANBUTL",97,0)
 F RES=0:0 S RES=$O(^TMP("DILIST",$J,RES)) Q:'RES  S IEN=+$G(^(RES,0)) D:IEN
"RTN","CIANBUTL",98,0)
 .S FDA(3.5,IEN_",",35)=CNT
"RTN","CIANBUTL",99,0)
 D FILE^DIE("K","FDA")
"RTN","CIANBUTL",100,0)
 K ^TMP("DILIST",$J),^TMP("DIERR",$J)
"RTN","CIANBUTL",101,0)
 Q
"RTN","CIANBUTL",102,0)
 ; Return info for session
"RTN","CIANBUTL",103,0)
SESSION(UID,VAR) ;EP
"RTN","CIANBUTL",104,0)
 N X,Y,Z
"RTN","CIANBUTL",105,0)
 S (X,Y)=""
"RTN","CIANBUTL",106,0)
 S:'$L($G(VAR)) VAR="UID^WID^AID^DUZ^USER^LDT^JOB"
"RTN","CIANBUTL",107,0)
 F Z=1:1:$L(VAR,U) S X=X_Y_$$GETVAR($P(VAR,U,Z),,,.UID),Y=U
"RTN","CIANBUTL",108,0)
 Q X
"RTN","CIANBUTL",109,0)
 ; Show active sessions
"RTN","CIANBUTL",110,0)
 ;   AID = optional application id
"RTN","CIANBUTL",111,0)
 ;   FLT = <0=all; 0=inactive only; >0=active only (default)
"RTN","CIANBUTL",112,0)
SHOWSESS(AID,FLT) ;EP
"RTN","CIANBUTL",113,0)
 N C,X,Z
"RTN","CIANBUTL",114,0)
 F C=0:1 Q:'$$NXTUID(.X,.FLT,.AID)  D
"RTN","CIANBUTL",115,0)
 .W "#",X,?10,$$HTE^XLFDT($$GETVAR("LDT",,,X)),?40,$$GETVAR("WID",,,X),?60,$$GETVAR("USER",,,X),!
"RTN","CIANBUTL",116,0)
 W !,$S('C:"No sessions are",C=1:"One session is",1:C_" sessions are")," ",$S(FLT>0:"active",FLT<0:"present",1:"inactive"),".",!
"RTN","CIANBUTL",117,0)
 Q:$Q C
"RTN","CIANBUTL",118,0)
 Q
"RTN","CIANBUTL",119,0)
 ; Fetch an environment variable
"RTN","CIANBUTL",120,0)
 ;   NAME = Variable name
"RTN","CIANBUTL",121,0)
 ;   DFLT = Optional default value
"RTN","CIANBUTL",122,0)
 ;   NMSP = Optional namespace (defaults to global)
"RTN","CIANBUTL",123,0)
 ;   UID  = Optional session id (default to current)
"RTN","CIANBUTL",124,0)
GETVAR(NAME,DFLT,NMSP,UID) ;EP
"RTN","CIANBUTL",125,0)
 D FMTVAR(.UID,.NMSP,.NAME)
"RTN","CIANBUTL",126,0)
 Q $S('UID:"",1:$G(^XTMP("CIA",UID,"V",NMSP,NAME),$G(DFLT)))
"RTN","CIANBUTL",127,0)
 ; Save an environment variable
"RTN","CIANBUTL",128,0)
 ;   NAME = Variable name
"RTN","CIANBUTL",129,0)
 ;   VALUE = Value to be assigned (if not specified, entry is deleted)
"RTN","CIANBUTL",130,0)
 ;   NMSP = Optional namespace (defaults to global)
"RTN","CIANBUTL",131,0)
SETVAR(NAME,VALUE,NMSP,UID) ;EP
"RTN","CIANBUTL",132,0)
 N $ET
"RTN","CIANBUTL",133,0)
 S $ET="S $EC="""" G ERRVAR^CIANBUTL"
"RTN","CIANBUTL",134,0)
 D FMTVAR(.UID,.NMSP,.NAME)
"RTN","CIANBUTL",135,0)
 I 'UID Q:$Q 0 Q
"RTN","CIANBUTL",136,0)
 L +^XTMP("CIA",UID,"V",NMSP,NAME):1
"RTN","CIANBUTL",137,0)
 ;E  Q:$Q 0 Q
"RTN","CIANBUTL",138,0)
 I $D(VALUE) S:NMSP=-1 @NAME=VALUE S ^XTMP("CIA",UID,"V",NMSP,NAME)=VALUE
"RTN","CIANBUTL",139,0)
 E  K:NMSP=-1 @NAME K ^XTMP("CIA",UID,"V",NMSP,NAME)
"RTN","CIANBUTL",140,0)
 L -^XTMP("CIA",UID,"V",NMSP,NAME)
"RTN","CIANBUTL",141,0)
 Q:$Q 1
"RTN","CIANBUTL",142,0)
 Q
"RTN","CIANBUTL",143,0)
 ; Clear all variables in a namespace
"RTN","CIANBUTL",144,0)
CLRVAR(NMSP,UID) ;EP
"RTN","CIANBUTL",145,0)
 N NAME,RES
"RTN","CIANBUTL",146,0)
 D FMTVAR(.UID,.NMSP)
"RTN","CIANBUTL",147,0)
 L +^XTMP("CIA",UID,"V",NMSP):1
"RTN","CIANBUTL",148,0)
 ;E  Q:$Q 0 Q
"RTN","CIANBUTL",149,0)
 S NAME="",RES=1
"RTN","CIANBUTL",150,0)
 F  S NAME=$O(^XTMP("CIA",UID,"V",NMSP,NAME)) Q:'$L(NAME)  S RES=RES&$$SETVAR(NAME,,NMSP,UID)
"RTN","CIANBUTL",151,0)
 L -^XTMP("CIA",UID,"V",NMSP)
"RTN","CIANBUTL",152,0)
 Q:$Q RES
"RTN","CIANBUTL",153,0)
 Q
"RTN","CIANBUTL",154,0)
 ; Restore variables from local variable namespace
"RTN","CIANBUTL",155,0)
RESVAR N NAME,UID
"RTN","CIANBUTL",156,0)
 D FMTVAR(.UID)
"RTN","CIANBUTL",157,0)
 S NAME=""
"RTN","CIANBUTL",158,0)
 F  S NAME=$O(^XTMP("CIA",UID,"V",-1,NAME)) Q:'$L(NAME)  S @NAME=^(NAME)
"RTN","CIANBUTL",159,0)
 Q
"RTN","CIANBUTL",160,0)
 ; Error handler for var calls
"RTN","CIANBUTL",161,0)
ERRVAR L -^XTMP("CIA",UID,"V",NMSP,NAME)
"RTN","CIANBUTL",162,0)
 Q:$Q 0
"RTN","CIANBUTL",163,0)
 Q
"RTN","CIANBUTL",164,0)
 ; Format arguments for var calls
"RTN","CIANBUTL",165,0)
FMTVAR(UID,NMSP,NAME) ;
"RTN","CIANBUTL",166,0)
 S UID=$G(UID,$G(CIA("UID")))
"RTN","CIANBUTL",167,0)
 S NMSP=$$UP^XLFSTR($G(NMSP,0))
"RTN","CIANBUTL",168,0)
 S NAME=$$UP^XLFSTR($G(NAME))
"RTN","CIANBUTL",169,0)
 S:NMSP=-1&$L(NAME) NAME=$NA(@NAME)
"RTN","CIANBUTL",170,0)
 Q
"RTN","CIANBUTL",171,0)
 ; Retrieve dialog text
"RTN","CIANBUTL",172,0)
 ;  NUM = Dialog number (relative or absolute)
"RTN","CIANBUTL",173,0)
 ; .DLG = Array to receive text
"RTN","CIANBUTL",174,0)
 ;  Pn  = Optional parameters (up to 3)
"RTN","CIANBUTL",175,0)
GETDLG(NUM,DLG,P1,P2,P3) ;
"RTN","CIANBUTL",176,0)
 N PAR
"RTN","CIANBUTL",177,0)
 K DLG
"RTN","CIANBUTL",178,0)
 S:NUM<10000 NUM=NUM+199412000
"RTN","CIANBUTL",179,0)
 S PAR(1)=$G(P1,$G(CIA("RPC"))),PAR(2)=$G(P2),PAR(3)=$G(P3)
"RTN","CIANBUTL",180,0)
 D BLD^DIALOG(NUM,.PAR,,"DLG")
"RTN","CIANBUTL",181,0)
 Q:$Q $G(DLG(1))
"RTN","CIANBUTL",182,0)
 Q
"RTN","CIANBUTL",183,0)
 ; Lookup option, returning IEN
"RTN","CIANBUTL",184,0)
OPTLKP(OPT) ;EP
"RTN","CIANBUTL",185,0)
 Q $S('$L($G(OPT)):0,OPT=+OPT:OPT,1:$O(^DIC(19,"B",OPT,0)))
"RTN","CIANBUTL",186,0)
 ; Get/set out-of-order message for option
"RTN","CIANBUTL",187,0)
 ;   MSG = New message (if passed, a set is performed, otherwise a get)
"RTN","CIANBUTL",188,0)
 ;   Returns current message text
"RTN","CIANBUTL",189,0)
OPTMSG(OPT,MSG) ;EP
"RTN","CIANBUTL",190,0)
 S OPT=+$$OPTLKP(.OPT)
"RTN","CIANBUTL",191,0)
 I OPT,$D(^DIC(19,OPT,0)) D                                            ; Sets naked ref
"RTN","CIANBUTL",192,0)
 .I $D(MSG) S $P(^(0),U,3)=MSG
"RTN","CIANBUTL",193,0)
 .E  S MSG=$P(^(0),U,3)
"RTN","CIANBUTL",194,0)
 E  S MSG=""
"RTN","CIANBUTL",195,0)
 Q:$Q MSG
"RTN","CIANBUTL",196,0)
 Q
"RTN","CIANBUTL",197,0)
 ; Check option for valid access
"RTN","CIANBUTL",198,0)
 ;   OPT=Option IEN or name
"RTN","CIANBUTL",199,0)
 ;   TYP=Optional option type to check
"RTN","CIANBUTL",200,0)
 ;   Returns 0 if OK, <err code>^<err param> otherwise
"RTN","CIANBUTL",201,0)
OPTCHK(OPT,TYP) ;EP
"RTN","CIANBUTL",202,0)
 N XQY,X,Y,Z
"RTN","CIANBUTL",203,0)
 S XQY=$S(OPT=+OPT:OPT,1:$$OPTLKP(OPT))
"RTN","CIANBUTL",204,0)
 Q:XQY'>0 "2^"_OPT
"RTN","CIANBUTL",205,0)
 S X=$G(^DIC(19,XQY,0)),Y=$P($G(^(3)),U),Z=$P(X,U,3)
"RTN","CIANBUTL",206,0)
 Q:$L(Z) "19^"_Z
"RTN","CIANBUTL",207,0)
 I $L($G(TYP)),$P(X,U,4)'=TYP Q "20^"_OPT_U_TYP
"RTN","CIANBUTL",208,0)
 I $P(X,U,16),$L(Y),$$KCHK^XUSRB(Y) Q "21^"_OPT_U_Y
"RTN","CIANBUTL",209,0)
 S Y=$P(X,U,6)
"RTN","CIANBUTL",210,0)
 I $L(Y),'$$KCHK^XUSRB(Y) Q "22^"_OPT_U_Y
"RTN","CIANBUTL",211,0)
 S X=$$NOW^XLFDT
"RTN","CIANBUTL",212,0)
 D ENTRY^XQ92
"RTN","CIANBUTL",213,0)
 Q:'X "23^"_OPT
"RTN","CIANBUTL",214,0)
 Q 0
"RTN","CIANBUTL",215,0)
 ; Nightly task to perform various cleanup procedures.
"RTN","CIANBUTL",216,0)
NIGHTLY ;EP
"RTN","CIANBUTL",217,0)
 D CLEANUP
"RTN","CIANBUTL",218,0)
 D DOPURGE^CIANBEVT(1)
"RTN","CIANBUTL",219,0)
 D DOPURGE^CIANBLOG
"RTN","CIANBUTL",220,0)
 Q
"SEC","^DIC",19941.2,19941.2,0,"AUDIT")
@
"SEC","^DIC",19941.2,19941.2,0,"DD")
@
"SEC","^DIC",19941.2,19941.2,0,"DEL")
@
"SEC","^DIC",19941.2,19941.2,0,"LAYGO")
@
"SEC","^DIC",19941.2,19941.2,0,"RD")
@
"SEC","^DIC",19941.2,19941.2,0,"WR")
@
"SEC","^DIC",19941.21,19941.21,0,"AUDIT")
@
"SEC","^DIC",19941.21,19941.21,0,"DD")
@
"SEC","^DIC",19941.21,19941.21,0,"DEL")
@
"SEC","^DIC",19941.21,19941.21,0,"LAYGO")
@
"SEC","^DIC",19941.21,19941.21,0,"RD")
@
"SEC","^DIC",19941.21,19941.21,0,"WR")
@
"SEC","^DIC",19941.22,19941.22,0,"AUDIT")
@
"SEC","^DIC",19941.22,19941.22,0,"DD")
@
"SEC","^DIC",19941.22,19941.22,0,"DEL")
@
"SEC","^DIC",19941.22,19941.22,0,"LAYGO")
@
"SEC","^DIC",19941.22,19941.22,0,"RD")
@
"SEC","^DIC",19941.22,19941.22,0,"WR")
@
"SEC","^DIC",19941.23,19941.23,0,"AUDIT")
@
"SEC","^DIC",19941.23,19941.23,0,"DD")
@
"SEC","^DIC",19941.23,19941.23,0,"DEL")
@
"SEC","^DIC",19941.23,19941.23,0,"LAYGO")
@
"SEC","^DIC",19941.23,19941.23,0,"RD")
@
"SEC","^DIC",19941.23,19941.23,0,"WR")
@
"SEC","^DIC",19941.24,19941.24,0,"AUDIT")
@
"SEC","^DIC",19941.24,19941.24,0,"DD")
@
"SEC","^DIC",19941.24,19941.24,0,"DEL")
@
"SEC","^DIC",19941.24,19941.24,0,"LAYGO")
@
"SEC","^DIC",19941.24,19941.24,0,"WR")
@
"TEMP","EC")

"TEMP","FINAL")

"TEMP","INITIAL")

"TEMP","PARAM",1)
CIANB AUTHENTICATION^|$$GETUCI~CIANBACT|^0
"TEMP","PARAM",2)
CIANB POLLING INTERVAL^1^3
"TEMP","PARAM",3)
CIANB RESOURCE DEVICE COUNT^1^4
"TEMP","PARAM",4)
CIANB RESOURCE DEVICE SLOTS^1^4
"TEMP","PARAM",5)
CIANB ACTIVITY RETENTION^1^30
"TEMP","PTRS",19941.212)
20^19941.21^19.1
"TEMP","PTRS",19941.2121)
21^19941.21^19.1
"TEMP","TGT")
2
"VER")
8.0^22.0
"^DD",19941.2,19941.2,0)
FIELD^^2^3
"^DD",19941.2,19941.2,0,"DT")
3021009
"^DD",19941.2,19941.2,0,"ID",1)
S %I=Y,Y=$S('$D(^(0)):"",$D(^VA(200,+$P(^(0),U,2),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(200,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",19941.2,19941.2,0,"IX","B",19941.2,.01)

"^DD",19941.2,19941.2,0,"NM","CIA AUTHENTICATION")

"^DD",19941.2,19941.2,0,"VRPK")
CIA RPC BROKER
"^DD",19941.2,19941.2,.01,0)
SID^RF^^0;1^K:$L(X)>200!($L(X)<3) X
"^DD",19941.2,19941.2,.01,1,0)
^.1
"^DD",19941.2,19941.2,.01,1,1,0)
19941.2^B
"^DD",19941.2,19941.2,.01,1,1,1)
S ^CIANB(19941.2,"B",$E(X,1,30),DA)=""
"^DD",19941.2,19941.2,.01,1,1,2)
K ^CIANB(19941.2,"B",$E(X,1,30),DA)
"^DD",19941.2,19941.2,.01,3)
Answer must be 3-200 characters in length.
"^DD",19941.2,19941.2,.01,"DT")
3021009
"^DD",19941.2,19941.2,1,0)
USER^P200'^VA(200,^0;2^Q
"^DD",19941.2,19941.2,1,"DT")
3021009
"^DD",19941.2,19941.2,2,0)
CREATED^D^^0;3^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",19941.2,19941.2,2,"DT")
3021009
"^DD",19941.21,19941.21,0)
FIELD^^7^14
"^DD",19941.21,19941.21,0,"DT")
3091007
"^DD",19941.21,19941.21,0,"IX","B",19941.21,.01)

"^DD",19941.21,19941.21,0,"NM","CIA EVENT TYPE")

"^DD",19941.21,19941.21,0,"PT",999.995,.01)

"^DD",19941.21,19941.21,0,"PT",19930.995,.01)

"^DD",19941.21,19941.21,0,"PT",19941.23,1)

"^DD",19941.21,19941.21,0,"VRPK")
CAREWEB ENHANCEMENTS
"^DD",19941.21,19941.21,.01,0)
NAME^RF^^0;1^K:$L(X)>100!($L(X)<3)!'(X'?1P.E) X
"^DD",19941.21,19941.21,.01,1,0)
^.1
"^DD",19941.21,19941.21,.01,1,1,0)
19941.21^B
"^DD",19941.21,19941.21,.01,1,1,1)
S ^CIANB(19941.21,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.21,.01,1,1,2)
K ^CIANB(19941.21,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.21,.01,3)
Answer must be 3-100 characters in length.
"^DD",19941.21,19941.21,.01,"DT")
3030611
"^DD",19941.21,19941.21,1,0)
MONITOR^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",19941.21,19941.21,1,3)
M code to invoke monitor for this event type
"^DD",19941.21,19941.21,1,9)
@
"^DD",19941.21,19941.21,1,"DT")
3021021
"^DD",19941.21,19941.21,2,0)
DISABLE^S^0:NO;1:YES;^0;2^Q
"^DD",19941.21,19941.21,2,3)
Enter YES to disable this event type.
"^DD",19941.21,19941.21,2,21,0)
^.001^3^3^3030810^
"^DD",19941.21,19941.21,2,21,1,0)
If set to YES, this event type is disabled.  Once disabled, any attempt to 
"^DD",19941.21,19941.21,2,21,2,0)
enqueue the event will be ignored.  Disabling an event does not affect events
"^DD",19941.21,19941.21,2,21,3,0)
already in the queue. 
"^DD",19941.21,19941.21,2,"DT")
3030810
"^DD",19941.21,19941.21,3,0)
INTERVAL^NJ11,0X^^0;3^K:X<0!(X\1'=X) X
"^DD",19941.21,19941.21,3,3)
Enter the nominal polling interval in seconds.
"^DD",19941.21,19941.21,3,21,0)
^^10^10^3021021.152235
"^DD",19941.21,19941.21,3,21,1,0)
This is the nominal polling interval for the event in seconds.
"^DD",19941.21,19941.21,3,21,2,0)
The actual polling interval is dependent on the event polling
"^DD",19941.21,19941.21,3,21,3,0)
interval set for the client application as a site parameter.
"^DD",19941.21,19941.21,3,21,4,0)
The nominal polling interval guarantees that polling for this
"^DD",19941.21,19941.21,3,21,5,0)
event will not occur more frequently than this setting.
"^DD",19941.21,19941.21,3,21,6,0)
 
"^DD",19941.21,19941.21,3,21,7,0)
For events that are infrequent and/or do not require real time
"^DD",19941.21,19941.21,3,21,8,0)
notification, higher values may be selected for this field to
"^DD",19941.21,19941.21,3,21,9,0)
mitigate impact on system load. 
"^DD",19941.21,19941.21,3,21,10,0)

"^DD",19941.21,19941.21,3,"DT")
3021021
"^DD",19941.21,19941.21,4,0)
LOG EVENT^S^0:NO;1:YES;^0;4^Q
"^DD",19941.21,19941.21,4,3)
Enter YES to enable logging of this event.
"^DD",19941.21,19941.21,4,"DT")
3030611
"^DD",19941.21,19941.21,5,0)
LOG RETENTION^NJ6,0^^0;5^K:+X'=X!(X>999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",19941.21,19941.21,5,3)
Number of days to retain log entries.
"^DD",19941.21,19941.21,5,"DT")
3030611
"^DD",19941.21,19941.21,6,0)
POLLING METHOD^S^0:PER SESSION;1:PER INTERVAL;^0;6^Q
"^DD",19941.21,19941.21,6,3)
Determines how a monitored event is polled.
"^DD",19941.21,19941.21,6,21,0)
^^11^11^3030810.175145
"^DD",19941.21,19941.21,6,21,1,0)
For monitored events, this setting determines how the monitor is invoked
"^DD",19941.21,19941.21,6,21,2,0)
when the polling interval has been reached.  PER SESSION causes the event
"^DD",19941.21,19941.21,6,21,3,0)
monitor to be invoked for each active session, setting the user and
"^DD",19941.21,19941.21,6,21,4,0)
session context prior to each call.  PER INTERVAL cause the event monitor
"^DD",19941.21,19941.21,6,21,5,0)
to be invoked only once per interval.  No user or session context information
"^DD",19941.21,19941.21,6,21,6,0)
is available to the monitor in this case.
"^DD",19941.21,19941.21,6,21,7,0)

"^DD",19941.21,19941.21,6,21,8,0)
PER SESSION is appropriate for events that depend upon a specific user or
"^DD",19941.21,19941.21,6,21,9,0)
session (e.g., notifications).  PER INTERVAL is appropriate for events 
"^DD",19941.21,19941.21,6,21,10,0)
that are independent of a user or session (e.g., status events to display
"^DD",19941.21,19941.21,6,21,11,0)
the host date/time).
"^DD",19941.21,19941.21,6,"DT")
3030810
"^DD",19941.21,19941.21,7,0)
EVENT PROTOCOL^*P101'^ORD(101,^0;7^S DIC("S")="I $E(^(0),1,4)=""CIAV"",$P(^(0),U,4)=""X""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"^DD",19941.21,19941.21,7,12)
Restricts to Extended Action Protocols starting with CIAV
"^DD",19941.21,19941.21,7,12.1)
S DIC("S")="I $E(^(0),1,4)=""CIAV"",$P(^(0),U,4)=""X"""
"^DD",19941.21,19941.21,7,"DT")
3091007
"^DD",19941.21,19941.21,10,0)
DISPLAY LOGIC^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",19941.21,19941.21,10,3)
Logic to display stub info in log viewer.
"^DD",19941.21,19941.21,10,9)
@
"^DD",19941.21,19941.21,10,"DT")
3030611
"^DD",19941.21,19941.21,20,0)
PUBLICATION KEY^19941.212P^^20;0
"^DD",19941.21,19941.21,21,0)
SUBSCRIPTION KEY^19941.2121P^^21;0
"^DD",19941.21,19941.21,99,0)
DESCRIPTION^19941.2199^^99;0
"^DD",19941.21,19941.21,100,0)
ERROR DATE/TIME^D^^100;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",19941.21,19941.21,100,3)
Date and time of last error
"^DD",19941.21,19941.21,100,"DT")
3061129
"^DD",19941.21,19941.21,101,0)
ERROR TEXT^F^^100;2^K:$L(X)>240!($L(X)<1) X
"^DD",19941.21,19941.21,101,3)
Answer must be 1-240 characters in length.
"^DD",19941.21,19941.21,101,"DT")
3061129
"^DD",19941.21,19941.212,0)
PUBLICATION KEY SUB-FIELD^^.01^1
"^DD",19941.21,19941.212,0,"DT")
3021021
"^DD",19941.21,19941.212,0,"IX","B",19941.212,.01)

"^DD",19941.21,19941.212,0,"NM","PUBLICATION KEY")

"^DD",19941.21,19941.212,0,"UP")
19941.21
"^DD",19941.21,19941.212,.01,0)
PUBLICATION KEY^MP19.1'X^DIC(19.1,^0;1^Q
"^DD",19941.21,19941.212,.01,1,0)
^.1
"^DD",19941.21,19941.212,.01,1,1,0)
19941.212^B
"^DD",19941.21,19941.212,.01,1,1,1)
S ^CIANB(19941.21,DA(1),20,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.212,.01,1,1,2)
K ^CIANB(19941.21,DA(1),20,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.212,.01,3)
Security keys required to fire this event.
"^DD",19941.21,19941.212,.01,21,0)
^^2^2^3021021.152715
"^DD",19941.21,19941.212,.01,21,1,0)
If there are entries in this multiple, the user must possess at least one of
"^DD",19941.21,19941.212,.01,21,2,0)
the listed keys in order to fire an event of this type.
"^DD",19941.21,19941.212,.01,"DT")
3040310
"^DD",19941.21,19941.2121,0)
SUBSCRIPTION KEY SUB-FIELD^^.01^1
"^DD",19941.21,19941.2121,0,"DT")
3021021
"^DD",19941.21,19941.2121,0,"IX","B",19941.2121,.01)

"^DD",19941.21,19941.2121,0,"NM","SUBSCRIPTION KEY")

"^DD",19941.21,19941.2121,0,"UP")
19941.21
"^DD",19941.21,19941.2121,.01,0)
SUBSCRIPTION KEY^MP19.1'X^DIC(19.1,^0;1^Q
"^DD",19941.21,19941.2121,.01,1,0)
^.1
"^DD",19941.21,19941.2121,.01,1,1,0)
19941.2121^B
"^DD",19941.21,19941.2121,.01,1,1,1)
S ^CIANB(19941.21,DA(1),21,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.2121,.01,1,1,2)
K ^CIANB(19941.21,DA(1),21,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.2121,.01,3)
Security keys required to receive this event type.
"^DD",19941.21,19941.2121,.01,21,0)
^^2^2^3021021.153002
"^DD",19941.21,19941.2121,.01,21,1,0)
If there are entries in this multiple, the user must possess at least one of
"^DD",19941.21,19941.2121,.01,21,2,0)
the listed keys in order subscribe to an event of this type. 
"^DD",19941.21,19941.2121,.01,"DT")
3040310
"^DD",19941.21,19941.2199,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",19941.21,19941.2199,0,"DT")
3021021
"^DD",19941.21,19941.2199,0,"NM","DESCRIPTION")

"^DD",19941.21,19941.2199,0,"UP")
19941.21
"^DD",19941.21,19941.2199,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",19941.21,19941.2199,.01,3)
Enter a detailed description of this event type.
"^DD",19941.21,19941.2199,.01,"DT")
3021021
"^DD",19941.22,19941.22,0)
FIELD^^2^4
"^DD",19941.22,19941.22,0,"DT")
3031102
"^DD",19941.22,19941.22,0,"IX","B",19941.22,.01)

"^DD",19941.22,19941.22,0,"NM","CIA LISTENER")

"^DD",19941.22,19941.22,0,"VRPK")
CIA RPC BROKER
"^DD",19941.22,19941.22,.01,0)
NAME^RF^^0;1^K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",19941.22,19941.22,.01,1,0)
^.1
"^DD",19941.22,19941.22,.01,1,1,0)
19941.22^B
"^DD",19941.22,19941.22,.01,1,1,1)
S ^CIANB(19941.22,"B",$E(X,1,30),DA)=""
"^DD",19941.22,19941.22,.01,1,1,2)
K ^CIANB(19941.22,"B",$E(X,1,30),DA)
"^DD",19941.22,19941.22,.01,3)
NAME MUST BE 3-30 CHARACTERS, NOT NUMERIC OR STARTING WITH PUNCTUATION
"^DD",19941.22,19941.22,1,0)
PORT^NJ5,0^^0;2^K:+X'=X!(X>32767)!(X<1000)!(X?.E1"."1N.N) X
"^DD",19941.22,19941.22,1,3)
Enter TCP port # for this listener.
"^DD",19941.22,19941.22,1,"DT")
3030113
"^DD",19941.22,19941.22,1.5,0)
UCI^FX^^0;4^K:0[$$UCICHECK^%ZOSV(X) X
"^DD",19941.22,19941.22,1.5,3)
Enter UCI where listener will start.
"^DD",19941.22,19941.22,1.5,"DT")
3031210
"^DD",19941.22,19941.22,2,0)
DISABLE^S^0:NO;1:YES;^0;3^Q
"^DD",19941.22,19941.22,2,"DT")
3030113
"^DD",19941.23,19941.23,0)
FIELD^^10^5
"^DD",19941.23,19941.23,0,"DT")
3030611
"^DD",19941.23,19941.23,0,"ID",1)
W "   ",$P(^(0),U,2)
"^DD",19941.23,19941.23,0,"IX","B",19941.23,.01)

"^DD",19941.23,19941.23,0,"IX","C",19941.23,1)

"^DD",19941.23,19941.23,0,"IX","D",19941.23,2)

"^DD",19941.23,19941.23,0,"IX","E",19941.23,3)

"^DD",19941.23,19941.23,0,"NM","CIA EVENT LOG")

"^DD",19941.23,19941.23,0,"VRPK")
CIA RPC BROKER
"^DD",19941.23,19941.23,.01,0)
TIMESTAMP^RD^^0;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",19941.23,19941.23,.01,1,0)
^.1
"^DD",19941.23,19941.23,.01,1,1,0)
19941.23^B
"^DD",19941.23,19941.23,.01,1,1,1)
S ^CIANB(19941.23,"B",$E(X,1,30),DA)=""
"^DD",19941.23,19941.23,.01,1,1,2)
K ^CIANB(19941.23,"B",$E(X,1,30),DA)
"^DD",19941.23,19941.23,.01,3)
Time event was logged.
"^DD",19941.23,19941.23,.01,"DT")
3030611
"^DD",19941.23,19941.23,1,0)
EVENT NAME^RF^^0;2^K:$L(X)>100!($L(X)<1) X
"^DD",19941.23,19941.23,1,1,0)
^.1
"^DD",19941.23,19941.23,1,1,1,0)
19941.23^C
"^DD",19941.23,19941.23,1,1,1,1)
S ^CIANB(19941.23,"C",$E(X,1,30),DA)=""
"^DD",19941.23,19941.23,1,1,1,2)
K ^CIANB(19941.23,"C",$E(X,1,30),DA)
"^DD",19941.23,19941.23,1,1,1,"DT")
3030611
"^DD",19941.23,19941.23,1,3)
Name of event.
"^DD",19941.23,19941.23,1,"DT")
3030611
"^DD",19941.23,19941.23,2,0)
USER^P200'^VA(200,^0;3^Q
"^DD",19941.23,19941.23,2,1,0)
^.1
"^DD",19941.23,19941.23,2,1,1,0)
19941.23^D
"^DD",19941.23,19941.23,2,1,1,1)
S ^CIANB(19941.23,"D",$E(X,1,30),DA)=""
"^DD",19941.23,19941.23,2,1,1,2)
K ^CIANB(19941.23,"D",$E(X,1,30),DA)
"^DD",19941.23,19941.23,2,1,1,"DT")
3030611
"^DD",19941.23,19941.23,2,3)
User originating the event.
"^DD",19941.23,19941.23,2,"DT")
3030611
"^DD",19941.23,19941.23,3,0)
SESSION^NJ15,0^^0;4^K:+X'=X!(X>999999999999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",19941.23,19941.23,3,1,0)
^.1
"^DD",19941.23,19941.23,3,1,1,0)
19941.23^E
"^DD",19941.23,19941.23,3,1,1,1)
S ^CIANB(19941.23,"E",$E(X,1,30),DA)=""
"^DD",19941.23,19941.23,3,1,1,2)
K ^CIANB(19941.23,"E",$E(X,1,30),DA)
"^DD",19941.23,19941.23,3,1,1,"DT")
3030611
"^DD",19941.23,19941.23,3,3)
Session originating the event.
"^DD",19941.23,19941.23,3,"DT")
3030611
"^DD",19941.23,19941.23,10,0)
EVENT STUB^19941.232^^10;0
"^DD",19941.23,19941.232,0)
EVENT STUB SUB-FIELD^^.01^1
"^DD",19941.23,19941.232,0,"DT")
3030611
"^DD",19941.23,19941.232,0,"NM","EVENT STUB")

"^DD",19941.23,19941.232,0,"UP")
19941.23
"^DD",19941.23,19941.232,.01,0)
EVENT STUB^WL^^0;1^Q
"^DD",19941.23,19941.232,.01,3)
Data associated with event.
"^DD",19941.23,19941.232,.01,"DT")
3030611
"^DD",19941.24,19941.24,0)
FIELD^^10^7
"^DD",19941.24,19941.24,0,"DDA")
N
"^DD",19941.24,19941.24,0,"DT")
3080104
"^DD",19941.24,19941.24,0,"IX","B",19941.24,.01)

"^DD",19941.24,19941.24,0,"IX","BDIV",19941.24,5)

"^DD",19941.24,19941.24,0,"IX","BLOGIN",19941.24,3)

"^DD",19941.24,19941.24,0,"IX","BLOGOUT",19941.24,4)

"^DD",19941.24,19941.24,0,"IX","BUSER",19941.24,1)

"^DD",19941.24,19941.24,0,"IX","BWKID",19941.24,2)

"^DD",19941.24,19941.24,0,"NM","CIA ACTIVITY LOG")

"^DD",19941.24,19941.24,0,"VRPK")
CIA RPC BROKER
"^DD",19941.24,19941.24,.01,0)
SESSION ID^RNJ9,0^^0;1^K:+X'=X!(X>999999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",19941.24,19941.24,.01,1,0)
^.1
"^DD",19941.24,19941.24,.01,1,1,0)
19941.24^B
"^DD",19941.24,19941.24,.01,1,1,1)
S ^CIANB(19941.24,"B",$E(X,1,30),DA)=""
"^DD",19941.24,19941.24,.01,1,1,2)
K ^CIANB(19941.24,"B",$E(X,1,30),DA)
"^DD",19941.24,19941.24,.01,3)
This is the unique identifier for the session.
"^DD",19941.24,19941.24,.01,"DT")
3080103
"^DD",19941.24,19941.24,1,0)
USER^P200'^VA(200,^0;2^Q
"^DD",19941.24,19941.24,1,1,0)
^.1
"^DD",19941.24,19941.24,1,1,1,0)
19941.24^BUSER
"^DD",19941.24,19941.24,1,1,1,1)
S ^CIANB(19941.24,"BUSER",$E(X,1,30),DA)=""
"^DD",19941.24,19941.24,1,1,1,2)
K ^CIANB(19941.24,"BUSER",$E(X,1,30),DA)
"^DD",19941.24,19941.24,1,1,1,"DT")
3080103
"^DD",19941.24,19941.24,1,3)
User associated with this session.
"^DD",19941.24,19941.24,1,"DT")
3080103
"^DD",19941.24,19941.24,2,0)
WORKSTATION ID^F^^0;3^K:$L(X)>50!($L(X)<1) X
"^DD",19941.24,19941.24,2,1,0)
^.1
"^DD",19941.24,19941.24,2,1,1,0)
19941.24^BWKID
"^DD",19941.24,19941.24,2,1,1,1)
S ^CIANB(19941.24,"BWKID",$E(X,1,30),DA)=""
"^DD",19941.24,19941.24,2,1,1,2)
K ^CIANB(19941.24,"BWKID",$E(X,1,30),DA)
"^DD",19941.24,19941.24,2,1,1,"DT")
3080103
"^DD",19941.24,19941.24,2,3)
Name of the workstation originating this session.
"^DD",19941.24,19941.24,2,"DT")
3080103
"^DD",19941.24,19941.24,3,0)
LOGIN TIME^D^^0;4^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",19941.24,19941.24,3,1,0)
^.1
"^DD",19941.24,19941.24,3,1,1,0)
19941.24^BLOGIN
"^DD",19941.24,19941.24,3,1,1,1)
S ^CIANB(19941.24,"BLOGIN",$E(X,1,30),DA)=""
"^DD",19941.24,19941.24,3,1,1,2)
K ^CIANB(19941.24,"BLOGIN",$E(X,1,30),DA)
"^DD",19941.24,19941.24,3,1,1,"DT")
3080103
"^DD",19941.24,19941.24,3,3)
Time of initial login.
"^DD",19941.24,19941.24,3,"DT")
3080103
"^DD",19941.24,19941.24,4,0)
LOGOUT TIME^D^^0;5^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",19941.24,19941.24,4,1,0)
^.1
"^DD",19941.24,19941.24,4,1,1,0)
19941.24^BLOGOUT
"^DD",19941.24,19941.24,4,1,1,1)
S ^CIANB(19941.24,"BLOGOUT",$E(X,1,30),DA)=""
"^DD",19941.24,19941.24,4,1,1,2)
K ^CIANB(19941.24,"BLOGOUT",$E(X,1,30),DA)
"^DD",19941.24,19941.24,4,1,1,"DT")
3080103
"^DD",19941.24,19941.24,4,3)
Time of final logout.
"^DD",19941.24,19941.24,4,"DT")
3080103
"^DD",19941.24,19941.24,5,0)
DIVISION^P4'^DIC(4,^0;6^Q
"^DD",19941.24,19941.24,5,1,0)
^.1
"^DD",19941.24,19941.24,5,1,1,0)
19941.24^BDIV
"^DD",19941.24,19941.24,5,1,1,1)
S ^CIANB(19941.24,"BDIV",$E(X,1,30),DA)=""
"^DD",19941.24,19941.24,5,1,1,2)
K ^CIANB(19941.24,"BDIV",$E(X,1,30),DA)
"^DD",19941.24,19941.24,5,1,1,"DT")
3080104
"^DD",19941.24,19941.24,5,3)
Division user has logged into.
"^DD",19941.24,19941.24,5,"DT")
3080104
"^DD",19941.24,19941.24,10,0)
ACTIVITY^19941.241D^^10;0
"^DD",19941.24,19941.241,0)
ACTIVITY SUB-FIELD^^10^4
"^DD",19941.24,19941.241,0,"DT")
3080103
"^DD",19941.24,19941.241,0,"IX","B",19941.241,.01)

"^DD",19941.24,19941.241,0,"NM","ACTIVITY")

"^DD",19941.24,19941.241,0,"UP")
19941.24
"^DD",19941.24,19941.241,.01,0)
DATE/TIME^MD^^0;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",19941.24,19941.241,.01,1,0)
^.1
"^DD",19941.24,19941.241,.01,1,1,0)
19941.241^B
"^DD",19941.24,19941.241,.01,1,1,1)
S ^CIANB(19941.24,DA(1),10,"B",$E(X,1,30),DA)=""
"^DD",19941.24,19941.241,.01,1,1,2)
K ^CIANB(19941.24,DA(1),10,"B",$E(X,1,30),DA)
"^DD",19941.24,19941.241,.01,"DT")
3080103
"^DD",19941.24,19941.241,1,0)
TYPE^S^1:RPC;2:EVENT;^0;2^Q
"^DD",19941.24,19941.241,1,"DT")
3080103
"^DD",19941.24,19941.241,2,0)
NAME^F^^0;3^K:$L(X)>150!($L(X)<1) X
"^DD",19941.24,19941.241,2,3)
Answer must be 1-150 characters in length.
"^DD",19941.24,19941.241,2,"DT")
3080103
"^DD",19941.24,19941.241,10,0)
LOG^19941.242^^10;0
"^DD",19941.24,19941.242,0)
LOG SUB-FIELD^^.01^1
"^DD",19941.24,19941.242,0,"DT")
3080103
"^DD",19941.24,19941.242,0,"NM","LOG")

"^DD",19941.24,19941.242,0,"UP")
19941.241
"^DD",19941.24,19941.242,.01,0)
LOG^WL^^0;1^Q
"^DD",19941.24,19941.242,.01,"DT")
3080103
"^DIC",19941.2,19941.2,0)
CIA AUTHENTICATION^19941.2
"^DIC",19941.2,19941.2,0,"GL")
^CIANB(19941.2,
"^DIC",19941.2,"B","CIA AUTHENTICATION",19941.2)

"^DIC",19941.21,19941.21,0)
CIA EVENT TYPE^19941.21
"^DIC",19941.21,19941.21,0,"GL")
^CIANB(19941.21,
"^DIC",19941.21,"B","CIA EVENT TYPE",19941.21)

"^DIC",19941.22,19941.22,0)
CIA LISTENER^19941.22
"^DIC",19941.22,19941.22,0,"GL")
^CIANB(19941.22,
"^DIC",19941.22,"B","CIA LISTENER",19941.22)

"^DIC",19941.23,19941.23,0)
CIA EVENT LOG^19941.23
"^DIC",19941.23,19941.23,0,"GL")
^CIANB(19941.23,
"^DIC",19941.23,"B","CIA EVENT LOG",19941.23)

"^DIC",19941.24,19941.24,0)
CIA ACTIVITY LOG^19941.24
"^DIC",19941.24,19941.24,0,"GL")
^CIANB(19941.24,
"^DIC",19941.24,19941.24,"%",0)
^1.005^^0
"^DIC",19941.24,19941.24,"%D",0)
^^1^1^3080103.095644
"^DIC",19941.24,19941.24,"%D",1,0)
This file logs session activities such as RPC calls and remote events.
"^DIC",19941.24,"B","CIA ACTIVITY LOG",19941.24)

**INSTALL NAME**
CAREWEB FRAMEWORK 1.0
"BLD",8485,0)
CAREWEB FRAMEWORK 1.0^CAREWEB FRAMEWORK^0^3140321^n
"BLD",8485,4,0)
^9.64PA^19941.21^2
"BLD",8485,4,999.1,0)
999.1
"BLD",8485,4,999.1,222)
y^y^f^^n^^y^o^n
"BLD",8485,4,999.1,224)
I $$SCRN^RGCWKDTP(Y,1)
"BLD",8485,4,19941.21,0)
19941.21
"BLD",8485,4,19941.21,222)
n^y^f^^y^^y^o^n
"BLD",8485,4,19941.21,224)
I $$SCRN^RGCWKDTP(Y,5)
"BLD",8485,4,"B",999.1,999.1)

"BLD",8485,4,"B",19941.21,19941.21)

"BLD",8485,6.3)
40
"BLD",8485,"ABPKG")
n
"BLD",8485,"INI")
PRE^RGCWKDIN
"BLD",8485,"INIT")
POST^RGCWKDIN
"BLD",8485,"KRN",0)
^9.67PA^8994^20
"BLD",8485,"KRN",.4,0)
.4
"BLD",8485,"KRN",.401,0)
.401
"BLD",8485,"KRN",.402,0)
.402
"BLD",8485,"KRN",.403,0)
.403
"BLD",8485,"KRN",.5,0)
.5
"BLD",8485,"KRN",.84,0)
.84
"BLD",8485,"KRN",3.6,0)
3.6
"BLD",8485,"KRN",3.8,0)
3.8
"BLD",8485,"KRN",9.2,0)
9.2
"BLD",8485,"KRN",9.8,0)
9.8
"BLD",8485,"KRN",9.8,"NM",0)
^9.68A^5^5
"BLD",8485,"KRN",9.8,"NM",1,0)
RGCWFPAR^^0^B11632488
"BLD",8485,"KRN",9.8,"NM",2,0)
RGCWFRPC^^0^B3411017
"BLD",8485,"KRN",9.8,"NM",3,0)
RGCWFSER^^0^B13171657
"BLD",8485,"KRN",9.8,"NM",4,0)
RGCWFUSR^^0^B12812527
"BLD",8485,"KRN",9.8,"NM",5,0)
RGCWFUTL^^0^B7701648
"BLD",8485,"KRN",9.8,"NM","B","RGCWFPAR",1)

"BLD",8485,"KRN",9.8,"NM","B","RGCWFRPC",2)

"BLD",8485,"KRN",9.8,"NM","B","RGCWFSER",3)

"BLD",8485,"KRN",9.8,"NM","B","RGCWFUSR",4)

"BLD",8485,"KRN",9.8,"NM","B","RGCWFUTL",5)

"BLD",8485,"KRN",19,0)
19
"BLD",8485,"KRN",19,"NM",0)
^9.68A^6^5
"BLD",8485,"KRN",19,"NM",2,0)
RGCWF MANAGER^^0
"BLD",8485,"KRN",19,"NM",3,0)
RGCWF SHOW USERS^^0
"BLD",8485,"KRN",19,"NM",4,0)
RGCWF SHUTDOWN ABORT^^0
"BLD",8485,"KRN",19,"NM",5,0)
RGCWF SHUTDOWN START^^0
"BLD",8485,"KRN",19,"NM",6,0)
RGCWF CAREWEB FRAMEWORK^^0
"BLD",8485,"KRN",19,"NM","B","RGCWF CAREWEB FRAMEWORK",6)

"BLD",8485,"KRN",19,"NM","B","RGCWF MANAGER",2)

"BLD",8485,"KRN",19,"NM","B","RGCWF SHOW USERS",3)

"BLD",8485,"KRN",19,"NM","B","RGCWF SHUTDOWN ABORT",4)

"BLD",8485,"KRN",19,"NM","B","RGCWF SHUTDOWN START",5)

"BLD",8485,"KRN",19.1,0)
19.1
"BLD",8485,"KRN",19.1,"NM",0)
^9.68A^2^2
"BLD",8485,"KRN",19.1,"NM",1,0)
RGCWF DESIGNER^^0
"BLD",8485,"KRN",19.1,"NM",2,0)
RGCWF MANAGER^^0
"BLD",8485,"KRN",19.1,"NM","B","RGCWF DESIGNER",1)

"BLD",8485,"KRN",19.1,"NM","B","RGCWF MANAGER",2)

"BLD",8485,"KRN",101,0)
101
"BLD",8485,"KRN",101,"NM",0)
^9.68A^^0
"BLD",8485,"KRN",409.61,0)
409.61
"BLD",8485,"KRN",771,0)
771
"BLD",8485,"KRN",779.2,0)
779.2
"BLD",8485,"KRN",870,0)
870
"BLD",8485,"KRN",8989.51,0)
8989.51
"BLD",8485,"KRN",8989.51,"NM",0)
^9.68A^13^12
"BLD",8485,"KRN",8989.51,"NM",1,0)
RGCWF.INITIAL.SECTION^^0
"BLD",8485,"KRN",8989.51,"NM",2,0)
RGCWF.LAYOUT.ASSOCIATION^^0
"BLD",8485,"KRN",8989.51,"NM",3,0)
RGCWF.LAYOUT.PRIVATE^^0
"BLD",8485,"KRN",8989.51,"NM",4,0)
RGCWF.LAYOUT.SHARED^^0
"BLD",8485,"KRN",8989.51,"NM",6,0)
RGCWF.PATIENT.FORCE.SELECT^^0
"BLD",8485,"KRN",8989.51,"NM",7,0)
RGCWF.PATIENT.LIST.DATES^^0
"BLD",8485,"KRN",8989.51,"NM",8,0)
RGCWF.PATIENT.LIST.FAVORITES^^0
"BLD",8485,"KRN",8989.51,"NM",9,0)
RGCWF.PATIENT.LIST.MRU^^0
"BLD",8485,"KRN",8989.51,"NM",10,0)
RGCWF.PATIENT.LIST.MRU.SIZE^^0
"BLD",8485,"KRN",8989.51,"NM",11,0)
RGCWF.PATIENT.LIST.PERSONAL^^0
"BLD",8485,"KRN",8989.51,"NM",12,0)
RGCWF.SAVED.RESPONSES^^0
"BLD",8485,"KRN",8989.51,"NM",13,0)
RGCWF.THEME^^0
"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.INITIAL.SECTION",1)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.LAYOUT.ASSOCIATION",2)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.LAYOUT.PRIVATE",3)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.LAYOUT.SHARED",4)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.PATIENT.FORCE.SELECT",6)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.PATIENT.LIST.DATES",7)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.PATIENT.LIST.FAVORITES",8)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.PATIENT.LIST.MRU",9)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.PATIENT.LIST.MRU.SIZE",10)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.PATIENT.LIST.PERSONAL",11)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.SAVED.RESPONSES",12)

"BLD",8485,"KRN",8989.51,"NM","B","RGCWF.THEME",13)

"BLD",8485,"KRN",8989.52,0)
8989.52
"BLD",8485,"KRN",8989.52,"NM",0)
^9.68A^^0
"BLD",8485,"KRN",8994,0)
8994
"BLD",8485,"KRN",8994,"NM",0)
^9.68A^11^26
"BLD",8485,"KRN",8994,"NM",1,0)
RGCWFPAR GETPAR^^0
"BLD",8485,"KRN",8994,"NM",2,0)
RGCWFPAR GETPARLI^^0
"BLD",8485,"KRN",8994,"NM",3,0)
RGCWFPAR GETPARPF^^0
"BLD",8485,"KRN",8994,"NM",4,0)
RGCWFPAR GETPARWP^^0
"BLD",8485,"KRN",8994,"NM",5,0)
RGCWFPAR SETPAR^^0
"BLD",8485,"KRN",8994,"NM",6,0)
RGCWFRPC DISV^^0
"BLD",8485,"KRN",8994,"NM",7,0)
RGCWFRPC GETIDX^^0
"BLD",8485,"KRN",8994,"NM",8,0)
RGCWFRPC GETVAR^^0
"BLD",8485,"KRN",8994,"NM",9,0)
RGCWFRPC PATCH^^0
"BLD",8485,"KRN",8994,"NM",10,0)
RGCWFRPC SETVAR^^0
"BLD",8485,"KRN",8994,"NM",11,0)
RGCWFPAR GETINST^^0
"BLD",8485,"KRN",8994,"NM",12,0)
RGCWFRPC VERSION^^0
"BLD",8485,"KRN",8994,"NM",13,0)
RGCWFSER GETBYIEN^^0
"BLD",8485,"KRN",8994,"NM",14,0)
RGCWFSER GETBYKEY^^0
"BLD",8485,"KRN",8994,"NM",15,0)
RGCWFSER GETBYLST^^0
"BLD",8485,"KRN",8994,"NM",16,0)
RGCWFUSR GETALRTS^^0
"BLD",8485,"KRN",8994,"NM",17,0)
RGCWFUSR GETPRIV^^0
"BLD",8485,"KRN",8994,"NM",18,0)
RGCWFUSR HASESIG^^0
"BLD",8485,"KRN",8994,"NM",19,0)
RGCWFUSR HASFMCD^^0
"BLD",8485,"KRN",8994,"NM",20,0)
RGCWFUSR HASKEYS^^0
"BLD",8485,"KRN",8994,"NM",21,0)
RGCWFUSR LOOKUP^^0
"BLD",8485,"KRN",8994,"NM",22,0)
RGCWFUSR STORESIG^^0
"BLD",8485,"KRN",8994,"NM",23,0)
RGCWFUSR VALIDPSW^^0
"BLD",8485,"KRN",8994,"NM",24,0)
RGCWFUSR VALIDSIG^^0
"BLD",8485,"KRN",8994,"NM",25,0)
RGCWFUSR VALINSIG^^0
"BLD",8485,"KRN",8994,"NM",26,0)
RGCWFPAR GETTMPL^^0
"BLD",8485,"KRN",8994,"NM","B","RGCWFPAR GETINST",11)

"BLD",8485,"KRN",8994,"NM","B","RGCWFPAR GETPAR",1)

"BLD",8485,"KRN",8994,"NM","B","RGCWFPAR GETPARLI",2)

"BLD",8485,"KRN",8994,"NM","B","RGCWFPAR GETPARPF",3)

"BLD",8485,"KRN",8994,"NM","B","RGCWFPAR GETPARWP",4)

"BLD",8485,"KRN",8994,"NM","B","RGCWFPAR GETTMPL",26)

"BLD",8485,"KRN",8994,"NM","B","RGCWFPAR SETPAR",5)

"BLD",8485,"KRN",8994,"NM","B","RGCWFRPC DISV",6)

"BLD",8485,"KRN",8994,"NM","B","RGCWFRPC GETIDX",7)

"BLD",8485,"KRN",8994,"NM","B","RGCWFRPC GETVAR",8)

"BLD",8485,"KRN",8994,"NM","B","RGCWFRPC PATCH",9)

"BLD",8485,"KRN",8994,"NM","B","RGCWFRPC SETVAR",10)

"BLD",8485,"KRN",8994,"NM","B","RGCWFRPC VERSION",12)

"BLD",8485,"KRN",8994,"NM","B","RGCWFSER GETBYIEN",13)

"BLD",8485,"KRN",8994,"NM","B","RGCWFSER GETBYKEY",14)

"BLD",8485,"KRN",8994,"NM","B","RGCWFSER GETBYLST",15)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR GETALRTS",16)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR GETPRIV",17)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR HASESIG",18)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR HASFMCD",19)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR HASKEYS",20)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR LOOKUP",21)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR STORESIG",22)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR VALIDPSW",23)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR VALIDSIG",24)

"BLD",8485,"KRN",8994,"NM","B","RGCWFUSR VALINSIG",25)

"BLD",8485,"KRN","B",.4,.4)

"BLD",8485,"KRN","B",.401,.401)

"BLD",8485,"KRN","B",.402,.402)

"BLD",8485,"KRN","B",.403,.403)

"BLD",8485,"KRN","B",.5,.5)

"BLD",8485,"KRN","B",.84,.84)

"BLD",8485,"KRN","B",3.6,3.6)

"BLD",8485,"KRN","B",3.8,3.8)

"BLD",8485,"KRN","B",9.2,9.2)

"BLD",8485,"KRN","B",9.8,9.8)

"BLD",8485,"KRN","B",19,19)

"BLD",8485,"KRN","B",19.1,19.1)

"BLD",8485,"KRN","B",101,101)

"BLD",8485,"KRN","B",409.61,409.61)

"BLD",8485,"KRN","B",771,771)

"BLD",8485,"KRN","B",779.2,779.2)

"BLD",8485,"KRN","B",870,870)

"BLD",8485,"KRN","B",8989.51,8989.51)

"BLD",8485,"KRN","B",8989.52,8989.52)

"BLD",8485,"KRN","B",8994,8994)

"BLD",8485,"PRE")
RGCWKDIN
"BLD",8485,"PRET")
PRETRANS^RGCWKDTP
"BLD",8485,"QUES",0)
^9.62^^
"BLD",8485,"REQB",0)
^9.611^^
"DATA",999.1,3,0)
Institution^4
"DATA",999.1,3,10,0)
^999.11^2^2
"DATA",999.1,3,10,1,0)
name^.01^F
"DATA",999.1,3,10,2,0)
abbreviation^.05^F
"DATA",999.1,6,0)
PropDefinition^8989.51
"DATA",999.1,6,10,0)
^999.11^6^6
"DATA",999.1,6,10,1,0)
name^.01^F
"DATA",999.1,6,10,2,0)
displayName^.02^F
"DATA",999.1,6,10,3,0)
multiValued^.03^B
"DATA",999.1,6,10,4,0)
readOnly^.06^B
"DATA",999.1,6,10,5,0)
dataType^1.1^R
"DATA",999.1,6,10,6,0)
description^20^W
"DATA",999.1,9,0)
User^200
"DATA",999.1,9,10,0)
^999.11^3^3
"DATA",999.1,9,10,1,0)
fullName^.01^F
"DATA",999.1,9,10,2,0)
birthDate^5^D
"DATA",999.1,9,10,3,0)
institution^^C
"DATA",999.1,9,10,3,10)
D GETBYIEN(.DATA,"Institution",DUZ(2),PN)
"DATA",19941.21,1,0)
STATUS^0^60^^^1
"DATA",19941.21,1,1)
D BRDCAST^CIANBEVT(TYPE,$$ENTRY^CIAUDT($H))
"DATA",19941.21,1,99,0)
^19941.2199^2^2^3021028^^^^
"DATA",19941.21,1,99,1,0)
Sample VistAtion event monitor:  returns system date/time as a STATUS event.
"DATA",19941.21,1,99,2,0)
Causes system date/time to be displayed on status line in application.
"DATA",19941.21,2,0)
TRACE
"DATA",19941.21,4,0)
MESSAGE
"DATA",19941.21,4,99,1,0)
Causes the Visual Interface Manager to display the associated message text in
"DATA",19941.21,4,99,2,0)
a modeless dialog.  The event stub format is:
"DATA",19941.21,4,99,3,0)

"DATA",19941.21,4,99,4,0)
    <caption text>^<message text>
"DATA",19941.21,4,99,5,0)

"DATA",19941.21,4,99,6,0)
where caption text appears in the dialog's title bar and message text appears
"DATA",19941.21,4,99,7,0)
in a scrollable region within the dialog.
"DATA",19941.21,5,0)
DESKTOP.SHUTDOWN
"DATA",19941.21,5,20,0)
^19941.212P^1^1
"DATA",19941.21,5,20,1,0)
512
"DATA",19941.21,5,99,0)
^19941.2199^14^14^3140319^
"DATA",19941.21,5,99,1,0)
Causes a CareWeb application to initiate or abort an automatic shutdown
"DATA",19941.21,5,99,2,0)
sequence.  
"DATA",19941.21,5,99,3,0)

"DATA",19941.21,5,99,4,0)
To initiate a shutdown send the following event:
"DATA",19941.21,5,99,5,0)

"DATA",19941.21,5,99,6,0)
DESKTOP.SHUTDOWN.START     <delay>
"DATA",19941.21,5,99,7,0)

"DATA",19941.21,5,99,8,0)
Where delay is the delay in milliseconds before the shutdown is executed.
"DATA",19941.21,5,99,9,0)

"DATA",19941.21,5,99,10,0)
To abort a shutdown in progress, send the following event:
"DATA",19941.21,5,99,11,0)

"DATA",19941.21,5,99,12,0)
DESKTOP.SHUTDOWN.ABORT     <message>
"DATA",19941.21,5,99,13,0)

"DATA",19941.21,5,99,14,0)
Where message is the popup message that is displayed to the user.
"DATA",19941.21,7,0)
LOGIN^^^1^5^^
"DATA",19941.21,7,99,0)
^19941.2199^13^13^3021105^
"DATA",19941.21,7,99,1,0)
Broadcast to all sessions when a new session logs in.
"DATA",19941.21,7,99,2,0)

"DATA",19941.21,7,99,3,0)
Stub format consists of the following ^-delimited fields:
"DATA",19941.21,7,99,4,0)

"DATA",19941.21,7,99,5,0)
       Session Identifier
"DATA",19941.21,7,99,6,0)
       Session Expiration Date (FM)
"DATA",19941.21,7,99,7,0)
       Session Creation Date (FM)
"DATA",19941.21,7,99,8,0)
       User DUZ
"DATA",19941.21,7,99,9,0)
       Workstation ID
"DATA",19941.21,7,99,10,0)
       User's Full Name
"DATA",19941.21,7,99,11,0)
       Assigned Resource Device
"DATA",19941.21,7,99,12,0)
       Login Date/Time ($H)
"DATA",19941.21,7,99,13,0)

"DATA",19941.21,8,0)
LOGOUT^^^1^5^^
"DATA",19941.21,8,99,0)
^^13^13^3001117.084247
"DATA",19941.21,8,99,1,0)
Broadcast to all sessions when a session logs out.
"DATA",19941.21,8,99,2,0)

"DATA",19941.21,8,99,3,0)
Stub format consists of the following ^-delimited fields:
"DATA",19941.21,8,99,4,0)

"DATA",19941.21,8,99,5,0)
       Session Identifier
"DATA",19941.21,8,99,6,0)
       Session Expiration Date (FM)
"DATA",19941.21,8,99,7,0)
       Session Creation Date (FM)
"DATA",19941.21,8,99,8,0)
       User DUZ
"DATA",19941.21,8,99,9,0)
       Workstation ID
"DATA",19941.21,8,99,10,0)
       User's Full Name
"DATA",19941.21,8,99,11,0)
       Assigned Resource Device
"DATA",19941.21,8,99,12,0)
       Login Date/Time ($H)
"DATA",19941.21,8,99,13,0)

"DATA",19941.21,11,0)
CCOW^1
"DATA",19941.21,11,99,0)
^^1^1^3010328.222333
"DATA",19941.21,11,99,1,0)
Used internally to notify subscribers of changes in CCOW status.
"DATA",19941.21,13,0)
SUBSCRIBE^^^^^^
"DATA",19941.21,13,99,0)
^19941.2199^4^4^3020416^^
"DATA",19941.21,13,99,1,0)
Broadcast whenever a session subscribes to any event.  The format is:
"DATA",19941.21,13,99,2,0)
 
"DATA",19941.21,13,99,3,0)
Event type: SUBSCRIBE.<event name>
"DATA",19941.21,13,99,4,0)
Event stub: <session id>^<session data>
"DATA",19941.21,14,0)
UNSUBSCRIBE^^^^^^
"DATA",19941.21,14,99,0)
^^4^4^3020311^
"DATA",19941.21,14,99,1,0)
Broadcast whenever a sessions unsubscribes from any event.  The format is:
"DATA",19941.21,14,99,2,0)
 
"DATA",19941.21,14,99,3,0)
Event type: UNSUBSCRIBE.<event name>
"DATA",19941.21,14,99,4,0)
Event stub: <session id>^<session data>
"DATA",19941.21,15,0)
BRINGTOFRONT
"DATA",19941.21,15,99,0)
^^3^3^3020311^
"DATA",19941.21,15,99,1,0)
Causes the Visual Interface Manager to bring the requested component
"DATA",19941.21,15,99,2,0)
to the forefront of the user interface.  The event stub is the 
"DATA",19941.21,15,99,3,0)
programmatic identifier of the affected component.
"DATA",19941.21,16,0)
INFO
"DATA",19941.21,16,99,0)
^^23^23^3060221.004532
"DATA",19941.21,16,99,1,0)
Causes the Visual Interface Manager to display a balloon alert.  The
"DATA",19941.21,16,99,2,0)
event stub format is:
"DATA",19941.21,16,99,3,0)
 
"DATA",19941.21,16,99,4,0)
  EventType^EventData^Hint|Caption|Icon|Duration^Text
"DATA",19941.21,16,99,5,0)
 
"DATA",19941.21,16,99,6,0)
where
"DATA",19941.21,16,99,7,0)

"DATA",19941.21,16,99,8,0)
EventType is the event to be fired when the user chooses to act upon the 
"DATA",19941.21,16,99,9,0)
alert.
"DATA",19941.21,16,99,10,0)

"DATA",19941.21,16,99,11,0)
EventData is the data associated with the above EventType.
"DATA",19941.21,16,99,12,0)

"DATA",19941.21,16,99,13,0)
Hint is the hint text displayed when the mouse cursor hovers over the action
"DATA",19941.21,16,99,14,0)
button.
"DATA",19941.21,16,99,15,0)

"DATA",19941.21,16,99,16,0)
Caption is the optional caption text that appears above the message text.
"DATA",19941.21,16,99,17,0)

"DATA",19941.21,16,99,18,0)
Icon is the type of icon to be displayed where I=information, W=warning, and
"DATA",19941.21,16,99,19,0)
E=Error.
"DATA",19941.21,16,99,20,0)

"DATA",19941.21,16,99,21,0)
Duration is the time in seconds that the alert will persist if not acted upon.
"DATA",19941.21,16,99,22,0)

"DATA",19941.21,16,99,23,0)
Text is the text of the message to be displayed.
"DATA",19941.21,21,0)
CONTEXT
"DATA",19941.21,21,99,0)
^19941.2199^12^12^3020822^
"DATA",19941.21,21,99,1,0)
Fire this event to request a context change for the specified context.
"DATA",19941.21,21,99,2,0)

"DATA",19941.21,21,99,3,0)
This event may be used by the server process to control the client's context.  
"DATA",19941.21,21,99,4,0)
Note that the client has the option of rejecting any context change request. 
"DATA",19941.21,21,99,5,0)
Therefore, the server cannot assume that context change request was honored.
"DATA",19941.21,21,99,6,0)

"DATA",19941.21,21,99,7,0)
The following subtypes are currently supported for this event:
"DATA",19941.21,21,99,8,0)

"DATA",19941.21,21,99,9,0)
       Subtype              Stub                       Description
"DATA",19941.21,21,99,10,0)
       -------              ----                       -----------
"DATA",19941.21,21,99,11,0)
   CONTEXT.PATIENT       Patient IEN             Changes the patient context.
"DATA",19941.21,21,99,12,0)
   CONTEXT.ENCOUNTER     Visit IEN or VisitStr   Changes the encounter context.
"FIA",999.1)
CAREWEB SERIALIZATION
"FIA",999.1,0)
^RGCWF(999.1,
"FIA",999.1,0,0)
999.1
"FIA",999.1,0,1)
y^y^f^^n^^y^o^n
"FIA",999.1,0,10)

"FIA",999.1,0,11)
I $$SCRN^RGCWKDTP(Y,1)
"FIA",999.1,0,"RLRO")

"FIA",999.1,0,"VR")
1.0^CAREWEB FRAMEWORK
"FIA",999.1,999.1)
0
"FIA",999.1,999.11)
0
"FIA",19941.21)
CIA EVENT TYPE
"FIA",19941.21,0)
^CIANB(19941.21,
"FIA",19941.21,0,0)
19941.21
"FIA",19941.21,0,1)
n^y^f^^y^^y^o^n
"FIA",19941.21,0,10)

"FIA",19941.21,0,11)
I $$SCRN^RGCWKDTP(Y,5)
"FIA",19941.21,0,"RLRO")

"FIA",19941.21,0,"VR")
1.0^CAREWEB FRAMEWORK
"FIA",19941.21,19941.21)
0
"FIA",19941.21,19941.212)
0
"FIA",19941.21,19941.2121)
0
"FIA",19941.21,19941.2199)
0
"INI")
PRE^RGCWKDIN
"INIT")
POST^RGCWKDIN
"KRN",19,11318,-1)
0^6
"KRN",19,11318,0)
RGCWF CAREWEB FRAMEWORK^CareWeb Framework^^B^^^^^^^^
"KRN",19,11318,99)
63265,61715
"KRN",19,11318,99.1)
58703,41699
"KRN",19,11318,"RPC",0)
^19.05P^^0
"KRN",19,11318,"U")
CAREWEB FRAMEWORK
"KRN",19,11319,-1)
0^2
"KRN",19,11319,0)
RGCWF MANAGER^CareWeb Management^^M^^RGCWF MANAGER^^^^^^^^^^^1
"KRN",19,11319,10,0)
^19.01IP^4^4
"KRN",19,11319,10,2,0)
11320^1^1
"KRN",19,11319,10,2,"^")
RGCWF SHOW USERS
"KRN",19,11319,10,3,0)
11321^2^2
"KRN",19,11319,10,3,"^")
RGCWF SHUTDOWN ABORT
"KRN",19,11319,10,4,0)
11322^3^3
"KRN",19,11319,10,4,"^")
RGCWF SHUTDOWN START
"KRN",19,11319,26)
D MNUHDR^CIAU()
"KRN",19,11319,99)
63265,61715
"KRN",19,11319,"U")
CAREWEB MANAGEMENT
"KRN",19,11320,-1)
0^3
"KRN",19,11320,0)
RGCWF SHOW USERS^Show Current CareWeb Users^^A^^^^^^^^^^1
"KRN",19,11320,20)
D MNUEXEC^CIAU("D ^%ZIS Q:POP  D SHOWSESS^RGCWFUTL(),^%ZISC",1)
"KRN",19,11320,"U")
SHOW CURRENT CAREWEB USERS
"KRN",19,11321,-1)
0^4
"KRN",19,11321,0)
RGCWF SHUTDOWN ABORT^Abort CareWeb Shutdown^^A^^RGCWF MANAGER^^^^^^^^1
"KRN",19,11321,20)
D MNUEXEC^CIAU("D ABORTSD^RGCWFUTL",1)
"KRN",19,11321,"U")
ABORT CAREWEB SHUTDOWN
"KRN",19,11322,-1)
0^5
"KRN",19,11322,0)
RGCWF SHUTDOWN START^Shutdown CareWeb^^A^^RGCWF MANAGER^^^^^^^^1
"KRN",19,11322,20)
D MNUEXEC^CIAU("D SHUTDOWN^RGCWFUTL",1)
"KRN",19,11322,25)

"KRN",19,11322,"U")
SHUTDOWN CAREWEB
"KRN",19.1,511,-1)
0^1
"KRN",19.1,511,0)
RGCWF DESIGNER^CWF design mode access.
"KRN",19.1,512,-1)
0^2
"KRN",19.1,512,0)
RGCWF MANAGER^CareWeb management access.
"KRN",8989.51,209,-1)
0^11
"KRN",8989.51,209,0)
RGCWF.PATIENT.LIST.PERSONAL^User Personal List^1^Enter List Name
"KRN",8989.51,209,1)
W
"KRN",8989.51,209,6)
F
"KRN",8989.51,209,7)
K:'$L(X) X
"KRN",8989.51,209,30,0)
^8989.513I^1^1
"KRN",8989.51,209,30,1,0)
1^200
"KRN",8989.51,213,-1)
0^9
"KRN",8989.51,213,0)
RGCWF.PATIENT.LIST.MRU^Recent Patient Selections^0
"KRN",8989.51,213,1)
W
"KRN",8989.51,213,6)
F
"KRN",8989.51,213,30,0)
^8989.513I^1^1
"KRN",8989.51,213,30,1,0)
1^200
"KRN",8989.51,226,-1)
0^7
"KRN",8989.51,226,0)
RGCWF.PATIENT.LIST.DATES^Default date ranges:^^^Edit Value?
"KRN",8989.51,226,1)
W^^Enter Y to edit, @ to delete.
"KRN",8989.51,226,2)
S:"Yy"'[Y Y=""
"KRN",8989.51,226,30,0)
^8989.513I^1^1
"KRN",8989.51,226,30,1,0)
100^4.2
"KRN",8989.51,228,-1)
0^1
"KRN",8989.51,228,0)
RGCWF.INITIAL.SECTION^Initial component to display.^1
"KRN",8989.51,228,1)
F
"KRN",8989.51,228,6)
F
"KRN",8989.51,228,30,0)
^8989.513I^2^2
"KRN",8989.51,228,30,1,0)
10^200
"KRN",8989.51,228,30,2,0)
20^4.2
"KRN",8989.51,229,-1)
0^4
"KRN",8989.51,229,0)
RGCWF.LAYOUT.SHARED^^1
"KRN",8989.51,229,1)
W
"KRN",8989.51,229,6)
F
"KRN",8989.51,229,30,0)
^8989.513I^1^1
"KRN",8989.51,229,30,1,0)
10^4.2
"KRN",8989.51,231,-1)
0^2
"KRN",8989.51,231,0)
RGCWF.LAYOUT.ASSOCIATION^^1
"KRN",8989.51,231,1)
F
"KRN",8989.51,231,6)
F
"KRN",8989.51,231,30,0)
^8989.513I^1^1
"KRN",8989.51,231,30,1,0)
10^4.2
"KRN",8989.51,245,-1)
0^8
"KRN",8989.51,245,0)
RGCWF.PATIENT.LIST.FAVORITES^Favorite patient list settings^1^Favorite
"KRN",8989.51,245,1)
W
"KRN",8989.51,245,6)
F
"KRN",8989.51,245,30,0)
^8989.513I^1^1
"KRN",8989.51,245,30,1,0)
10^200
"KRN",8989.51,251,-1)
0^10
"KRN",8989.51,251,0)
RGCWF.PATIENT.LIST.MRU.SIZE^Maximum list size for MRU list.^0
"KRN",8989.51,251,1)
N
"KRN",8989.51,251,30,0)
^8989.513I^1^1
"KRN",8989.51,251,30,1,0)
10^200
"KRN",8989.51,261,-1)
0^13
"KRN",8989.51,261,0)
RGCWF.THEME^Default CareWeb theme.^0
"KRN",8989.51,261,1)
F
"KRN",8989.51,261,30,0)
^8989.513I^2^2
"KRN",8989.51,261,30,1,0)
10^4.2
"KRN",8989.51,261,30,2,0)
5^200
"KRN",8989.51,263,-1)
0^12
"KRN",8989.51,263,0)
RGCWF.SAVED.RESPONSES^Saved dialog responses.^1
"KRN",8989.51,263,1)
F
"KRN",8989.51,263,6)
F
"KRN",8989.51,263,30,0)
^8989.513I^1^1
"KRN",8989.51,263,30,1,0)
10^200
"KRN",8989.51,268,-1)
0^6
"KRN",8989.51,268,0)
RGCWF.PATIENT.FORCE.SELECT^Force patient selection at start.^0^^Force patient selection at startup?
"KRN",8989.51,268,1)
Y^^Forces patient selection at application startup.
"KRN",8989.51,268,6)
N
"KRN",8989.51,268,20,0)
^^1^1^3110609.171648
"KRN",8989.51,268,20,1,0)
If yes, patient selection is forced at application startup.
"KRN",8989.51,268,30,0)
^8989.513I^3^3
"KRN",8989.51,268,30,1,0)
100^200
"KRN",8989.51,268,30,2,0)
200^4
"KRN",8989.51,268,30,3,0)
300^4.2
"KRN",8989.51,291,-1)
0^3
"KRN",8989.51,291,0)
RGCWF.LAYOUT.PRIVATE^^1
"KRN",8989.51,291,1)
W
"KRN",8989.51,291,6)
F
"KRN",8989.51,291,30,0)
^8989.513I^1^1
"KRN",8989.51,291,30,1,0)
10^4.2
"KRN",8994,2606,-1)
0^20
"KRN",8994,2606,0)
RGCWFUSR HASKEYS^HASKEYS^RGCWFUSR^1
"KRN",8994,2607,-1)
0^6
"KRN",8994,2607,0)
RGCWFRPC DISV^DISV^RGCWFRPC^1
"KRN",8994,2608,-1)
0^1
"KRN",8994,2608,0)
RGCWFPAR GETPAR^GETPAR^RGCWFPAR^1
"KRN",8994,2609,-1)
0^5
"KRN",8994,2609,0)
RGCWFPAR SETPAR^SETPAR^RGCWFPAR^1
"KRN",8994,2610,-1)
0^7
"KRN",8994,2610,0)
RGCWFRPC GETIDX^GETIDX^RGCWFRPC^4^^^^1
"KRN",8994,2611,-1)
0^12
"KRN",8994,2611,0)
RGCWFRPC VERSION^VERSION^RGCWFRPC^1
"KRN",8994,2612,-1)
0^16
"KRN",8994,2612,0)
RGCWFUSR GETALRTS^GETALRTS^RGCWFUSR^4^^^^1
"KRN",8994,2613,-1)
0^2
"KRN",8994,2613,0)
RGCWFPAR GETPARLI^GETPARLI^RGCWFPAR^4^^^^1
"KRN",8994,2614,-1)
0^4
"KRN",8994,2614,0)
RGCWFPAR GETPARWP^GETPARWP^RGCWFPAR^4^^^^1
"KRN",8994,2615,-1)
0^23
"KRN",8994,2615,0)
RGCWFUSR VALIDPSW^VALIDPSW^RGCWFUSR^1
"KRN",8994,2616,-1)
0^10
"KRN",8994,2616,0)
RGCWFRPC SETVAR^SETVAR^RGCWFRPC^1
"KRN",8994,2617,-1)
0^8
"KRN",8994,2617,0)
RGCWFRPC GETVAR^GETVAR^RGCWFRPC^2^^^^1
"KRN",8994,2618,-1)
0^9
"KRN",8994,2618,0)
RGCWFRPC PATCH^PATCH^RGCWFRPC^1
"KRN",8994,2618,1,0)
^8994.01^1^1^3051219.20334
"KRN",8994,2618,1,1,0)
Returns true if specified patch is present.
"KRN",8994,2618,2,0)
^8994.02A^1^1
"KRN",8994,2618,2,1,0)
PATCH^1^^1^1
"KRN",8994,2618,2,1,1,0)
^^1^1^3051219.203412
"KRN",8994,2618,2,1,1,1,0)
Patch designation to be checked. 
"KRN",8994,2618,2,"B","PATCH",1)

"KRN",8994,2618,2,"PARAMSEQ",1,1)

"KRN",8994,2618,3,0)
^^1^1^3051219.203433
"KRN",8994,2618,3,1,0)
Boolean return type is true if specified patch is present.
"KRN",8994,2619,-1)
0^19
"KRN",8994,2619,0)
RGCWFUSR HASFMCD^HASFMCD^RGCWFUSR^1
"KRN",8994,2620,-1)
0^21
"KRN",8994,2620,0)
RGCWFUSR LOOKUP^LOOKUP^RGCWFUSR^2
"KRN",8994,2621,-1)
0^24
"KRN",8994,2621,0)
RGCWFUSR VALIDSIG^VALIDSIG^RGCWFUSR^1
"KRN",8994,2622,-1)
0^22
"KRN",8994,2622,0)
RGCWFUSR STORESIG^STORESIG^RGCWFUSR^1
"KRN",8994,2623,-1)
0^25
"KRN",8994,2623,0)
RGCWFUSR VALINSIG^VALINSIG^RGCWFUSR^1
"KRN",8994,2624,-1)
0^18
"KRN",8994,2624,0)
RGCWFUSR HASESIG^HASESIG^RGCWFUSR^1
"KRN",8994,2625,-1)
0^13
"KRN",8994,2625,0)
RGCWFSER GETBYIEN^GETBYIEN^RGCWFSER^2^^^^1
"KRN",8994,2626,-1)
0^14
"KRN",8994,2626,0)
RGCWFSER GETBYKEY^GETBYKEY^RGCWFSER^2^^^^1
"KRN",8994,2627,-1)
0^15
"KRN",8994,2627,0)
RGCWFSER GETBYLST^GETBYLST^RGCWFSER^2^^^^1
"KRN",8994,2628,-1)
0^17
"KRN",8994,2628,0)
RGCWFUSR GETPRIV^GETPRIV^RGCWFUSR^2^^^^1
"KRN",8994,2629,-1)
0^3
"KRN",8994,2629,0)
RGCWFPAR GETPARPF^GETPARPF^RGCWFPAR^2^^^^1
"KRN",8994,2630,-1)
0^26
"KRN",8994,2630,0)
RGCWFPAR GETTMPL^GETTMPL^RGCWFPAR^2^^^^1
"KRN",8994,2682,-1)
0^11
"KRN",8994,2682,0)
RGCWFPAR GETINST^GETINST^RGCWFPAR^2^^^^1
"MBREQ")
1
"ORD",3,19.1)
19.1;3;;;KEY^XPDTA1;KEYF1^XPDIA1;KEYE1^XPDIA1;KEYF2^XPDIA1;;KEYDEL^XPDIA1
"ORD",3,19.1,0)
SECURITY KEY
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"ORD",20,8989.51)
8989.51;20;;;PAR1E1^XPDTA2;PAR1F1^XPDIA3;PAR1E1^XPDIA3;PAR1F2^XPDIA3;;PAR1DEL^XPDIA3(%)
"ORD",20,8989.51,0)
PARAMETER DEFINITION
"PGL",19941.21,0,7,7)
EVENT PROTOCOL^*P101'^ORD(101,^0;7^S DIC("S")="I $E(^(0),1,4)=""CIAV"",$P(^(0),U,4)=""X""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"PKG",220,-1)
1^1
"PKG",220,0)
CAREWEB FRAMEWORK^RGCW^CareWeb Framework Support.
"PKG",220,5)
RI/CBMI
"PKG",220,20,0)
^9.402P^^
"PKG",220,22,0)
^9.49I^1^1
"PKG",220,22,1,0)
1.0^3140321^3140319^1
"PKG",220,"DEV")
DKM/RI/CBMI
"PKG",220,"VERSION")
1.0
"PRE")
RGCWKDIN
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
6
"RTN","RGCWFPAR")
0^1^B11632488
"RTN","RGCWFPAR",1,0)
RGCWFPAR ;RI/CBMI/DKM - Parameter management ;18-Mar-2014 17:24;DKM
"RTN","RGCWFPAR",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 40
"RTN","RGCWFPAR",3,0)
 ; Load a parameter template
"RTN","RGCWFPAR",4,0)
GETTMPL(DATA,TPL) ;
"RTN","RGCWFPAR",5,0)
 N PAR,SEQ,CNT,LP,X0,X1
"RTN","RGCWFPAR",6,0)
 S:TPL'=+TPL TPL=+$$FIND1^DIC(8989.52,,"X",TPL)
"RTN","RGCWFPAR",7,0)
 I '$D(^XTV(8989.52,TPL,0)) S DATA(1)="-1^Not found" Q
"RTN","RGCWFPAR",8,0)
 S CNT=1,SEQ="",X0=^XTV(8989.52,TPL,0),X1=+$P(X0,U,3)
"RTN","RGCWFPAR",9,0)
 S X1=$S(X1=4:"DIV",X1=4.2:"SYS",X1=9.4:"PKG",X1=49:"SRV",X1=200:"USR",1:"")
"RTN","RGCWFPAR",10,0)
 I '$L(X1) S DATA(1)="-2^Bad entity" Q
"RTN","RGCWFPAR",11,0)
 S $P(X0,U,3)=X1,DATA(1)=TPL_U_X0
"RTN","RGCWFPAR",12,0)
 F  S SEQ=$O(^XTV(8989.52,TPL,10,"B",SEQ)),LP=0 Q:'$L(SEQ)  D
"RTN","RGCWFPAR",13,0)
 .F  S LP=$O(^XTV(8989.52,TPL,10,"B",SEQ,LP)) Q:'LP  D
"RTN","RGCWFPAR",14,0)
 ..S PAR=+$P($G(^XTV(8989.52,TPL,10,LP,0)),U,2)
"RTN","RGCWFPAR",15,0)
 ..S X0=$$GETATTR(PAR)
"RTN","RGCWFPAR",16,0)
 ..S:$L(X0) CNT=CNT+1,DATA(CNT)=X0
"RTN","RGCWFPAR",17,0)
 Q
"RTN","RGCWFPAR",18,0)
 ; Return parameter attributes
"RTN","RGCWFPAR",19,0)
GETATTR(PAR) ;
"RTN","RGCWFPAR",20,0)
 N X0,X1
"RTN","RGCWFPAR",21,0)
 I $L(PAR),PAR'=+PAR S PAR=$O(^XTV(8989.51,"B",PAR,0))
"RTN","RGCWFPAR",22,0)
 S X0=$G(^XTV(8989.51,PAR,0)),X1=$G(^(1))
"RTN","RGCWFPAR",23,0)
 Q $S($L(X0):PAR_U_$P(X0,U)_U_$P(X0,U,2)_U_X1,1:"")
"RTN","RGCWFPAR",24,0)
 ; Return parameter instances
"RTN","RGCWFPAR",25,0)
GETINST(DATA,PAR,ENT) ;
"RTN","RGCWFPAR",26,0)
 N CNT,LP
"RTN","RGCWFPAR",27,0)
 S:PAR'=+PAR PAR=$O(^XTV(8989.51,"B",PAR,0))
"RTN","RGCWFPAR",28,0)
 D ENTDFLT^XPAR1(.ENT)
"RTN","RGCWFPAR",29,0)
 S CNT=0,LP=""
"RTN","RGCWFPAR",30,0)
 F  S LP=$O(^XTV(8989.5,"AC",PAR,ENT,LP)) Q:'$L(LP)  D
"RTN","RGCWFPAR",31,0)
 .S CNT=CNT+1,DATA(CNT)=LP
"RTN","RGCWFPAR",32,0)
 Q
"RTN","RGCWFPAR",33,0)
 ; Retrieve a package parameter value
"RTN","RGCWFPAR",34,0)
PARAM(PAR,MIN,MAX) ;
"RTN","RGCWFPAR",35,0)
 S VAL=+$$GET^XPAR("ALL",PAR)
"RTN","RGCWFPAR",36,0)
 S:VAL<MIN VAL=MIN
"RTN","RGCWFPAR",37,0)
 S:VAL>MAX VAL=MAX
"RTN","RGCWFPAR",38,0)
 Q VAL
"RTN","RGCWFPAR",39,0)
 ; RPC: Returns value for named parameter
"RTN","RGCWFPAR",40,0)
GETPAR(DATA,PARAM,ENT,INST,FMT,USR) ;
"RTN","RGCWFPAR",41,0)
 N X
"RTN","RGCWFPAR",42,0)
 S ENT=$$ENT(PARAM,.ENT,.USR),DATA=$S($L(ENT):$$GET^XPAR(ENT,PARAM,.INST,.FMT),1:"")
"RTN","RGCWFPAR",43,0)
 Q
"RTN","RGCWFPAR",44,0)
 ; RPC: Get multivalued parameter values
"RTN","RGCWFPAR",45,0)
GETPARLI(DATA,PARAM,ENT,FMT,USR) ;
"RTN","RGCWFPAR",46,0)
 N TMP,X
"RTN","RGCWFPAR",47,0)
 D GETLST^XPAR(.TMP,$$ENT(PARAM,.ENT,.USR),PARAM,.FMT,.ERR)
"RTN","RGCWFPAR",48,0)
 I $G(ERR) K TMP S TMP=ERR
"RTN","RGCWFPAR",49,0)
 E  S TMP=""
"RTN","RGCWFPAR",50,0)
 S DATA=$$TMPGBL^RGCWFRPC
"RTN","RGCWFPAR",51,0)
 M @DATA=TMP
"RTN","RGCWFPAR",52,0)
 Q
"RTN","RGCWFPAR",53,0)
 ; RPC: Get WP parameter value
"RTN","RGCWFPAR",54,0)
GETPARWP(DATA,PARAM,ENT,INST,USR) ;
"RTN","RGCWFPAR",55,0)
 N TMP,X
"RTN","RGCWFPAR",56,0)
 D GETWP^XPAR(.TMP,$$ENT(PARAM,.ENT,.USR),PARAM,.INST,.ERR)
"RTN","RGCWFPAR",57,0)
 I $G(ERR) K TMP S TMP=ERR
"RTN","RGCWFPAR",58,0)
 E  S TMP=""
"RTN","RGCWFPAR",59,0)
 S DATA=$$TMPGBL^RGCWFRPC
"RTN","RGCWFPAR",60,0)
 M @DATA=TMP
"RTN","RGCWFPAR",61,0)
 Q
"RTN","RGCWFPAR",62,0)
 ; Return parameters matching prefix
"RTN","RGCWFPAR",63,0)
GETPARPF(DATA,PFX) ;
"RTN","RGCWFPAR",64,0)
 N LP,CNT,LEN
"RTN","RGCWFPAR",65,0)
 S LP=PFX,CNT=0,LEN=$L(PFX)
"RTN","RGCWFPAR",66,0)
 F  D:$O(^XTV(8989.51,"B",LP,0))  S LP=$O(^XTV(8989.51,"B",LP)) Q:$E(LP,1,LEN)'=PFX
"RTN","RGCWFPAR",67,0)
 .S CNT=CNT+1,DATA(CNT)=LP
"RTN","RGCWFPAR",68,0)
 Q
"RTN","RGCWFPAR",69,0)
 ; Return entity list (if ENT not specified)
"RTN","RGCWFPAR",70,0)
ENT(PAR,ENT,USR) ;EP
"RTN","RGCWFPAR",71,0)
 N I,X,Y,Z
"RTN","RGCWFPAR",72,0)
 Q:$L($G(ENT)) ENT
"RTN","RGCWFPAR",73,0)
 I $L(PAR),PAR'=+PAR S PAR=$O(^XTV(8989.51,"B",PAR,0))
"RTN","RGCWFPAR",74,0)
 Q:'PAR ""
"RTN","RGCWFPAR",75,0)
 S X="",I=0,USR=$G(USR,DUZ)
"RTN","RGCWFPAR",76,0)
 F  S I=+$O(^XTV(8989.51,PAR,30,"B",I)) Q:'I  S Y=$O(^(I,0)) D:Y
"RTN","RGCWFPAR",77,0)
 .S Y=$P($G(^XTV(8989.518,+$P($G(^XTV(8989.51,PAR,30,Y,0)),U,2),0)),U,2)
"RTN","RGCWFPAR",78,0)
 .Q:'$L(Y)
"RTN","RGCWFPAR",79,0)
 .I "DIV^SYS^PKG"[Y S X=X_U_Y Q
"RTN","RGCWFPAR",80,0)
 .I Y="USR" S X=X_U_"USR.`"_USR Q
"RTN","RGCWFPAR",81,0)
 .I Y="SRV" S Z=+$G(^VA(200,USR,5)) S:Z X=X_U_"SRV.`"_Z Q
"RTN","RGCWFPAR",82,0)
 .I Y="OTL" Q                                                          ; OE/RR TEAM
"RTN","RGCWFPAR",83,0)
 .I Y="TEA" Q                                                          ; TEAM
"RTN","RGCWFPAR",84,0)
 .I Y="CLS" D  Q
"RTN","RGCWFPAR",85,0)
 ..S Z=0
"RTN","RGCWFPAR",86,0)
 ..F  S Z=$O(^USR(8930.3,"AUC",USR,Z)) Q:'Z  D CLS(Z)
"RTN","RGCWFPAR",87,0)
 .I Y="LOC",$G(CIA("UID")) D  Q
"RTN","RGCWFPAR",88,0)
 ..S Z=+$$GETVAR^CIANBUTL("ENCOUNTER.ID.ALTERNATEVISITID",,"CONTEXT.ENCOUNTER")
"RTN","RGCWFPAR",89,0)
 ..S:Z X=X_U_"LOC.`"_Z
"RTN","RGCWFPAR",90,0)
 Q $E(X,2,$L(X))
"RTN","RGCWFPAR",91,0)
 ; Append user class memberships to entity list
"RTN","RGCWFPAR",92,0)
CLS(Z) N Y
"RTN","RGCWFPAR",93,0)
 S X=X_U_"CLS.`"_Z,Y=0
"RTN","RGCWFPAR",94,0)
 F  S Y=$O(^USR(8930,"AD",Z,Y)) Q:'Y  D CLS(Y)
"RTN","RGCWFPAR",95,0)
 Q
"RTN","RGCWFPAR",96,0)
 ; RPC: Changes value for named parameter
"RTN","RGCWFPAR",97,0)
SETPAR(DATA,PARAM,VAL,ENT,INST) ;
"RTN","RGCWFPAR",98,0)
 D EN^XPAR($G(ENT,"PKG"),PARAM,$G(INST,1),.VAL,.DATA)
"RTN","RGCWFPAR",99,0)
 Q
"RTN","RGCWFRPC")
0^2^B3411017
"RTN","RGCWFRPC",1,0)
RGCWFRPC ;RI/CBMI/DKM - Miscellaneous RPC calls ;15-Mar-2014 11:56;DKM
"RTN","RGCWFRPC",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 40
"RTN","RGCWFRPC",3,0)
 ; RPC: Get/set DISV entry for selected file/IEN
"RTN","RGCWFRPC",4,0)
 ; If IEN is specified, entry is set
"RTN","RGCWFRPC",5,0)
 ; Returned as IEN^.01 internal value
"RTN","RGCWFRPC",6,0)
DISV(DATA,FILE,IEN) ;
"RTN","RGCWFRPC",7,0)
 S FILE=$$ROOT^DILFD(+FILE)
"RTN","RGCWFRPC",8,0)
 I FILE="" S DATA=0 Q
"RTN","RGCWFRPC",9,0)
 S:$G(IEN) ^DISV(DUZ,FILE)=IEN
"RTN","RGCWFRPC",10,0)
 S DATA=+$G(^DISV(DUZ,FILE))
"RTN","RGCWFRPC",11,0)
 S:DATA $P(DATA,U,2)=$P($G(@(FILE_DATA_",0)")),U)
"RTN","RGCWFRPC",12,0)
 Q
"RTN","RGCWFRPC",13,0)
 ; RPC: Return version of package
"RTN","RGCWFRPC",14,0)
VERSION(DATA,PKG) ;
"RTN","RGCWFRPC",15,0)
 S DATA=$$VERSION^XPDUTL(PKG)
"RTN","RGCWFRPC",16,0)
 Q
"RTN","RGCWFRPC",17,0)
 ; RPC: Return true if patch installed
"RTN","RGCWFRPC",18,0)
PATCH(DATA,PATCH) ;
"RTN","RGCWFRPC",19,0)
 S DATA=$$PATCH^XPDUTL(PATCH)
"RTN","RGCWFRPC",20,0)
 Q
"RTN","RGCWFRPC",21,0)
 ; RPC: Get stored variable(s)
"RTN","RGCWFRPC",22,0)
GETVAR(DATA,LIST,NMSP) ;
"RTN","RGCWFRPC",23,0)
 N CNT
"RTN","RGCWFRPC",24,0)
 S:$L($G(LIST)) LIST(-99)=LIST
"RTN","RGCWFRPC",25,0)
 S LIST="",CNT=0
"RTN","RGCWFRPC",26,0)
 F  S LIST=$O(LIST(LIST)) Q:'$L(LIST)  D
"RTN","RGCWFRPC",27,0)
 .S CNT=CNT+1,DATA(CNT)=LIST(LIST)_"="_$$GETVAR^CIANBUTL(LIST(LIST),,.NMSP)
"RTN","RGCWFRPC",28,0)
 Q
"RTN","RGCWFRPC",29,0)
 ; RPC: Set stored variable(s)
"RTN","RGCWFRPC",30,0)
SETVAR(DATA,LIST,NMSP,RESET) ;
"RTN","RGCWFRPC",31,0)
 S:$L($G(LIST)) LIST(-99)=LIST
"RTN","RGCWFRPC",32,0)
 S LIST="",DATA=0
"RTN","RGCWFRPC",33,0)
 D:$G(RESET) CLRVAR^CIANBUTL(.NMSP)
"RTN","RGCWFRPC",34,0)
 F  S LIST=$O(LIST(LIST)) Q:'$L(LIST)  D
"RTN","RGCWFRPC",35,0)
 .S DATA=DATA+1
"RTN","RGCWFRPC",36,0)
 .D SETVAR^CIANBUTL($P(LIST(LIST),"="),$P(LIST(LIST),"=",2,9999),.NMSP)
"RTN","RGCWFRPC",37,0)
 Q
"RTN","RGCWFRPC",38,0)
 ; RPC: Get .01 field values from a file
"RTN","RGCWFRPC",39,0)
GETIDX(DATA,FN,FLG) ;
"RTN","RGCWFRPC",40,0)
 N X,I,Z
"RTN","RGCWFRPC",41,0)
 S DATA=$$TMPGBL,X=0,FN=$$ROOT^DILFD(FN,,1),I=0,FLG=+$G(FLG)
"RTN","RGCWFRPC",42,0)
 I $L(FN) F  S X=$O(@FN@(X)) Q:'X  D
"RTN","RGCWFRPC",43,0)
 .S Z=$P($G(@FN@(X,0)),U)
"RTN","RGCWFRPC",44,0)
 .S:$L(Z) I=I+1,@DATA@(I)=$S(FLG:Z,1:X_U_Z)
"RTN","RGCWFRPC",45,0)
 Q
"RTN","RGCWFRPC",46,0)
 ; Compare version # VER1 with VER2
"RTN","RGCWFRPC",47,0)
 ; Returns -1 if <; 0 if =; 1 if >
"RTN","RGCWFRPC",48,0)
VERCMP(VER1,VER2,PC) ;EP
"RTN","RGCWFRPC",49,0)
 N X,Y,V1,V2
"RTN","RGCWFRPC",50,0)
 S:'$G(PC) PC=4
"RTN","RGCWFRPC",51,0)
 S Y=0
"RTN","RGCWFRPC",52,0)
 F X=1:1:PC D  Q:Y
"RTN","RGCWFRPC",53,0)
 .S V1=+$P(VER1,".",X),V2=+$P(VER2,".",X)
"RTN","RGCWFRPC",54,0)
 .S:V1'=V2 Y=$S(V1>V2:1,1:-1)
"RTN","RGCWFRPC",55,0)
 Q Y
"RTN","RGCWFRPC",56,0)
 ; Get temp global reference
"RTN","RGCWFRPC",57,0)
TMPGBL(X) ;EP
"RTN","RGCWFRPC",58,0)
 K ^TMP("RGCWFRPC"_$G(X),$J) Q $NA(^($J))
"RTN","RGCWFSER")
0^3^B13171657
"RTN","RGCWFSER",1,0)
RGCWFSER ;RI/CBMI/DKM - JSON Serialization Support ;17-Mar-2014 15:59;DKM
"RTN","RGCWFSER",2,0)
 ;;1.0;RGCW;;14-March-2014;Build 40
"RTN","RGCWFSER",3,0)
 ;=================================================================
"RTN","RGCWFSER",4,0)
 ; RPC: Returns a serialized form of the requested object.
"RTN","RGCWFSER",5,0)
 ; Object identified by IEN.
"RTN","RGCWFSER",6,0)
GETBYIEN(DATA,ALIAS,IEN,PROP) ;
"RTN","RGCWFSER",7,0)
 I $D(IEN)>9 D  Q
"RTN","RGCWFSER",8,0)
 .N LP,DLM
"RTN","RGCWFSER",9,0)
 .D ADD("[")
"RTN","RGCWFSER",10,0)
 .S (LP,DLM)=""
"RTN","RGCWFSER",11,0)
 .F  S LP=$O(IEN(LP)) Q:'$L(LP)  D
"RTN","RGCWFSER",12,0)
 ..D ADD(DLM)
"RTN","RGCWFSER",13,0)
 ..S DLM=","
"RTN","RGCWFSER",14,0)
 ..D GETBYIEN(.DATA,ALIAS,IEN(LP),.PROP)
"RTN","RGCWFSER",15,0)
 .D ADD("]")
"RTN","RGCWFSER",16,0)
 N PFX,SER,RTN
"RTN","RGCWFSER",17,0)
 S PFX=$S($D(PROP):","_$$QT(PROP)_":",1:"")_"{"
"RTN","RGCWFSER",18,0)
 D:'$D(PROP) PUTQT("@class",ALIAS)
"RTN","RGCWFSER",19,0)
 D PUT("domainId",IEN)
"RTN","RGCWFSER",20,0)
 S SER=+$O(^RGCWF(999.1,"B",ALIAS,0))
"RTN","RGCWFSER",21,0)
 S RTN=$G(^RGCWF(999.1,SER,1))
"RTN","RGCWFSER",22,0)
 S RTN=$S($L(RTN):RTN_"(.DATA,IEN)",1:"AUTO(.DATA,IEN,SER)")
"RTN","RGCWFSER",23,0)
 D @RTN
"RTN","RGCWFSER",24,0)
 D ADD("}")
"RTN","RGCWFSER",25,0)
 Q
"RTN","RGCWFSER",26,0)
 ; RPC: Returns the serialized form of the requested object.
"RTN","RGCWFSER",27,0)
 ; Object identified by table and unique key
"RTN","RGCWFSER",28,0)
GETBYKEY(DATA,ALIAS,KEY,TABLE) ;
"RTN","RGCWFSER",29,0)
 D GETBYIEN(.DATA,ALIAS,$$FIND1^DIC($$TABLE(TABLE),,"X",KEY))
"RTN","RGCWFSER",30,0)
 Q
"RTN","RGCWFSER",31,0)
 ; RPC: Returns a list of entries from a table
"RTN","RGCWFSER",32,0)
GETBYLST(DATA,ALIAS,LST,TABLE) ;
"RTN","RGCWFSER",33,0)
 N ARY,GBL,IEN,FLG
"RTN","RGCWFSER",34,0)
 S TABLE=$$TABLE(TABLE),GBL=$$ROOT^DILFD(TABLE,,1),IEN=0
"RTN","RGCWFSER",35,0)
 S ARY=$S($D(LST)>1:"LST",1:GBL),FLG=0
"RTN","RGCWFSER",36,0)
 D ADD("[")
"RTN","RGCWFSER",37,0)
 F  S IEN=$O(@ARY@(IEN)) Q:'IEN  D:$D(@GBL@(IEN,0))
"RTN","RGCWFSER",38,0)
 .D:FLG ADD(",")
"RTN","RGCWFSER",39,0)
 .D GETBYIEN(.DATA,ALIAS,IEN)
"RTN","RGCWFSER",40,0)
 .S FLG=1
"RTN","RGCWFSER",41,0)
 D ADD("]")
"RTN","RGCWFSER",42,0)
 Q
"RTN","RGCWFSER",43,0)
TABLE(T) Q $S(T=+T:T,1:+$O(^DIC("B",TABLE,0)))
"RTN","RGCWFSER",44,0)
 ; Table-driven serialization
"RTN","RGCWFSER",45,0)
AUTO(DATA,IEN,SER) ;
"RTN","RGCWFSER",46,0)
 N PROP,LP,FILE,IENS,FLD,VALS
"RTN","RGCWFSER",47,0)
 S FILE=$P(^RGCWF(999.1,SER,0),U,2),IENS=IEN_",",FLD=""
"RTN","RGCWFSER",48,0)
 M PROP=^RGCWF(999.1,SER,10)
"RTN","RGCWFSER",49,0)
 F LP=0:0 S LP=$O(PROP(LP)) Q:'LP  D
"RTN","RGCWFSER",50,0)
 .N FN
"RTN","RGCWFSER",51,0)
 .S FN=$P(PROP(LP,0),U,2)
"RTN","RGCWFSER",52,0)
 .Q:'$L(FN)
"RTN","RGCWFSER",53,0)
 .S:FN'=+FN FN=$$FLDNUM^DILFD(FILE,FN),$P(PROP(LP,0),U,2)=FN
"RTN","RGCWFSER",54,0)
 .S FLD=FLD_$S($L(FLD):";",1:"")_FN
"RTN","RGCWFSER",55,0)
 D GETS^DIQ(FILE,IENS,FLD,"IE","VALS")
"RTN","RGCWFSER",56,0)
 F LP=0:0 S LP=$O(PROP(LP)) Q:'LP  D
"RTN","RGCWFSER",57,0)
 .N PN,FN,TP,VL,CTL,X
"RTN","RGCWFSER",58,0)
 .S X=PROP(LP,0),PN=$P(X,U),FN=$P(X,U,2),TP=$P(X,U,3),CTL=$G(PROP(LP,10))
"RTN","RGCWFSER",59,0)
 .M:$L(FN) VL=VALS(FILE,IENS,FN)
"RTN","RGCWFSER",60,0)
 .D:$L(TP) @("AUTO"_TP)
"RTN","RGCWFSER",61,0)
 Q
"RTN","RGCWFSER",62,0)
 ; Free text
"RTN","RGCWFSER",63,0)
AUTOF D PUTQT(PN,$G(VL("E")))
"RTN","RGCWFSER",64,0)
 Q
"RTN","RGCWFSER",65,0)
 ; Boolean
"RTN","RGCWFSER",66,0)
AUTOB D PUTBL(PN,$G(VL("I")))
"RTN","RGCWFSER",67,0)
 Q
"RTN","RGCWFSER",68,0)
 ; Date
"RTN","RGCWFSER",69,0)
AUTOD D PUTDT(PN,$G(VL("I")))
"RTN","RGCWFSER",70,0)
 Q
"RTN","RGCWFSER",71,0)
 ; Raw
"RTN","RGCWFSER",72,0)
AUTOR D PUTQT(PN,$G(VL("I")))
"RTN","RGCWFSER",73,0)
 Q
"RTN","RGCWFSER",74,0)
 ; Word processing
"RTN","RGCWFSER",75,0)
AUTOW K VL("E"),VL("I")
"RTN","RGCWFSER",76,0)
 D PUTAR(PN,.VL)
"RTN","RGCWFSER",77,0)
 Q
"RTN","RGCWFSER",78,0)
 ; Custom
"RTN","RGCWFSER",79,0)
AUTOC X CTL
"RTN","RGCWFSER",80,0)
 Q
"RTN","RGCWFSER",81,0)
 ; Multiple (TODO)
"RTN","RGCWFSER",82,0)
AUTOM Q
"RTN","RGCWFSER",83,0)
 ; Object
"RTN","RGCWFSER",84,0)
AUTOO D:$G(VL("I")) GETBYIEN(.DATA,CTL,$G(VL("I")),PN)
"RTN","RGCWFSER",85,0)
 Q
"RTN","RGCWFSER",86,0)
 ; Put a name/value pair to output buffer, enclosing
"RTN","RGCWFSER",87,0)
 ; value in quotes.
"RTN","RGCWFSER",88,0)
PUTQT(NM,VL) ;
"RTN","RGCWFSER",89,0)
 D PUT(NM,$$QT(VL))
"RTN","RGCWFSER",90,0)
 Q
"RTN","RGCWFSER",91,0)
 ; Put a name/value pair to output buffer
"RTN","RGCWFSER",92,0)
PUT(NM,VL) ;
"RTN","RGCWFSER",93,0)
 D ADD(PFX_$$QT(NM)_":"_VL)
"RTN","RGCWFSER",94,0)
 S PFX=","
"RTN","RGCWFSER",95,0)
 Q
"RTN","RGCWFSER",96,0)
 ; Put a date value to output buffer
"RTN","RGCWFSER",97,0)
PUTDT(NM,DT) ;
"RTN","RGCWFSER",98,0)
 D:DT PUTQT(NM,DT)
"RTN","RGCWFSER",99,0)
 Q
"RTN","RGCWFSER",100,0)
 ; Put a boolean value to output buffer
"RTN","RGCWFSER",101,0)
PUTBL(NM,BL) ;
"RTN","RGCWFSER",102,0)
 D PUT(NM,$S(BL:"true",1:"false"))
"RTN","RGCWFSER",103,0)
 Q
"RTN","RGCWFSER",104,0)
 ; Put a set value to output buffer
"RTN","RGCWFSER",105,0)
PUTST(NM,VL,ST) ;
"RTN","RGCWFSER",106,0)
 D PUTQT(NM,$$SET^CIAU(VL,ST))
"RTN","RGCWFSER",107,0)
 Q
"RTN","RGCWFSER",108,0)
 ; Put an array to output buffer
"RTN","RGCWFSER",109,0)
PUTAR(NM,AR) ;
"RTN","RGCWFSER",110,0)
 N DL,LP
"RTN","RGCWFSER",111,0)
 S DL="",LP=$NA(AR)
"RTN","RGCWFSER",112,0)
 D PUT(NM,"[")
"RTN","RGCWFSER",113,0)
 F  S LP=$Q(@LP) Q:'$L(LP)  D
"RTN","RGCWFSER",114,0)
 .D ADD(DL_$$QT(@LP))
"RTN","RGCWFSER",115,0)
 .S DL=","
"RTN","RGCWFSER",116,0)
 D ADD("]")
"RTN","RGCWFSER",117,0)
 Q
"RTN","RGCWFSER",118,0)
 ; Add to output buffer
"RTN","RGCWFSER",119,0)
ADD(X) S DATA($O(DATA(""),-1)+1)=X
"RTN","RGCWFSER",120,0)
 Q
"RTN","RGCWFSER",121,0)
 ; Enclose value in quotes (escape contents if necessary)
"RTN","RGCWFSER",122,0)
QT(X) N QT,FM,TO,LP
"RTN","RGCWFSER",123,0)
 S QT=""""
"RTN","RGCWFSER",124,0)
 S FM="\"_QT_"/"_$C(8,12,10,13,9)
"RTN","RGCWFSER",125,0)
 S TO="\"_QT_"/bfnrt"
"RTN","RGCWFSER",126,0)
 F LP=1:1:$L(FM) D ESC(.X,$E(FM,LP),$E(TO,LP))
"RTN","RGCWFSER",127,0)
 Q QT_X_QT
"RTN","RGCWFSER",128,0)
ESC(X,C,R) S:X[C X=$$SUBST^CIAU(X,C,"\"_R)
"RTN","RGCWFSER",129,0)
 Q
"RTN","RGCWFSER",130,0)
 ; Serialize a service category
"RTN","RGCWFSER",131,0)
SSVCCAT(DATA,IEN) ;
"RTN","RGCWFSER",132,0)
 N SC,X
"RTN","RGCWFSER",133,0)
 D GETLST^XPAR(.SC,"ALL","RGCWENCX VISIT TYPES","I")
"RTN","RGCWFSER",134,0)
 F X=0:0 S X=$O(SC(X)) Q:'X  Q:$A(SC(X))=IEN
"RTN","RGCWFSER",135,0)
 S X=$S(X:SC(X),1:"~Unknown~Unknown service category.")
"RTN","RGCWFSER",136,0)
 D PUTQT("shortDescription",$P(X,"~",2))
"RTN","RGCWFSER",137,0)
 D PUTQT("longDescription",$P(X,"~",3))
"RTN","RGCWFSER",138,0)
 Q
"RTN","RGCWFUSR")
0^4^B12812527
"RTN","RGCWFUSR",1,0)
RGCWFUSR ;RI/CBMI/DKM - User utility methods;17-Mar-2014 17:03;DKM
"RTN","RGCWFUSR",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 40
"RTN","RGCWFUSR",3,0)
 ; Returns true if user has key
"RTN","RGCWFUSR",4,0)
 ; KEY = Security key (or parameter if begins with "@")
"RTN","RGCWFUSR",5,0)
 ; USR = IEN of user to check (defaults to current user)
"RTN","RGCWFUSR",6,0)
HASKEY(KEY,USR) ;EP
"RTN","RGCWFUSR",7,0)
 Q:'$L(KEY) 1
"RTN","RGCWFUSR",8,0)
 S USR=$G(USR,DUZ)
"RTN","RGCWFUSR",9,0)
 I $E(KEY)="@" D GETPAR^RGCWFPAR(.KEY,$E(KEY,2,999),,,,USR) Q ''KEY
"RTN","RGCWFUSR",10,0)
 Q ''$D(^XUSEC(KEY,+USR))
"RTN","RGCWFUSR",11,0)
 ; RPC: Check for multiple keys
"RTN","RGCWFUSR",12,0)
HASKEYS(DATA,KEYS,USR) ;EP
"RTN","RGCWFUSR",13,0)
 N PC
"RTN","RGCWFUSR",14,0)
 S DATA=""
"RTN","RGCWFUSR",15,0)
 F PC=1:1:$L(KEYS,U) S $P(DATA,U,PC)=$$HASKEY($P(KEYS,U,PC),.USR)
"RTN","RGCWFUSR",16,0)
 Q
"RTN","RGCWFUSR",17,0)
 ; RPC: Returns true if password is valid
"RTN","RGCWFUSR",18,0)
VALIDPSW(DATA,PSW,USER) ;EP
"RTN","RGCWFUSR",19,0)
 S PSW=$$DECRYP^XUSRB1(PSW),USER=+$G(USER,DUZ)
"RTN","RGCWFUSR",20,0)
 S:'$$GET^XPAR("SYS","XU VC CASE SENSITIVE") PSW=$$UP^XLFSTR(PSW)
"RTN","RGCWFUSR",21,0)
 S DATA=$$EN^XUSHSH(PSW)=$P($G(^VA(200,USER,.1)),U,2)
"RTN","RGCWFUSR",22,0)
 Q
"RTN","RGCWFUSR",23,0)
 ; RPC: Returns roles and privileges
"RTN","RGCWFUSR",24,0)
GETPRIV(DATA,USER) ;EP
"RTN","RGCWFUSR",25,0)
 N TMP,LP,IDX,PAR
"RTN","RGCWFUSR",26,0)
 S USER=+$GET(USER,DUZ)
"RTN","RGCWFUSR",27,0)
 D WHATIS^USRLM(USER,"TMP")
"RTN","RGCWFUSR",28,0)
 S LP="",IDX=1
"RTN","RGCWFUSR",29,0)
 F  S LP=$O(TMP(LP)) Q:'$L(LP)  D
"RTN","RGCWFUSR",30,0)
 .S DATA(IDX)="ROLE_"_$P(TMP(LP),U,3),IDX=IDX+1
"RTN","RGCWFUSR",31,0)
 S LP=""
"RTN","RGCWFUSR",32,0)
 F  S LP=$O(^XUSEC(LP)) Q:'$L(LP)  D
"RTN","RGCWFUSR",33,0)
 .S:$$HASKEY(LP,USER) DATA(IDX)="PRIV_"_LP,IDX=IDX+1
"RTN","RGCWFUSR",34,0)
 S LP=""
"RTN","RGCWFUSR",35,0)
 F  S LP=$O(^XTV(8989.51,"D","XUSEC",LP)) Q:'LP  D
"RTN","RGCWFUSR",36,0)
 .S PAR=$P($G(^XTV(8989.51,LP,0)),U)
"RTN","RGCWFUSR",37,0)
 .I $L(PAR),$$HASKEY("@"_PAR,USER) S DATA(IDX)="PARM_"_PAR,IDX=IDX+1
"RTN","RGCWFUSR",38,0)
 Q
"RTN","RGCWFUSR",39,0)
 ; Return a set of names from the NEW PERSON file
"RTN","RGCWFUSR",40,0)
LOOKUP(DATA,FROM,DIR,KEY,DATE,FLT,CNT) ;
"RTN","RGCWFUSR",41,0)
 ; .DATA=returned list
"RTN","RGCWFUSR",42,0)
 ;  FROM=text to $O from
"RTN","RGCWFUSR",43,0)
 ;  DIR=$O direction,
"RTN","RGCWFUSR",44,0)
 ;  KEY=screen users by security key (optional)
"RTN","RGCWFUSR",45,0)
 ;  DATE=checks for an active person class on this date (optional)
"RTN","RGCWFUSR",46,0)
 ;  FLT=any of: A=Active only, D=Current division only
"RTN","RGCWFUSR",47,0)
 ;  CNT=maximum # to return (defaults to 44)
"RTN","RGCWFUSR",48,0)
 N I,IEN
"RTN","RGCWFUSR",49,0)
 S I=0,CNT=$S($G(CNT)>0:+CNT,1:44),KEY=$G(KEY),DATE=$G(DATE),FLT=$G(FLT,"AD")
"RTN","RGCWFUSR",50,0)
 S:FLT FLT="A"                                                         ; Backward compatibility
"RTN","RGCWFUSR",51,0)
 I DATE,DATE'=+DATE S DATE=$$DT^CIAU(DATE) Q:DATE<0
"RTN","RGCWFUSR",52,0)
 F  S FROM=$O(^VA(200,"B",FROM),DIR),IEN=0 Q:FROM=""  D  Q:I'<CNT
"RTN","RGCWFUSR",53,0)
 .F  S IEN=$O(^VA(200,"B",FROM,IEN)) Q:'IEN  D
"RTN","RGCWFUSR",54,0)
 ..Q:IEN<1
"RTN","RGCWFUSR",55,0)
 ..Q:'$$HASKEY(KEY,IEN)
"RTN","RGCWFUSR",56,0)
 ..I FLT["A",'$$ACTIVE(IEN,DATE) Q                                     ; terminated user
"RTN","RGCWFUSR",57,0)
 ..I FLT["D",'$$INDIV(IEN) Q
"RTN","RGCWFUSR",58,0)
 ..S I=I+1,DATA(I)=IEN_U_FROM
"RTN","RGCWFUSR",59,0)
 Q
"RTN","RGCWFUSR",60,0)
 ; Return true if user was active on/before given date
"RTN","RGCWFUSR",61,0)
 ;   IEN = User IEN
"RTN","RGCWFUSR",62,0)
 ;   DAT = Date constraint
"RTN","RGCWFUSR",63,0)
ACTIVE(IEN,DAT) ;PEP - User active?
"RTN","RGCWFUSR",64,0)
 N X
"RTN","RGCWFUSR",65,0)
 I $G(DAT) N DT S DT=DAT\1
"RTN","RGCWFUSR",66,0)
 S X=$$ACTIVE^XUSER(IEN)
"RTN","RGCWFUSR",67,0)
 Q $S(X:+X,1:X=0)
"RTN","RGCWFUSR",68,0)
 ; Returns true if user in specified division
"RTN","RGCWFUSR",69,0)
 ; For users not assigned to any divisions, always returns true
"RTN","RGCWFUSR",70,0)
 ;   IEN = User IEN (defaults to DUZ)
"RTN","RGCWFUSR",71,0)
 ;   DIV = Division constraint (defaults to current division)
"RTN","RGCWFUSR",72,0)
INDIV(IEN,DIV) ;
"RTN","RGCWFUSR",73,0)
 N RTN
"RTN","RGCWFUSR",74,0)
 S:'$G(IEN) IEN=DUZ
"RTN","RGCWFUSR",75,0)
 S:'$D(DIV) DIV=DUZ(2)
"RTN","RGCWFUSR",76,0)
 Q $S('$$DIV4^XUSER(.RTN,IEN):1,1:$D(RTN(DIV)))
"RTN","RGCWFUSR",77,0)
 ; Returns true if valid electronic signature
"RTN","RGCWFUSR",78,0)
VALIDSIG(DATA,ESIG) ;
"RTN","RGCWFUSR",79,0)
 N X
"RTN","RGCWFUSR",80,0)
 S X=$$DECRYP^XUSRB1(ESIG)
"RTN","RGCWFUSR",81,0)
 D HASH^XUSHSHP
"RTN","RGCWFUSR",82,0)
 S DATA=X=$P($G(^VA(200,+DUZ,20)),U,4)
"RTN","RGCWFUSR",83,0)
 Q
"RTN","RGCWFUSR",84,0)
 ; Returns true if electronic signature code passes input transform
"RTN","RGCWFUSR",85,0)
VALINSIG(DATA,ESIG) ;
"RTN","RGCWFUSR",86,0)
 N X
"RTN","RGCWFUSR",87,0)
 S DATA=1
"RTN","RGCWFUSR",88,0)
 S X=$$DECRYP^XUSRB1(ESIG)
"RTN","RGCWFUSR",89,0)
 I $L(X)>20!($L(X)<6) S DATA="-1^Length must be between 6 and 20 characters." Q
"RTN","RGCWFUSR",90,0)
 I X'?.UNP S DATA="-2^Signature code can only contain uppercase letters, punctuation or numbers." Q
"RTN","RGCWFUSR",91,0)
 Q
"RTN","RGCWFUSR",92,0)
STORESIG(DATA,ESIG) ;
"RTN","RGCWFUSR",93,0)
 N X,LP,DA
"RTN","RGCWFUSR",94,0)
 S DA=DUZ
"RTN","RGCWFUSR",95,0)
 S DATA=0
"RTN","RGCWFUSR",96,0)
 S X=$$DECRYP^XUSRB1(ESIG)
"RTN","RGCWFUSR",97,0)
 D HASH^XUSHSHP  ;returns hashed value in X
"RTN","RGCWFUSR",98,0)
 L +^VA(200,DUZ):5
"RTN","RGCWFUSR",99,0)
 E  S DATA="-1^Unable to obtain lock on New Person File." Q
"RTN","RGCWFUSR",100,0)
 S $P(^VA(200,DUZ,20),U,4)=X
"RTN","RGCWFUSR",101,0)
 S LP=0 F  S LP=$O(^DD(200,20.4,1,LP)) Q:'LP  X ^(LP,1)  ; Fire DD Triggers
"RTN","RGCWFUSR",102,0)
 L -^VA(200,DUZ)
"RTN","RGCWFUSR",103,0)
 Q
"RTN","RGCWFUSR",104,0)
 ; Returns true if user has electronic signature code
"RTN","RGCWFUSR",105,0)
HASESIG(DATA) ;EP
"RTN","RGCWFUSR",106,0)
 S DATA=$L($P($G(^VA(200,DUZ,20)),U,4))>0
"RTN","RGCWFUSR",107,0)
 Q
"RTN","RGCWFUSR",108,0)
 ; Returns true if File Manager Access Code field contains code
"RTN","RGCWFUSR",109,0)
 ; If user has the '@' code, returns true regardless
"RTN","RGCWFUSR",110,0)
HASFMCD(DATA,CODE) ;
"RTN","RGCWFUSR",111,0)
 S DATA=$G(DUZ(0))["@"!($G(DUZ(0))[CODE)
"RTN","RGCWFUSR",112,0)
 Q
"RTN","RGCWFUTL")
0^5^B7701648
"RTN","RGCWFUTL",1,0)
RGCWFUTL ;RI/CBMI/DKM CareWeb Management Utilites;18-Mar-2014 18:39;DKM
"RTN","RGCWFUTL",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 40
"RTN","RGCWFUTL",3,0)
 ; Initiate shutdown sequence for applications
"RTN","RGCWFUTL",4,0)
SHUTDOWN N DELAY,MSG
"RTN","RGCWFUTL",5,0)
 W !,"Initiate CareWeb Shutdown Sequence",!!
"RTN","RGCWFUTL",6,0)
 D SHOWSESS()
"RTN","RGCWFUTL",7,0)
 W:$$GETLOGIN'="" "Note: shutdown has already been initiated.",!!
"RTN","RGCWFUTL",8,0)
 F  D  Q:$D(DELAY)
"RTN","RGCWFUTL",9,0)
 .R !,"# of seconds till shutdown (30 minimum): ",DELAY:DTIME,!
"RTN","RGCWFUTL",10,0)
 .E  S DELAY=U
"RTN","RGCWFUTL",11,0)
 .S DELAY=$TR(DELAY," ")
"RTN","RGCWFUTL",12,0)
 .Q:DELAY[U
"RTN","RGCWFUTL",13,0)
 .I DELAY["?" D  Q
"RTN","RGCWFUTL",14,0)
 ..K DELAY
"RTN","RGCWFUTL",15,0)
 ..W "Enter number of seconds before shutdown.",!
"RTN","RGCWFUTL",16,0)
 ..W "To specify time in minutes, follow number with letter M.",!
"RTN","RGCWFUTL",17,0)
 .S:DELAY?1.N1(1"M",1"m") DELAY=DELAY*60
"RTN","RGCWFUTL",18,0)
 .S DELAY=DELAY\1
"RTN","RGCWFUTL",19,0)
 .K:DELAY<30 DELAY
"RTN","RGCWFUTL",20,0)
 Q:DELAY[U
"RTN","RGCWFUTL",21,0)
 Q:'$$ASK^CIAU("Do you really want to shut down CareWeb in "_DELAY_" seconds")
"RTN","RGCWFUTL",22,0)
 D SDINIT(.MSG,DELAY,1)
"RTN","RGCWFUTL",23,0)
 W !!,MSG,!!
"RTN","RGCWFUTL",24,0)
 Q
"RTN","RGCWFUTL",25,0)
 ; Abort a shutdown sequence in progress
"RTN","RGCWFUTL",26,0)
ABORTSD N MSG
"RTN","RGCWFUTL",27,0)
 W !,"Abort CareWeb Shutdown and Enable Logins",!!
"RTN","RGCWFUTL",28,0)
 D SHOWSESS()
"RTN","RGCWFUTL",29,0)
 W:$$GETLOGIN="" "Note: a shutdown does not appear to be in progress.",!!
"RTN","RGCWFUTL",30,0)
 Q:'$$ASK^CIAU("Do you really want to abort any shutdowns in progress and enable logins")
"RTN","RGCWFUTL",31,0)
 D SDABORT(.MSG,1)
"RTN","RGCWFUTL",32,0)
 W !!,MSG,!!
"RTN","RGCWFUTL",33,0)
 Q
"RTN","RGCWFUTL",34,0)
 ; RPC: Initiate shutdown
"RTN","RGCWFUTL",35,0)
SDINIT(DATA,DELAY,LOCK,USR) ;
"RTN","RGCWFUTL",36,0)
 S DELAY=DELAY\1
"RTN","RGCWFUTL",37,0)
 I DELAY<30 S DATA="Invalid value for shutdown delay." Q
"RTN","RGCWFUTL",38,0)
 D:$G(LOCK) SETLOGIN("Application is currently offline.  Please try later.")
"RTN","RGCWFUTL",39,0)
 D BRDCAST^CIANBEVT("DESKTOP.SHUTDOWN.START",DELAY*1000,.USR)
"RTN","RGCWFUTL",40,0)
 S DATA="Shutdown sequence initiated.  "_$$SDMSG
"RTN","RGCWFUTL",41,0)
 Q
"RTN","RGCWFUTL",42,0)
 ; RPC: Abort shutdown
"RTN","RGCWFUTL",43,0)
SDABORT(DATA,UNLOCK,USR) ;
"RTN","RGCWFUTL",44,0)
 D BRDCAST^CIANBEVT("DESKTOP.SHUTDOWN.ABORT","Application shutdown has been aborted.  You may continue.",.USR)
"RTN","RGCWFUTL",45,0)
 D:$G(UNLOCK) SETLOGIN()
"RTN","RGCWFUTL",46,0)
 S DATA="Shutdown sequence aborted.  "_$$SDMSG
"RTN","RGCWFUTL",47,0)
 Q
"RTN","RGCWFUTL",48,0)
 ; Login status message
"RTN","RGCWFUTL",49,0)
SDMSG() Q "Logins are "_$S($L($$GETLOGIN):"disabled.",1:"enabled.")
"RTN","RGCWFUTL",50,0)
 ; Get inhibit login message
"RTN","RGCWFUTL",51,0)
GETLOGIN() ;
"RTN","RGCWFUTL",52,0)
 Q $$OPTMSG^CIANBUTL("RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWFUTL",53,0)
 ; Set inhibit login message
"RTN","RGCWFUTL",54,0)
SETLOGIN(MSG) ;
"RTN","RGCWFUTL",55,0)
 D OPTMSG^CIANBUTL("RGCWF CAREWEB FRAMEWORK",$G(MSG))
"RTN","RGCWFUTL",56,0)
 Q
"RTN","RGCWFUTL",57,0)
 ; RPC: Get/set inhibit login message
"RTN","RGCWFUTL",58,0)
MSGLOGIN(DATA,MSG) ;
"RTN","RGCWFUTL",59,0)
 I '$D(MSG) S DATA=$$GETLOGIN
"RTN","RGCWFUTL",60,0)
 E  D SETLOGIN(MSG)
"RTN","RGCWFUTL",61,0)
 Q
"RTN","RGCWFUTL",62,0)
 ; Show active CareWeb sessions
"RTN","RGCWFUTL",63,0)
SHOWSESS() ;
"RTN","RGCWFUTL",64,0)
 N X
"RTN","RGCWFUTL",65,0)
 S X=$$SHOWSESS^CIANBUTL("RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWFUTL",66,0)
 Q:$Q X
"RTN","RGCWFUTL",67,0)
 Q
"RTN","RGCWKDIN")
0^^B31823827
"RTN","RGCWKDIN",1,0)
RGCKDIN ;RI/CBMI/DKM - CareWeb KIDS installation support ;18-Mar-2014 23:53;DKM
"RTN","RGCWKDIN",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 40
"RTN","RGCWKDIN",3,0)
 ; Environment check
"RTN","RGCWKDIN",4,0)
EC X $G(@XPDGREF@("EC"))
"RTN","RGCWKDIN",5,0)
 Q
"RTN","RGCWKDIN",6,0)
 ; Preinit
"RTN","RGCWKDIN",7,0)
PRE N RGX,RGY
"RTN","RGCWKDIN",8,0)
 D MES(),OBJINST,SDINIT^RGCWFUTL(,60,1)
"RTN","RGCWKDIN",9,0)
 F  D  Q:'RGX
"RTN","RGCWKDIN",10,0)
 .S RGX=$$SHOWSESS^RGCWFUTL
"RTN","RGCWKDIN",11,0)
 .R:RGX "Waiting for active sessions to terminate...",RGY:10,!!
"RTN","RGCWKDIN",12,0)
 .I RGX,RGY=U,$$ASK^CIAU("There are still active sessions.  Are you sure you want to proceed") S RGX=0
"RTN","RGCWKDIN",13,0)
 D MES("Proceeding with installation...")
"RTN","RGCWKDIN",14,0)
 D INITIAL,SAVEOPT
"RTN","RGCWKDIN",15,0)
 Q
"RTN","RGCWKDIN",16,0)
 ; Postinit
"RTN","RGCWKDIN",17,0)
POST N PAR,Y
"RTN","RGCWKDIN",18,0)
 X ^%ZOSF("EON"),^%ZOSF("TRMOFF")
"RTN","RGCWKDIN",19,0)
 D RESPTR,DEFPAR,RESTOPT,REGISTER,FINAL
"RTN","RGCWKDIN",20,0)
 W !!!
"RTN","RGCWKDIN",21,0)
 Q
"RTN","RGCWKDIN",22,0)
 ; Execute initial preinit code, if any
"RTN","RGCWKDIN",23,0)
INITIAL ; EP
"RTN","RGCWKDIN",24,0)
 X $G(@XPDGREF@("INITIAL"))
"RTN","RGCWKDIN",25,0)
 Q
"RTN","RGCWKDIN",26,0)
 ; Execute final postinit code, if any
"RTN","RGCWKDIN",27,0)
FINAL ; EP
"RTN","RGCWKDIN",28,0)
 X $G(@XPDGREF@("FINAL"))
"RTN","RGCWKDIN",29,0)
 Q
"RTN","RGCWKDIN",30,0)
 ; Initializes default parameter values.  Does not affect existing entries.
"RTN","RGCWKDIN",31,0)
DEFPAR N PAR,ENT,VAL,INST,LP,Y
"RTN","RGCWKDIN",32,0)
 D MES("Setting up default site parameters...")
"RTN","RGCWKDIN",33,0)
 F LP=0:0 S LP=$O(@XPDGREF@("PARAM",LP)) Q:'LP  K VAL M VAL=^(LP) D
"RTN","RGCWKDIN",34,0)
 .S Y=VAL,VAL=$$MSG^CIAU($P(Y,U,3,999),"|",0),PAR=$P(Y,U),INST=$P(Y,U,2)
"RTN","RGCWKDIN",35,0)
 .S ENT=$$ENT^RGCWFPAR(PAR),ENT=$P(ENT,U,$L(ENT,U))
"RTN","RGCWKDIN",36,0)
 .D:$L(ENT) ADD^XPAR(ENT,PAR,INST,.VAL)
"RTN","RGCWKDIN",37,0)
 Q
"RTN","RGCWKDIN",38,0)
 ; Delete a file or subfile
"RTN","RGCWKDIN",39,0)
 ;   DIU = File or subfile #
"RTN","RGCWKDIN",40,0)
DELFIL(DIU) ; EP
"RTN","RGCWKDIN",41,0)
 N $ET
"RTN","RGCWKDIN",42,0)
 S $ET="",@$$TRAP^CIAUOS("DELERR^RGCWKDIN")
"RTN","RGCWKDIN",43,0)
 Q:'$D(^DD(DIU))
"RTN","RGCWKDIN",44,0)
 S DIU(0)=$S($D(^DIC(DIU)):"D",1:"S")
"RTN","RGCWKDIN",45,0)
 D EN^DIU2
"RTN","RGCWKDIN",46,0)
 Q
"RTN","RGCWKDIN",47,0)
DELERR N ERR
"RTN","RGCWKDIN",48,0)
 S ERR=$$EC^%ZOSV
"RTN","RGCWKDIN",49,0)
 D MES("An error occurred deleting file #"_$G(DIU))
"RTN","RGCWKDIN",50,0)
 D MES("The error was: "_ERR)
"RTN","RGCWKDIN",51,0)
 D MES("Please delete the file manually after correcting the problem.")
"RTN","RGCWKDIN",52,0)
 Q
"RTN","RGCWKDIN",53,0)
 ; Save ITEM and RPC entries for RGCWF CAREWEB FRAMEWORK option
"RTN","RGCWKDIN",54,0)
SAVEOPT N OPT
"RTN","RGCWKDIN",55,0)
 S OPT=$$FIND1^DIC(19,"","X","RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",56,0)
 Q:'OPT
"RTN","RGCWKDIN",57,0)
 M @XPDGREF@("ITMSAVE")=^DIC(19,OPT,10,"B")
"RTN","RGCWKDIN",58,0)
 M @XPDGREF@("RPCSAVE")=^DIC(19,OPT,"RPC","B")
"RTN","RGCWKDIN",59,0)
 Q
"RTN","RGCWKDIN",60,0)
 ; Restore ITEM and RPC entries for RGCWF CAREWEB FRAMEWORK
"RTN","RGCWKDIN",61,0)
RESTOPT N OPT,ITM,RPC
"RTN","RGCWKDIN",62,0)
 S OPT=$$FIND1^DIC(19,"","X","RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",63,0)
 Q:'OPT
"RTN","RGCWKDIN",64,0)
 F ITM=0:0 S ITM=$O(@XPDGREF@("ITMSAVE",ITM)) Q:'ITM  I $$REGCTX^CIAURPC(ITM,OPT)
"RTN","RGCWKDIN",65,0)
 F RPC=0:0 S RPC=$O(@XPDGREF@("RPCSAVE",RPC)) Q:'RPC  I $$REGRPC^CIAURPC(RPC,OPT)
"RTN","RGCWKDIN",66,0)
 Q
"RTN","RGCWKDIN",67,0)
 ; Resolve pointers in multiples (KIDS doesn't)
"RTN","RGCWKDIN",68,0)
RESPTR ; EP
"RTN","RGCWKDIN",69,0)
 N TGT,SRC,SUB,NOD,NAM,VAL,IEN,CNT,SGB,PTR
"RTN","RGCWKDIN",70,0)
 S SUB=0
"RTN","RGCWKDIN",71,0)
 F  S SUB=$O(@XPDGREF@("PTRS",SUB)) Q:'SUB  S X=^(SUB)  D
"RTN","RGCWKDIN",72,0)
 .S NOD=+X,SRC=$P(X,U,2),TGT=$P(X,U,3),SGB=$$ROOT^DILFD(SRC,,1),NAM=""
"RTN","RGCWKDIN",73,0)
 .F  S NAM=$O(@XPDGREF@("PTRS",SUB,NAM)) Q:'$L(NAM)  D
"RTN","RGCWKDIN",74,0)
 ..S IEN=$$FIND1^DIC(SRC,"","QX",NAM),VAL="",CNT=0
"RTN","RGCWKDIN",75,0)
 ..Q:IEN'>0
"RTN","RGCWKDIN",76,0)
 ..K @SGB@(IEN,NOD)
"RTN","RGCWKDIN",77,0)
 ..F  S VAL=$O(@XPDGREF@("PTRS",SUB,NAM,VAL)) Q:'$L(VAL)  D
"RTN","RGCWKDIN",78,0)
 ...S PTR=$$FIND1^DIC(TGT,,"X",VAL)
"RTN","RGCWKDIN",79,0)
 ...I 'PTR D MES("  Failed to resolve "_VAL) Q
"RTN","RGCWKDIN",80,0)
 ...S CNT=CNT+1,@SGB@(IEN,NOD,CNT,0)=PTR,@SGB@(IEN,NOD,"B",PTR,CNT)=""
"RTN","RGCWKDIN",81,0)
 ..S:CNT @SGB@(IEN,NOD,0)=U_SUB_"P^"_CNT_U_CNT
"RTN","RGCWKDIN",82,0)
 Q
"RTN","RGCWKDIN",83,0)
 ; Check binary version against M system
"RTN","RGCWKDIN",84,0)
OBJCHK ; EP
"RTN","RGCWKDIN",85,0)
 N VER,MSYS
"RTN","RGCWKDIN",86,0)
 D GETMSYS(.MSYS,.VER)
"RTN","RGCWKDIN",87,0)
 Q:'$D(MSYS)
"RTN","RGCWKDIN",88,0)
 I '$D(VER) D
"RTN","RGCWKDIN",89,0)
 .D MES("This package contains object code that is not supported on "_MSYS_" installations.",2)
"RTN","RGCWKDIN",90,0)
 E  I VER="" D
"RTN","RGCWKDIN",91,0)
 .D MES("This package does not contain object code for this version of "_MSYS_" installations.",2)
"RTN","RGCWKDIN",92,0)
 Q
"RTN","RGCWKDIN",93,0)
 ; Get M system type and target version
"RTN","RGCWKDIN",94,0)
GETMSYS(MSYS,VER) ;
"RTN","RGCWKDIN",95,0)
 K MSYS,VER
"RTN","RGCWKDIN",96,0)
 Q:'$D(@XPDGREF@("OBJ"))
"RTN","RGCWKDIN",97,0)
 S MSYS=$$UP^XLFSTR($P($$VERSION^%ZOSV(1)," ")),MSYS(0)=$S(MSYS="CACHE":1,MSYS="JUMPS":2,1:0)
"RTN","RGCWKDIN",98,0)
 Q:'$D(@XPDGREF@("OBJ",MSYS(0)))
"RTN","RGCWKDIN",99,0)
 S VER=$TR($$VERSION^%ZOSV()," ")
"RTN","RGCWKDIN",100,0)
 F  Q:'$L(VER)  Q:$D(@XPDGREF@("OBJ",MSYS(0),VER))  S VER=$P(VER,".",1,$L(VER,".")-1)
"RTN","RGCWKDIN",101,0)
 Q
"RTN","RGCWKDIN",102,0)
 ; Install routine binaries
"RTN","RGCWKDIN",103,0)
OBJINST ; EP
"RTN","RGCWKDIN",104,0)
 N MSYS,RTN,OBJ,SUB,GBL
"RTN","RGCWKDIN",105,0)
 D GETMSYS(.MSYS,.VER)
"RTN","RGCWKDIN",106,0)
 Q:'$D(MSYS)
"RTN","RGCWKDIN",107,0)
 Q:$D(@XPDGREF@("OBJ",MSYS(0)))<10
"RTN","RGCWKDIN",108,0)
 S RTN=""
"RTN","RGCWKDIN",109,0)
 D MES("Installing routine binaries...")
"RTN","RGCWKDIN",110,0)
 F  S RTN=$O(@XPDGREF@("OBJ",MSYS(0),VER,RTN)) Q:'$L(RTN)  D
"RTN","RGCWKDIN",111,0)
 .X "ZR  ZS @RTN"
"RTN","RGCWKDIN",112,0)
 .S OBJ="",SUB=0,GBL=$NA(@$S(MSYS(0)=1:"^rOBJ(RTN)",1:"^$R(RTN,""OBJECT"")"))
"RTN","RGCWKDIN",113,0)
 .F  S SUB=$O(@XPDGREF@("OBJ",MSYS(0),VER,RTN,SUB)) Q:'SUB  S OBJ=OBJ_^(SUB,0)
"RTN","RGCWKDIN",114,0)
 .S @GBL=$S(MSYS(0)=1:$$DECODE^CIAUUU(OBJ),1:OBJ)
"RTN","RGCWKDIN",115,0)
 Q
"RTN","RGCWKDIN",116,0)
 ; Perform various registration actions
"RTN","RGCWKDIN",117,0)
REGISTER N X,CTX
"RTN","RGCWKDIN",118,0)
 S CTX=$$GETOPT^CIAURPC("RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",119,0)
 Q:'CTX
"RTN","RGCWKDIN",120,0)
 F X="RGCW","CIAV","CIAU","DG","DDR","RGUT","BEH" D REGNMSP^CIAURPC(X,CTX)
"RTN","RGCWKDIN",121,0)
 F X="OR CPRS GUI CHART" D DOREG(X)
"RTN","RGCWKDIN",122,0)
 Q
"RTN","RGCWKDIN",123,0)
 ; Add an option as a subcontext to CareWeb Framework
"RTN","RGCWKDIN",124,0)
 ; Remove any redundant RPC's
"RTN","RGCWKDIN",125,0)
DOREG(OPT) ;
"RTN","RGCWKDIN",126,0)
 N RPC,CNT1,CNT2,STAT,IEN
"RTN","RGCWKDIN",127,0)
 S IEN=$$GETOPT^CIAURPC(OPT)
"RTN","RGCWKDIN",128,0)
 Q:'IEN
"RTN","RGCWKDIN",129,0)
 W !!,"Registering ",OPT," as a subcontext under RGCWF CAREWEB FRAMEWORK...",!
"RTN","RGCWKDIN",130,0)
 I $$REGCTX^CIAURPC(IEN,CTX)
"RTN","RGCWKDIN",131,0)
 W "Removing redundant RPC references...",!
"RTN","RGCWKDIN",132,0)
 S (CNT1,CNT2)=0
"RTN","RGCWKDIN",133,0)
 F RPC=0:0 S RPC=$O(^DIC(19,IEN,"RPC","B",RPC)) Q:'RPC  D
"RTN","RGCWKDIN",134,0)
 .S STAT=$$REGRPC^CIAURPC(RPC,CTX,1)
"RTN","RGCWKDIN",135,0)
 .Q:STAT=-1
"RTN","RGCWKDIN",136,0)
 .W $$GET1^DIQ(8994,RPC,.01)_" - "
"RTN","RGCWKDIN",137,0)
 .I STAT=1 W "Removed",! S CNT1=CNT1+1
"RTN","RGCWKDIN",138,0)
 .E  I 'STAT W "Not removed",! S CNT2=CNT2+1
"RTN","RGCWKDIN",139,0)
 W !,CNT1," remote procedure(s) removed",!
"RTN","RGCWKDIN",140,0)
 W:CNT2 CNT2," remote procedure(s) could not be removed",!!
"RTN","RGCWKDIN",141,0)
 Q
"RTN","RGCWKDIN",142,0)
 ; Check if specified routine is installed
"RTN","RGCWKDIN",143,0)
RTNTST(RTN,VN,MSG) ;
"RTN","RGCWKDIN",144,0)
 D:$$RTNVER(RTN)<VN MES(MSG_" must be installed before proceeding.",2)
"RTN","RGCWKDIN",145,0)
 Q
"RTN","RGCWKDIN",146,0)
 ; Get version # for specified routine
"RTN","RGCWKDIN",147,0)
RTNVER(RTN) ;
"RTN","RGCWKDIN",148,0)
 Q $P($T(+2^@RTN),";",3)
"RTN","RGCWKDIN",149,0)
 ; Check patch #s for specified routine
"RTN","RGCWKDIN",150,0)
PATCH(RTN,PN,MSG) ;
"RTN","RGCWKDIN",151,0)
 N X,Y,L,F
"RTN","RGCWKDIN",152,0)
 F X=1:1:$L(PN,",") D
"RTN","RGCWKDIN",153,0)
 .S Y=$P(PN,",",X),F=0
"RTN","RGCWKDIN",154,0)
 .F L=2,3 D  Q:F
"RTN","RGCWKDIN",155,0)
 ..S F=$TR($P($T(+L^@RTN),";",5),"*",",")[(","_Y_",")
"RTN","RGCWKDIN",156,0)
 .D:'F MES(MSG_" patch #"_Y_" must be installed before proceeding.",2)
"RTN","RGCWKDIN",157,0)
 Q
"RTN","RGCWKDIN",158,0)
 ; Display message in MSG and optionally set quit flag to QUIT
"RTN","RGCWKDIN",159,0)
MES(MSG,QUIT) ;
"RTN","RGCWKDIN",160,0)
 D BMES^XPDUTL("  "_$G(MSG))
"RTN","RGCWKDIN",161,0)
 S:$G(QUIT) XPDQUIT=QUIT
"RTN","RGCWKDIN",162,0)
 Q
"SEC","^DIC",999.1,999.1,0,"AUDIT")
@
"SEC","^DIC",999.1,999.1,0,"DD")
@
"SEC","^DIC",999.1,999.1,0,"DEL")
@
"SEC","^DIC",999.1,999.1,0,"LAYGO")
@
"SEC","^DIC",999.1,999.1,0,"RD")
@
"SEC","^DIC",999.1,999.1,0,"WR")
@
"SEC","^DIC",19941.21,19941.21,0,"AUDIT")
@
"SEC","^DIC",19941.21,19941.21,0,"DD")
@
"SEC","^DIC",19941.21,19941.21,0,"DEL")
@
"SEC","^DIC",19941.21,19941.21,0,"LAYGO")
@
"SEC","^DIC",19941.21,19941.21,0,"RD")
@
"SEC","^DIC",19941.21,19941.21,0,"WR")
@
"TEMP","EC")

"TEMP","FINAL")

"TEMP","INITIAL")

"TEMP","PTRS",19941.212)
20^19941.21^19.1
"TEMP","PTRS",19941.212,"BRINGTOFRONT")

"TEMP","PTRS",19941.212,"CCOW")

"TEMP","PTRS",19941.212,"CONTEXT")

"TEMP","PTRS",19941.212,"DESKTOP.SHUTDOWN")

"TEMP","PTRS",19941.212,"DESKTOP.SHUTDOWN","RGCWF MANAGER")

"TEMP","PTRS",19941.212,"INFO")

"TEMP","PTRS",19941.212,"LOGIN")

"TEMP","PTRS",19941.212,"LOGOUT")

"TEMP","PTRS",19941.212,"MESSAGE")

"TEMP","PTRS",19941.212,"STATUS")

"TEMP","PTRS",19941.212,"SUBSCRIBE")

"TEMP","PTRS",19941.212,"TRACE")

"TEMP","PTRS",19941.212,"UNSUBSCRIBE")

"TEMP","PTRS",19941.2121)
21^19941.21^19.1
"TEMP","PTRS",19941.2121,"BRINGTOFRONT")

"TEMP","PTRS",19941.2121,"CCOW")

"TEMP","PTRS",19941.2121,"CONTEXT")

"TEMP","PTRS",19941.2121,"DESKTOP.SHUTDOWN")

"TEMP","PTRS",19941.2121,"INFO")

"TEMP","PTRS",19941.2121,"LOGIN")

"TEMP","PTRS",19941.2121,"LOGOUT")

"TEMP","PTRS",19941.2121,"MESSAGE")

"TEMP","PTRS",19941.2121,"STATUS")

"TEMP","PTRS",19941.2121,"SUBSCRIBE")

"TEMP","PTRS",19941.2121,"TRACE")

"TEMP","PTRS",19941.2121,"UNSUBSCRIBE")

"TEMP","TGT")
1
"VER")
8.0^22.0
"^DD",999.1,999.1,0)
FIELD^^10^5
"^DD",999.1,999.1,0,"DDA")
N
"^DD",999.1,999.1,0,"DT")
3120523
"^DD",999.1,999.1,0,"IX","B",999.1,.01)

"^DD",999.1,999.1,0,"IX","C",999.1,.01)

"^DD",999.1,999.1,0,"NM","CAREWEB SERIALIZATION")

"^DD",999.1,999.1,0,"PT",999.991,.01)

"^DD",999.1,999.1,0,"VRPK")
CAREWEB ENHANCEMENTS
"^DD",999.1,999.1,.01,0)
NAME^RF^^0;1^K:$L(X)>100!($L(X)<3)!'(X'?1P.E) X
"^DD",999.1,999.1,.01,1,0)
^.1
"^DD",999.1,999.1,.01,1,1,0)
999.1^B
"^DD",999.1,999.1,.01,1,1,1)
S ^RGCWF(999.1,"B",$E(X,1,30),DA)=""
"^DD",999.1,999.1,.01,1,1,2)
K ^RGCWF(999.1,"B",$E(X,1,30),DA)
"^DD",999.1,999.1,.01,1,2,0)
999.1^C^MUMPS
"^DD",999.1,999.1,.01,1,2,1)
S ^RGCWF(999.1,"C",$$UP^XLFSTR(X),DA)=""
"^DD",999.1,999.1,.01,1,2,2)
K ^RGCWF(999.1,"C",$$UP^XLFSTR(X),DA)
"^DD",999.1,999.1,.01,1,2,"DT")
3120523
"^DD",999.1,999.1,.01,3)
Alias name of serialized object.
"^DD",999.1,999.1,.01,21,0)
^^1^1^3120522^
"^DD",999.1,999.1,.01,21,1,0)
This is the unique name that identifies this object type.
"^DD",999.1,999.1,.01,"DT")
3120523
"^DD",999.1,999.1,.5,0)
TARGET FILE^P1'^DIC(^0;2^Q
"^DD",999.1,999.1,.5,3)
File or subfile containing target object.
"^DD",999.1,999.1,.5,"DT")
3120523
"^DD",999.1,999.1,1,0)
CUSTOM SERIALIZER^F^^1;E1,20^K:$L(X)>20!($L(X)<1) X
"^DD",999.1,999.1,1,3)
Entry point (TAG^ROUTINE) for custom serializer.
"^DD",999.1,999.1,1,"DT")
3120523
"^DD",999.1,999.1,2,0)
CUSTOM DESERIALIZER^F^^2;E1,20^K:$L(X)>20!($L(X)<1) X
"^DD",999.1,999.1,2,3)
Entry point (TAG^ROUTINE) for custom deserializer.
"^DD",999.1,999.1,2,"DT")
3120523
"^DD",999.1,999.1,10,0)
PROPERTY^999.11^^10;0
"^DD",999.1,999.1,10,"DT")
3120523
"^DD",999.1,999.11,0)
PROPERTY SUB-FIELD^^10^4
"^DD",999.1,999.11,0,"DT")
3120523
"^DD",999.1,999.11,0,"IX","B",999.11,.01)

"^DD",999.1,999.11,0,"NM","PROPERTY")

"^DD",999.1,999.11,0,"UP")
999.1
"^DD",999.1,999.11,.01,0)
PROPERTY^MF^^0;1^K:$L(X)>40!($L(X)<1) X
"^DD",999.1,999.11,.01,1,0)
^.1
"^DD",999.1,999.11,.01,1,1,0)
999.11^B
"^DD",999.1,999.11,.01,1,1,1)
S ^RGCWF(999.1,DA(1),10,"B",$E(X,1,30),DA)=""
"^DD",999.1,999.11,.01,1,1,2)
K ^RGCWF(999.1,DA(1),10,"B",$E(X,1,30),DA)
"^DD",999.1,999.11,.01,3)
Property name to be used in serialization.
"^DD",999.1,999.11,.01,"DT")
3120523
"^DD",999.1,999.11,1,0)
FIELD^F^^0;2^K:$L(X)>40!($L(X)<1) X
"^DD",999.1,999.11,1,3)
Field name or # corresponding to this property.
"^DD",999.1,999.11,1,"DT")
3120523
"^DD",999.1,999.11,2,0)
TYPE^RS^F:FREE TEXT;R:RAW;B:BOOLEAN;D:DATE;M:MULTIPLE;C:CUSTOM;O:OBJECT;W:WORD PROCESSING;^0;3^Q
"^DD",999.1,999.11,2,3)
Encoding type for this property.
"^DD",999.1,999.11,2,"DT")
3120523
"^DD",999.1,999.11,10,0)
CONTROL^F^^10;E1,250^K:$L(X)>250!($L(X)<1) X
"^DD",999.1,999.11,10,3)
Answer must be 1-250 characters in length.
"^DD",999.1,999.11,10,21,0)
^^7^7^3120523.103917
"^DD",999.1,999.11,10,21,1,0)
The format of this field depends on the value of the TYPE field.  For those
"^DD",999.1,999.11,10,21,2,0)
TYPE values not listed below, this field will be ignored.
"^DD",999.1,999.11,10,21,3,0)

"^DD",999.1,999.11,10,21,4,0)
C (Custom) - Executable M code.
"^DD",999.1,999.11,10,21,5,0)
O (Object) - Alias name of the target object.
"^DD",999.1,999.11,10,21,6,0)
M (Multiple) - Alias name of the multiple object.
"^DD",999.1,999.11,10,21,7,0)

"^DD",999.1,999.11,10,"DT")
3120523
"^DD",19941.21,19941.21,0)
FIELD^^7^14
"^DD",19941.21,19941.21,0,"DT")
3091007
"^DD",19941.21,19941.21,0,"IX","B",19941.21,.01)

"^DD",19941.21,19941.21,0,"NM","CIA EVENT TYPE")

"^DD",19941.21,19941.21,0,"PT",999.995,.01)

"^DD",19941.21,19941.21,0,"PT",19930.995,.01)

"^DD",19941.21,19941.21,0,"PT",19941.23,1)

"^DD",19941.21,19941.21,0,"VRPK")
CAREWEB ENHANCEMENTS
"^DD",19941.21,19941.21,.01,0)
NAME^RF^^0;1^K:$L(X)>100!($L(X)<3)!'(X'?1P.E) X
"^DD",19941.21,19941.21,.01,1,0)
^.1
"^DD",19941.21,19941.21,.01,1,1,0)
19941.21^B
"^DD",19941.21,19941.21,.01,1,1,1)
S ^CIANB(19941.21,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.21,.01,1,1,2)
K ^CIANB(19941.21,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.21,.01,3)
Answer must be 3-100 characters in length.
"^DD",19941.21,19941.21,.01,"DT")
3030611
"^DD",19941.21,19941.21,1,0)
MONITOR^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",19941.21,19941.21,1,3)
M code to invoke monitor for this event type
"^DD",19941.21,19941.21,1,9)
@
"^DD",19941.21,19941.21,1,"DT")
3021021
"^DD",19941.21,19941.21,2,0)
DISABLE^S^0:NO;1:YES;^0;2^Q
"^DD",19941.21,19941.21,2,3)
Enter YES to disable this event type.
"^DD",19941.21,19941.21,2,21,0)
^.001^3^3^3030810^
"^DD",19941.21,19941.21,2,21,1,0)
If set to YES, this event type is disabled.  Once disabled, any attempt to 
"^DD",19941.21,19941.21,2,21,2,0)
enqueue the event will be ignored.  Disabling an event does not affect events
"^DD",19941.21,19941.21,2,21,3,0)
already in the queue. 
"^DD",19941.21,19941.21,2,"DT")
3030810
"^DD",19941.21,19941.21,3,0)
INTERVAL^NJ11,0X^^0;3^K:X<0!(X\1'=X) X
"^DD",19941.21,19941.21,3,3)
Enter the nominal polling interval in seconds.
"^DD",19941.21,19941.21,3,21,0)
^^10^10^3021021.152235
"^DD",19941.21,19941.21,3,21,1,0)
This is the nominal polling interval for the event in seconds.
"^DD",19941.21,19941.21,3,21,2,0)
The actual polling interval is dependent on the event polling
"^DD",19941.21,19941.21,3,21,3,0)
interval set for the client application as a site parameter.
"^DD",19941.21,19941.21,3,21,4,0)
The nominal polling interval guarantees that polling for this
"^DD",19941.21,19941.21,3,21,5,0)
event will not occur more frequently than this setting.
"^DD",19941.21,19941.21,3,21,6,0)
 
"^DD",19941.21,19941.21,3,21,7,0)
For events that are infrequent and/or do not require real time
"^DD",19941.21,19941.21,3,21,8,0)
notification, higher values may be selected for this field to
"^DD",19941.21,19941.21,3,21,9,0)
mitigate impact on system load. 
"^DD",19941.21,19941.21,3,21,10,0)

"^DD",19941.21,19941.21,3,"DT")
3021021
"^DD",19941.21,19941.21,4,0)
LOG EVENT^S^0:NO;1:YES;^0;4^Q
"^DD",19941.21,19941.21,4,3)
Enter YES to enable logging of this event.
"^DD",19941.21,19941.21,4,"DT")
3030611
"^DD",19941.21,19941.21,5,0)
LOG RETENTION^NJ6,0^^0;5^K:+X'=X!(X>999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",19941.21,19941.21,5,3)
Number of days to retain log entries.
"^DD",19941.21,19941.21,5,"DT")
3030611
"^DD",19941.21,19941.21,6,0)
POLLING METHOD^S^0:PER SESSION;1:PER INTERVAL;^0;6^Q
"^DD",19941.21,19941.21,6,3)
Determines how a monitored event is polled.
"^DD",19941.21,19941.21,6,21,0)
^^11^11^3030810.175145
"^DD",19941.21,19941.21,6,21,1,0)
For monitored events, this setting determines how the monitor is invoked
"^DD",19941.21,19941.21,6,21,2,0)
when the polling interval has been reached.  PER SESSION causes the event
"^DD",19941.21,19941.21,6,21,3,0)
monitor to be invoked for each active session, setting the user and
"^DD",19941.21,19941.21,6,21,4,0)
session context prior to each call.  PER INTERVAL cause the event monitor
"^DD",19941.21,19941.21,6,21,5,0)
to be invoked only once per interval.  No user or session context information
"^DD",19941.21,19941.21,6,21,6,0)
is available to the monitor in this case.
"^DD",19941.21,19941.21,6,21,7,0)

"^DD",19941.21,19941.21,6,21,8,0)
PER SESSION is appropriate for events that depend upon a specific user or
"^DD",19941.21,19941.21,6,21,9,0)
session (e.g., notifications).  PER INTERVAL is appropriate for events 
"^DD",19941.21,19941.21,6,21,10,0)
that are independent of a user or session (e.g., status events to display
"^DD",19941.21,19941.21,6,21,11,0)
the host date/time).
"^DD",19941.21,19941.21,6,"DT")
3030810
"^DD",19941.21,19941.21,7,0)
EVENT PROTOCOL^*P101'^ORD(101,^0;7^S DIC("S")="I $E(^(0),1,4)=""CIAV"",$P(^(0),U,4)=""X""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"^DD",19941.21,19941.21,7,12)
Restricts to Extended Action Protocols starting with CIAV
"^DD",19941.21,19941.21,7,12.1)
S DIC("S")="I $E(^(0),1,4)=""CIAV"",$P(^(0),U,4)=""X"""
"^DD",19941.21,19941.21,7,"DT")
3091007
"^DD",19941.21,19941.21,10,0)
DISPLAY LOGIC^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",19941.21,19941.21,10,3)
Logic to display stub info in log viewer.
"^DD",19941.21,19941.21,10,9)
@
"^DD",19941.21,19941.21,10,"DT")
3030611
"^DD",19941.21,19941.21,20,0)
PUBLICATION KEY^19941.212P^^20;0
"^DD",19941.21,19941.21,21,0)
SUBSCRIPTION KEY^19941.2121P^^21;0
"^DD",19941.21,19941.21,99,0)
DESCRIPTION^19941.2199^^99;0
"^DD",19941.21,19941.21,100,0)
ERROR DATE/TIME^D^^100;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",19941.21,19941.21,100,3)
Date and time of last error
"^DD",19941.21,19941.21,100,"DT")
3061129
"^DD",19941.21,19941.21,101,0)
ERROR TEXT^F^^100;2^K:$L(X)>240!($L(X)<1) X
"^DD",19941.21,19941.21,101,3)
Answer must be 1-240 characters in length.
"^DD",19941.21,19941.21,101,"DT")
3061129
"^DD",19941.21,19941.212,0)
PUBLICATION KEY SUB-FIELD^^.01^1
"^DD",19941.21,19941.212,0,"DT")
3021021
"^DD",19941.21,19941.212,0,"IX","B",19941.212,.01)

"^DD",19941.21,19941.212,0,"NM","PUBLICATION KEY")

"^DD",19941.21,19941.212,0,"UP")
19941.21
"^DD",19941.21,19941.212,.01,0)
PUBLICATION KEY^MP19.1'X^DIC(19.1,^0;1^Q
"^DD",19941.21,19941.212,.01,1,0)
^.1
"^DD",19941.21,19941.212,.01,1,1,0)
19941.212^B
"^DD",19941.21,19941.212,.01,1,1,1)
S ^CIANB(19941.21,DA(1),20,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.212,.01,1,1,2)
K ^CIANB(19941.21,DA(1),20,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.212,.01,3)
Security keys required to fire this event.
"^DD",19941.21,19941.212,.01,21,0)
^^2^2^3021021.152715
"^DD",19941.21,19941.212,.01,21,1,0)
If there are entries in this multiple, the user must possess at least one of
"^DD",19941.21,19941.212,.01,21,2,0)
the listed keys in order to fire an event of this type.
"^DD",19941.21,19941.212,.01,"DT")
3040310
"^DD",19941.21,19941.2121,0)
SUBSCRIPTION KEY SUB-FIELD^^.01^1
"^DD",19941.21,19941.2121,0,"DT")
3021021
"^DD",19941.21,19941.2121,0,"IX","B",19941.2121,.01)

"^DD",19941.21,19941.2121,0,"NM","SUBSCRIPTION KEY")

"^DD",19941.21,19941.2121,0,"UP")
19941.21
"^DD",19941.21,19941.2121,.01,0)
SUBSCRIPTION KEY^MP19.1'X^DIC(19.1,^0;1^Q
"^DD",19941.21,19941.2121,.01,1,0)
^.1
"^DD",19941.21,19941.2121,.01,1,1,0)
19941.2121^B
"^DD",19941.21,19941.2121,.01,1,1,1)
S ^CIANB(19941.21,DA(1),21,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.2121,.01,1,1,2)
K ^CIANB(19941.21,DA(1),21,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.2121,.01,3)
Security keys required to receive this event type.
"^DD",19941.21,19941.2121,.01,21,0)
^^2^2^3021021.153002
"^DD",19941.21,19941.2121,.01,21,1,0)
If there are entries in this multiple, the user must possess at least one of
"^DD",19941.21,19941.2121,.01,21,2,0)
the listed keys in order subscribe to an event of this type. 
"^DD",19941.21,19941.2121,.01,"DT")
3040310
"^DD",19941.21,19941.2199,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",19941.21,19941.2199,0,"DT")
3021021
"^DD",19941.21,19941.2199,0,"NM","DESCRIPTION")

"^DD",19941.21,19941.2199,0,"UP")
19941.21
"^DD",19941.21,19941.2199,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",19941.21,19941.2199,.01,3)
Enter a detailed description of this event type.
"^DD",19941.21,19941.2199,.01,"DT")
3021021
"^DIC",999.1,999.1,0)
CAREWEB SERIALIZATION^999.1
"^DIC",999.1,999.1,0,"GL")
^RGCWF(999.1,
"^DIC",999.1,"B","CAREWEB SERIALIZATION",999.1)

"^DIC",19941.21,19941.21,0)
CIA EVENT TYPE^19941.21
"^DIC",19941.21,19941.21,0,"GL")
^CIANB(19941.21,
"^DIC",19941.21,"B","CIA EVENT TYPE",19941.21)

**INSTALL NAME**
CAREWEB CONTEXT 1.0
"BLD",8487,0)
CAREWEB CONTEXT 1.0^^0^3140321^n
"BLD",8487,4,0)
^9.64PA^19941.21^4
"BLD",8487,4,999.1,0)
999.1
"BLD",8487,4,999.1,222)
n^y^f^^n^^y^o^n
"BLD",8487,4,999.1,224)
I $$SCRN^RGCWKDTP(Y,1)
"BLD",8487,4,999.2,0)
999.2
"BLD",8487,4,999.2,222)
y^y^f^^n^^y^r^n
"BLD",8487,4,999.201,0)
999.201
"BLD",8487,4,999.201,222)
n^y^f^^y^^y^o^n
"BLD",8487,4,999.201,224)
I $$SCRN^RGCWKDTP(Y,4)
"BLD",8487,4,19941.21,0)
19941.21
"BLD",8487,4,19941.21,222)
n^y^f^^y^^y^o^n
"BLD",8487,4,19941.21,224)
I $$SCRN^RGCWKDTP(Y,5)
"BLD",8487,4,"B",999.1,999.1)

"BLD",8487,4,"B",999.2,999.2)

"BLD",8487,4,"B",999.201,999.201)

"BLD",8487,4,"B",19941.21,19941.21)

"BLD",8487,6.3)
38
"BLD",8487,"INI")
PRE^RGCWKDIN
"BLD",8487,"INIT")
POST^RGCWKDIN
"BLD",8487,"KRN",0)
^9.67PA^8994^20
"BLD",8487,"KRN",.4,0)
.4
"BLD",8487,"KRN",.401,0)
.401
"BLD",8487,"KRN",.402,0)
.402
"BLD",8487,"KRN",.403,0)
.403
"BLD",8487,"KRN",.5,0)
.5
"BLD",8487,"KRN",.84,0)
.84
"BLD",8487,"KRN",3.6,0)
3.6
"BLD",8487,"KRN",3.8,0)
3.8
"BLD",8487,"KRN",9.2,0)
9.2
"BLD",8487,"KRN",9.8,0)
9.8
"BLD",8487,"KRN",9.8,"NM",0)
^9.68A^9^9
"BLD",8487,"KRN",9.8,"NM",1,0)
RGCWENC1^^0^B34209910
"BLD",8487,"KRN",9.8,"NM",2,0)
RGCWENCX^^0^B118148848
"BLD",8487,"KRN",9.8,"NM",3,0)
RGCWPTP1^^0^B27496836
"BLD",8487,"KRN",9.8,"NM",4,0)
RGCWPTP2^^0^B6090543
"BLD",8487,"KRN",9.8,"NM",5,0)
RGCWPTP3^^0^B17286095
"BLD",8487,"KRN",9.8,"NM",6,0)
RGCWPTPC^^0^B8280859
"BLD",8487,"KRN",9.8,"NM",7,0)
RGCWPTPL^^0^B18691423
"BLD",8487,"KRN",9.8,"NM",8,0)
RGCWPTPS^^0^B4836702
"BLD",8487,"KRN",9.8,"NM",9,0)
RGCWPTCX^^0^B39124291
"BLD",8487,"KRN",9.8,"NM","B","RGCWENC1",1)

"BLD",8487,"KRN",9.8,"NM","B","RGCWENCX",2)

"BLD",8487,"KRN",9.8,"NM","B","RGCWPTCX",9)

"BLD",8487,"KRN",9.8,"NM","B","RGCWPTP1",3)

"BLD",8487,"KRN",9.8,"NM","B","RGCWPTP2",4)

"BLD",8487,"KRN",9.8,"NM","B","RGCWPTP3",5)

"BLD",8487,"KRN",9.8,"NM","B","RGCWPTPC",6)

"BLD",8487,"KRN",9.8,"NM","B","RGCWPTPL",7)

"BLD",8487,"KRN",9.8,"NM","B","RGCWPTPS",8)

"BLD",8487,"KRN",19,0)
19
"BLD",8487,"KRN",19.1,0)
19.1
"BLD",8487,"KRN",19.1,"NM",0)
^9.68A^1^1
"BLD",8487,"KRN",19.1,"NM",1,0)
RGCWPT PATIENT SELECT^^0
"BLD",8487,"KRN",19.1,"NM","B","RGCWPT PATIENT SELECT",1)

"BLD",8487,"KRN",101,0)
101
"BLD",8487,"KRN",409.61,0)
409.61
"BLD",8487,"KRN",771,0)
771
"BLD",8487,"KRN",779.2,0)
779.2
"BLD",8487,"KRN",870,0)
870
"BLD",8487,"KRN",8989.51,0)
8989.51
"BLD",8487,"KRN",8989.51,"NM",0)
^9.68A^21^21
"BLD",8487,"KRN",8989.51,"NM",1,0)
RGCWENCX CREATE VISIT^^0
"BLD",8487,"KRN",8989.51,"NM",2,0)
RGCWENCX DETAIL REPORT^^0
"BLD",8487,"KRN",8989.51,"NM",3,0)
RGCWENCX OTHER LOCATION^^0
"BLD",8487,"KRN",8989.51,"NM",4,0)
RGCWENCX PROV ENC FETCH^^0
"BLD",8487,"KRN",8989.51,"NM",5,0)
RGCWENCX PROVIDER^^0
"BLD",8487,"KRN",8989.51,"NM",6,0)
RGCWENCX SEARCH RANGE START^^0
"BLD",8487,"KRN",8989.51,"NM",7,0)
RGCWENCX SEARCH RANGE STOP^^0
"BLD",8487,"KRN",8989.51,"NM",8,0)
RGCWENCX VISIT LOCK OVERRIDE^^0
"BLD",8487,"KRN",8989.51,"NM",9,0)
RGCWENCX VISIT LOCKED^^0
"BLD",8487,"KRN",8989.51,"NM",10,0)
RGCWENCX VISIT TYPES^^0
"BLD",8487,"KRN",8989.51,"NM",11,0)
RGCWPTCX DEMO MODE^^0
"BLD",8487,"KRN",8989.51,"NM",12,0)
RGCWPTCX DETAIL REPORT^^0
"BLD",8487,"KRN",8989.51,"NM",13,0)
RGCWPTCX IGNORE ALIASES^^0
"BLD",8487,"KRN",8989.51,"NM",14,0)
RGCWPTCX LAST PATIENT^^0
"BLD",8487,"KRN",8989.51,"NM",15,0)
RGCWPTCX RECALL LAST^^0
"BLD",8487,"KRN",8989.51,"NM",16,0)
RGCWPTCX REQUIRES HRN^^0
"BLD",8487,"KRN",8989.51,"NM",17,0)
RGCWPTPL DATE RANGES^^0
"BLD",8487,"KRN",8989.51,"NM",18,0)
RGCWPTPL DEFAULT ITEM^^0
"BLD",8487,"KRN",8989.51,"NM",19,0)
RGCWPTPL DEFAULT SOURCE^^0
"BLD",8487,"KRN",8989.51,"NM",20,0)
RGCWPTPL PERSONAL LIST^^0
"BLD",8487,"KRN",8989.51,"NM",21,0)
RGCWENCX LOCATION DEFAULT^^0
"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX CREATE VISIT",1)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX DETAIL REPORT",2)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX LOCATION DEFAULT",21)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX OTHER LOCATION",3)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX PROV ENC FETCH",4)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX PROVIDER",5)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX SEARCH RANGE START",6)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX SEARCH RANGE STOP",7)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX VISIT LOCK OVERRIDE",8)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX VISIT LOCKED",9)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWENCX VISIT TYPES",10)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTCX DEMO MODE",11)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTCX DETAIL REPORT",12)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTCX IGNORE ALIASES",13)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTCX LAST PATIENT",14)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTCX RECALL LAST",15)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTCX REQUIRES HRN",16)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTPL DATE RANGES",17)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTPL DEFAULT ITEM",18)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTPL DEFAULT SOURCE",19)

"BLD",8487,"KRN",8989.51,"NM","B","RGCWPTPL PERSONAL LIST",20)

"BLD",8487,"KRN",8989.52,0)
8989.52
"BLD",8487,"KRN",8994,0)
8994
"BLD",8487,"KRN",8994,"NM",0)
^9.68A^30^30
"BLD",8487,"KRN",8994,"NM",1,0)
RGCWENCX ADMITCUR^^0
"BLD",8487,"KRN",8994,"NM",2,0)
RGCWENCX ADMITLST^^0
"BLD",8487,"KRN",8994,"NM",3,0)
RGCWENCX CHKVISIT^^0
"BLD",8487,"KRN",8994,"NM",4,0)
RGCWENCX CLINLOC^^0
"BLD",8487,"KRN",8994,"NM",5,0)
RGCWENCX ENINQ^^0
"BLD",8487,"KRN",8994,"NM",6,0)
RGCWENCX FETCH^^0
"BLD",8487,"KRN",8994,"NM",7,0)
RGCWENCX GETPRV^^0
"BLD",8487,"KRN",8994,"NM",8,0)
RGCWENCX GETVISIT^^0
"BLD",8487,"KRN",8994,"NM",9,0)
RGCWENCX HOSPLOC^^0
"BLD",8487,"KRN",8994,"NM",10,0)
RGCWENCX INPLOC^^0
"BLD",8487,"KRN",8994,"NM",11,0)
RGCWENCX LOCIEN^^0
"BLD",8487,"KRN",8994,"NM",12,0)
RGCWENCX LOCINFO^^0
"BLD",8487,"KRN",8994,"NM",13,0)
RGCWENCX UPDPRV^^0
"BLD",8487,"KRN",8994,"NM",14,0)
RGCWENCX VID2IEN^^0
"BLD",8487,"KRN",8994,"NM",15,0)
RGCWENCX VISITLST^^0
"BLD",8487,"KRN",8994,"NM",16,0)
RGCWPTPL CLINRNG^^0
"BLD",8487,"KRN",8994,"NM",17,0)
RGCWPTPL DOBLKP^^0
"BLD",8487,"KRN",8994,"NM",18,0)
RGCWPTPL GETDFLT^^0
"BLD",8487,"KRN",8994,"NM",19,0)
RGCWPTPL HRNLKP^^0
"BLD",8487,"KRN",8994,"NM",20,0)
RGCWPTPL IENLKP^^0
"BLD",8487,"KRN",8994,"NM",21,0)
RGCWPTPL LISTALL^^0
"BLD",8487,"KRN",8994,"NM",22,0)
RGCWPTPL LISTINFO^^0
"BLD",8487,"KRN",8994,"NM",23,0)
RGCWPTPL LISTPTS^^0
"BLD",8487,"KRN",8994,"NM",24,0)
RGCWPTPL LISTSEL^^0
"BLD",8487,"KRN",8994,"NM",25,0)
RGCWPTPL LOOKUP^^0
"BLD",8487,"KRN",8994,"NM",26,0)
RGCWPTPL MANAGE^^0
"BLD",8487,"KRN",8994,"NM",27,0)
RGCWPTPL MANAGE^^0
"BLD",8487,"KRN",8994,"NM",28,0)
RGCWPTPL SAVEDFLT^^0
"BLD",8487,"KRN",8994,"NM",29,0)
RGCWPTPS SEARCH^^0
"BLD",8487,"KRN",8994,"NM",30,0)
RGCWPTPL LISTINFO1^^0
"BLD",8487,"KRN",8994,"NM","B","RGCWENCX ADMITCUR",1)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX ADMITLST",2)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX CHKVISIT",3)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX CLINLOC",4)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX ENINQ",5)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX FETCH",6)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX GETPRV",7)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX GETVISIT",8)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX HOSPLOC",9)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX INPLOC",10)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX LOCIEN",11)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX LOCINFO",12)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX UPDPRV",13)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX VID2IEN",14)

"BLD",8487,"KRN",8994,"NM","B","RGCWENCX VISITLST",15)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL CLINRNG",16)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL DOBLKP",17)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL GETDFLT",18)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL HRNLKP",19)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL IENLKP",20)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL LISTALL",21)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL LISTINFO",22)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL LISTINFO1",30)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL LISTPTS",23)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL LISTSEL",24)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL LOOKUP",25)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL MANAGE",26)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL MANAGE",27)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPL SAVEDFLT",28)

"BLD",8487,"KRN",8994,"NM","B","RGCWPTPS SEARCH",29)

"BLD",8487,"KRN","B",.4,.4)

"BLD",8487,"KRN","B",.401,.401)

"BLD",8487,"KRN","B",.402,.402)

"BLD",8487,"KRN","B",.403,.403)

"BLD",8487,"KRN","B",.5,.5)

"BLD",8487,"KRN","B",.84,.84)

"BLD",8487,"KRN","B",3.6,3.6)

"BLD",8487,"KRN","B",3.8,3.8)

"BLD",8487,"KRN","B",9.2,9.2)

"BLD",8487,"KRN","B",9.8,9.8)

"BLD",8487,"KRN","B",19,19)

"BLD",8487,"KRN","B",19.1,19.1)

"BLD",8487,"KRN","B",101,101)

"BLD",8487,"KRN","B",409.61,409.61)

"BLD",8487,"KRN","B",771,771)

"BLD",8487,"KRN","B",779.2,779.2)

"BLD",8487,"KRN","B",870,870)

"BLD",8487,"KRN","B",8989.51,8989.51)

"BLD",8487,"KRN","B",8989.52,8989.52)

"BLD",8487,"KRN","B",8994,8994)

"BLD",8487,"PRE")
RGCWKDIN
"BLD",8487,"PRET")
PRETRANS^RGCWKDTP
"DATA",999.1,1,0)
Encounter^9000010
"DATA",999.1,1,10,0)
^999.11^4^4
"DATA",999.1,1,10,1,0)
dateTime^.01^D
"DATA",999.1,1,10,2,0)
locked^^C
"DATA",999.1,1,10,2,10)
D PUTBL("locked",$$ISLOCKED^RGCWENCX(IEN))
"DATA",999.1,1,10,3,0)
serviceCategory^.07^C
"DATA",999.1,1,10,3,10)
D:$L($G(VL("I"))) GETBYIEN(.DATA,"ServiceCategory",$A(VL("I")),PN)
"DATA",999.1,1,10,4,0)
location^.22^O
"DATA",999.1,1,10,4,10)
Location
"DATA",999.1,5,0)
Patient^2
"DATA",999.1,5,10,0)
^999.11^9^9
"DATA",999.1,5,10,1,0)
fullName^.01^F
"DATA",999.1,5,10,2,0)
gender^.02^R
"DATA",999.1,5,10,3,0)
birthDate^.03^D
"DATA",999.1,5,10,4,0)
bed^.101^F
"DATA",999.1,5,10,5,0)
deathDate^.351^D
"DATA",999.1,5,10,6,0)
medicalRecordNumber^^C
"DATA",999.1,5,10,6,10)
D PUTQT(PN,$$HRN^RGCWPTCX(IEN))
"DATA",999.1,5,10,7,0)
restricted^^C
"DATA",999.1,5,10,7,10)
D PUTBL(PN,$$ISSENS^RGCWPTCX(IEN))
"DATA",999.1,5,10,8,0)
institution^^C
"DATA",999.1,5,10,8,10)
D GETBYIEN(.DATA,"Institution",DUZ(2),PN)
"DATA",999.1,5,10,9,0)
location^.1^O
"DATA",999.1,5,10,9,10)
Location
"DATA",999.1,7,0)
Provider^200
"DATA",999.1,7,10,0)
^999.11^3^3
"DATA",999.1,7,10,1,0)
fullName^.01^F
"DATA",999.1,7,10,2,0)
birthDate^5^D
"DATA",999.1,7,10,3,0)
institution^^C
"DATA",999.1,7,10,3,10)
D GETBYIEN(.DATA,"Institution",DUZ(2),PN)
"DATA",999.1,8,0)
ServiceCategory
"DATA",999.1,8,1)
SSVCCAT^RGCWSER
"DATA",999.1,14,0)
EncounterProvider
"DATA",999.2,1,0)
Providers^LM^Provider^10
"DATA",999.2,1,10)
D PROVPTS^RGCWPTP1(.DATA,IEN)
"DATA",999.2,1,11)
D PROVLST^RGCWPTP1(.DATA,.FROM,.DIR,.MAX)
"DATA",999.2,2,0)
Teams^MS^Team^20
"DATA",999.2,2,10)
D TEAMPTS^RGCWPTP1(.DATA,IEN)
"DATA",999.2,2,11)
D TEAMLST^RGCWPTP1(.DATA)
"DATA",999.2,2,12)
D MAN2^RGCWPTP3(.DATA,LIST,ACTION,NAME,.VAL)
"DATA",999.2,2,13)
I $D(^OR(100.21))
"DATA",999.2,3,0)
Specialties^LMS^Specialty^30
"DATA",999.2,3,10)
D SPECPTS^RGCWPTP1(.DATA,IEN)
"DATA",999.2,3,11)
D SPECLST^RGCWPTP1(.DATA,.FROM,.DIR,.MAX)
"DATA",999.2,4,0)
Clinics^DELMN^Clinic^40
"DATA",999.2,4,10)
D CLINPTS^RGCWPTP1(.DATA,IEN,START,END)
"DATA",999.2,4,11)
D HOSPLOC^RGCWPTP1(.DATA,.FROM,.DIR,.MAX,"C",START,END)
"DATA",999.2,5,0)
Wards^ELMS^Ward^50
"DATA",999.2,5,10)
D WARDPTS^RGCWPTP1(.DATA,IEN)
"DATA",999.2,5,11)
D HOSPLOC^RGCWPTP1(.DATA,.FROM,.DIR,.MAX,"W")
"DATA",999.2,6,0)
Personal Lists^SU^Personal List^60
"DATA",999.2,6,10)
D PLSTPTS^RGCWPTP2(.DATA,IEN)
"DATA",999.2,6,11)
D PLSTLST^RGCWPTP2(.DATA)
"DATA",999.2,6,12)
D MANAGE^RGCWPTP2(.DATA,ACTION,NAME,.VAL)
"FIA",999.1)
CAREWEB SERIALIZATION
"FIA",999.1,0)
^RGCWF(999.1,
"FIA",999.1,0,0)
999.1
"FIA",999.1,0,1)
n^y^f^^n^^y^o^n
"FIA",999.1,0,10)

"FIA",999.1,0,11)
I $$SCRN^RGCWKDTP(Y,1)
"FIA",999.1,0,"RLRO")

"FIA",999.1,999.1)
0
"FIA",999.1,999.11)
0
"FIA",999.2)
CAREWEB PATIENT LIST
"FIA",999.2,0)
^RGCWF(999.2,
"FIA",999.2,0,0)
999.2
"FIA",999.2,0,1)
y^y^f^^n^^y^r^n
"FIA",999.2,0,10)

"FIA",999.2,0,11)

"FIA",999.2,0,"RLRO")

"FIA",999.2,999.2)
0
"FIA",999.201)
CAREWEB NOTIFICATION CONTROL
"FIA",999.201,0)
^RGCWF(999.201,
"FIA",999.201,0,0)
999.201
"FIA",999.201,0,1)
n^y^f^^y^^y^o^n
"FIA",999.201,0,10)

"FIA",999.201,0,11)
I $$SCRN^RGCWKDTP(Y,4)
"FIA",999.201,0,"RLRO")

"FIA",999.201,999.201)
0
"FIA",19941.21)
CIA EVENT TYPE
"FIA",19941.21,0)
^CIANB(19941.21,
"FIA",19941.21,0,0)
19941.21
"FIA",19941.21,0,1)
n^y^f^^y^^y^o^n
"FIA",19941.21,0,10)

"FIA",19941.21,0,11)
I $$SCRN^RGCWKDTP(Y,5)
"FIA",19941.21,0,"RLRO")

"FIA",19941.21,19941.21)
0
"FIA",19941.21,19941.212)
0
"FIA",19941.21,19941.2121)
0
"FIA",19941.21,19941.2199)
0
"INI")
PRE^RGCWKDIN
"INIT")
POST^RGCWKDIN
"KRN",19.1,513,-1)
0^1
"KRN",19.1,513,0)
RGCWPT PATIENT SELECT^Allows selection of a patient.
"KRN",8989.51,292,-1)
0^20
"KRN",8989.51,292,0)
RGCWPTPL PERSONAL LIST^User Personal List^1^Enter List Name
"KRN",8989.51,292,1)
W
"KRN",8989.51,292,6)
F
"KRN",8989.51,292,7)
K:$L(X)<3!(X=+X) X
"KRN",8989.51,292,30,0)
^8989.513I^1^1
"KRN",8989.51,292,30,1,0)
1^200
"KRN",8989.51,293,-1)
0^19
"KRN",8989.51,293,0)
RGCWPTPL DEFAULT SOURCE^Default Patient List^0
"KRN",8989.51,293,1)
P^90460.03^Enter default patient list.
"KRN",8989.51,293,30,0)
^8989.513I^2^2
"KRN",8989.51,293,30,1,0)
99^4.2
"KRN",8989.51,293,30,2,0)
1^200
"KRN",8989.51,294,-1)
0^18
"KRN",8989.51,294,0)
RGCWPTPL DEFAULT ITEM^Default List Item^1
"KRN",8989.51,294,1)
F
"KRN",8989.51,294,6)
P^90460.03
"KRN",8989.51,294,30,0)
^8989.513I^2^2
"KRN",8989.51,294,30,1,0)
99^4.2
"KRN",8989.51,294,30,2,0)
1^200
"KRN",8989.51,295,-1)
0^6
"KRN",8989.51,295,0)
RGCWENCX SEARCH RANGE START^Visit Search Start Date^0^^Visit Search Start Date
"KRN",8989.51,295,1)
F^^Enter relative start date to list visits.  (E.g. T-120)
"KRN",8989.51,295,20,0)
^8989.512^2^2^3011212^^^^
"KRN",8989.51,295,20,1,0)
Returns the relative date to start listing visits for a patient.
"KRN",8989.51,295,20,2,0)
For example, 'T-90' will list visits beginning 90 days before today.
"KRN",8989.51,295,30,0)
^8989.513I^6^4
"KRN",8989.51,295,30,1,0)
1^200
"KRN",8989.51,295,30,2,0)
2^49
"KRN",8989.51,295,30,4,0)
3^4
"KRN",8989.51,295,30,6,0)
5^4.2
"KRN",8989.51,296,-1)
0^7
"KRN",8989.51,296,0)
RGCWENCX SEARCH RANGE STOP^Visit Search Stop Date^0^^Visit Search Stop Date
"KRN",8989.51,296,1)
F^^Enter the relative stop date to list visits.  (E.g., T, T+30)
"KRN",8989.51,296,20,0)
^^3^3^3070608.140249
"KRN",8989.51,296,20,1,0)
Returns the relative date to end listing visits for a patient.
"KRN",8989.51,296,20,2,0)
For example, 'T' will not list visits later than today.  'T+30' will not
"KRN",8989.51,296,20,3,0)
list visits after 30 days from now.
"KRN",8989.51,296,30,0)
^8989.513I^6^4
"KRN",8989.51,296,30,1,0)
1^200
"KRN",8989.51,296,30,2,0)
2^49
"KRN",8989.51,296,30,4,0)
3^4
"KRN",8989.51,296,30,6,0)
5^4.2
"KRN",8989.51,297,-1)
0^12
"KRN",8989.51,297,0)
RGCWPTCX DETAIL REPORT^Patient detail report
"KRN",8989.51,297,1)
F
"KRN",8989.51,297,20,0)
^8989.512^1^1^3050215^^^^
"KRN",8989.51,297,20,1,0)
M code to generate a patient detail report.
"KRN",8989.51,297,30,0)
^8989.513I^4^4
"KRN",8989.51,297,30,1,0)
900^4.2
"KRN",8989.51,297,30,2,0)
100^200
"KRN",8989.51,297,30,3,0)
500^4
"KRN",8989.51,297,30,4,0)
300^49
"KRN",8989.51,298,-1)
0^14
"KRN",8989.51,298,0)
RGCWPTCX LAST PATIENT^Last patient selected^1^Facility^Patient
"KRN",8989.51,298,1)
P^2
"KRN",8989.51,298,6)
P^4
"KRN",8989.51,298,20,0)
^8989.512^1^1^3020730^
"KRN",8989.51,298,20,1,0)
Saves the last patient selected for the current institution.
"KRN",8989.51,298,30,0)
^8989.513I^1^1
"KRN",8989.51,298,30,1,0)
100^200
"KRN",8989.51,299,-1)
0^1
"KRN",8989.51,299,0)
RGCWENCX CREATE VISIT^Allow user to create new visits.^0
"KRN",8989.51,299,1)
Y
"KRN",8989.51,299,30,0)
^8989.513I^6^6
"KRN",8989.51,299,30,1,0)
100^200
"KRN",8989.51,299,30,2,0)
200^8930
"KRN",8989.51,299,30,3,0)
300^49
"KRN",8989.51,299,30,4,0)
400^44
"KRN",8989.51,299,30,5,0)
500^4
"KRN",8989.51,299,30,6,0)
900^4.2
"KRN",8989.51,300,-1)
0^4
"KRN",8989.51,300,0)
RGCWENCX PROV ENC FETCH^Fetch current user as provider?^^^Use current user as visit provider
"KRN",8989.51,300,1)
Y^^Enter YES if current user should be defaulted as provider
"KRN",8989.51,300,30,0)
^8989.513I^2^2
"KRN",8989.51,300,30,1,0)
100^4
"KRN",8989.51,300,30,2,0)
200^4.2
"KRN",8989.51,301,-1)
0^2
"KRN",8989.51,301,0)
RGCWENCX DETAIL REPORT^Visit detail report
"KRN",8989.51,301,1)
F
"KRN",8989.51,301,20,0)
^^1^1^3080201.120417
"KRN",8989.51,301,20,1,0)
M code to generate a visit detail report.
"KRN",8989.51,301,30,0)
^8989.513I^4^4
"KRN",8989.51,301,30,1,0)
900^4.2
"KRN",8989.51,301,30,2,0)
100^200
"KRN",8989.51,301,30,3,0)
500^4
"KRN",8989.51,301,30,4,0)
300^49
"KRN",8989.51,302,-1)
0^16
"KRN",8989.51,302,0)
RGCWPTCX REQUIRES HRN^Patient selection requires HRN^0^^Patient selection requires HRN
"KRN",8989.51,302,1)
Y^^Enter YES if patient must have an HRN to be selectable.
"KRN",8989.51,302,20,0)
^^2^2^3080215.08342
"KRN",8989.51,302,20,1,0)
This parameter controls whether a patient must have an assigned health record
"KRN",8989.51,302,20,2,0)
number to be selectable within the EHR.
"KRN",8989.51,302,30,0)
^8989.513I^1^1
"KRN",8989.51,302,30,1,0)
100^4.2
"KRN",8989.51,303,-1)
0^13
"KRN",8989.51,303,0)
RGCWPTCX IGNORE ALIASES^Ignore aliases in patient lookup^0^^Ignore aliases in patient lookup
"KRN",8989.51,303,1)
Y
"KRN",8989.51,303,20,0)
^^2^2^3080216.091741
"KRN",8989.51,303,20,1,0)
If set to YES, any aliases encountered in the primary index of the patient file
"KRN",8989.51,303,20,2,0)
are ignored.
"KRN",8989.51,303,30,0)
^8989.513I^2^2
"KRN",8989.51,303,30,1,0)
300^4.2
"KRN",8989.51,303,30,2,0)
200^4
"KRN",8989.51,394,-1)
0^5
"KRN",8989.51,394,0)
RGCWENCX PROVIDER^Can be a visit provider?^0^^Can be a visit provider?
"KRN",8989.51,394,1)
Y^^Enter yes if user class can be a provider for a visit.
"KRN",8989.51,394,20,0)
^8989.512^2^2^3040306^^
"KRN",8989.51,394,20,1,0)
If returns yes, user can be a provider associated with a visit.  This controls
"KRN",8989.51,394,20,2,0)
which users appear in the provider list of the encounter context dialog.
"KRN",8989.51,394,30,0)
^8989.513I^2^2
"KRN",8989.51,394,30,1,0)
100^8930
"KRN",8989.51,394,30,2,0)
10^200
"KRN",8989.51,395,-1)
0^11
"KRN",8989.51,395,0)
RGCWPTCX DEMO MODE^Allow viewing of demo patients only^0^^Limit to demo patients only?
"KRN",8989.51,395,1)
Y^^If yes, only demo patients may be selected.
"KRN",8989.51,395,6)
N
"KRN",8989.51,395,20,0)
^8989.512^1^1^3040128.115426
"KRN",8989.51,395,20,1,0)
If yes, the only demo patients may be selected.
"KRN",8989.51,395,30,0)
^8989.513I^3^3
"KRN",8989.51,395,30,1,0)
100^200
"KRN",8989.51,395,30,2,0)
200^4
"KRN",8989.51,395,30,3,0)
300^4.2
"KRN",8989.51,396,-1)
0^17
"KRN",8989.51,396,0)
RGCWPTPL DATE RANGES^Default date ranges:^^^Edit Value?
"KRN",8989.51,396,1)
W^^Enter Y to edit, @ to delete.
"KRN",8989.51,396,2)
S:"Yy"'[Y Y=""
"KRN",8989.51,396,30,0)
^8989.513I^1^1
"KRN",8989.51,396,30,1,0)
100^4.2
"KRN",8989.51,397,-1)
0^21
"KRN",8989.51,397,0)
RGCWENCX LOCATION DEFAULT^Default encounter location.^0
"KRN",8989.51,397,1)
N
"KRN",8989.51,397,30,0)
^8989.513I^1^1
"KRN",8989.51,397,30,1,0)
10^200
"KRN",8989.51,398,-1)
0^10
"KRN",8989.51,398,0)
RGCWENCX VISIT TYPES^Selectable visit types^1^Sequence^Value
"KRN",8989.51,398,1)
F
"KRN",8989.51,398,6)
N
"KRN",8989.51,398,20,0)
^8989.512^4^4^3050215^^^^
"KRN",8989.51,398,20,1,0)
Specifies the visit types selectable from the encounter context dialog.  The
"KRN",8989.51,398,20,2,0)
format for each entry is:
"KRN",8989.51,398,20,3,0)

"KRN",8989.51,398,20,4,0)
       Visit Code~Short Descriptor~Long Descriptor
"KRN",8989.51,398,30,0)
^8989.513I^3^2
"KRN",8989.51,398,30,1,0)
5^4
"KRN",8989.51,398,30,3,0)
10^4.2
"KRN",8989.51,399,-1)
0^9
"KRN",8989.51,399,0)
RGCWENCX VISIT LOCKED^Number days visit can be modified.^0
"KRN",8989.51,399,1)
N^1:180^# of days (1-180) following creation after which a visit cannot be modified.
"KRN",8989.51,399,20,0)
^8989.512^3^3^3070527.005944
"KRN",8989.51,399,20,1,0)
This parameter determines the maximum # of days (1-180) following the 
"KRN",8989.51,399,20,2,0)
creation of a visit after which the visit cannot be modified.  Once this 
"KRN",8989.51,399,20,3,0)
period has passed, no additional PCC data may be attached to a visit.
"KRN",8989.51,399,30,0)
^8989.513I^2^2
"KRN",8989.51,399,30,1,0)
900^4.2
"KRN",8989.51,399,30,2,0)
800^4
"KRN",8989.51,400,-1)
0^3
"KRN",8989.51,400,0)
RGCWENCX OTHER LOCATION^General location for outside encounters.^0^^Location
"KRN",8989.51,400,1)
P^9999999.06
"KRN",8989.51,400,20,0)
^^1^1^3061207.213805
"KRN",8989.51,400,20,1,0)
This is a general location is stored for visits that have an outside location.
"KRN",8989.51,400,30,0)
^8989.513I^2^2
"KRN",8989.51,400,30,1,0)
900^4.2
"KRN",8989.51,400,30,2,0)
500^4
"KRN",8989.51,401,-1)
0^8
"KRN",8989.51,401,0)
RGCWENCX VISIT LOCK OVERRIDE^Use to override visit lock for a user.^1^Visit to unlock^Date override expires
"KRN",8989.51,401,1)
D^::EX^Value must be between Today and value in BEHOENCX VISIT LOCKED parameter.
"KRN",8989.51,401,2)
K:Y>$$FMADD^XLFDT($$DT^XLFDT(),+$$GET^XPAR("ALL","BEHOENCX VISIT LOCKED"))!(Y<$$DT^XLFDT()) X
"KRN",8989.51,401,6)
P^9000010
"KRN",8989.51,401,20,0)
^8989.512^3^3^3090218^^^
"KRN",8989.51,401,20,1,0)
Use this parameter to temporarily override a locked visit for a specific user.
"KRN",8989.51,401,20,2,0)
Be sure to remove the override after the user has completed the necessary 
"KRN",8989.51,401,20,3,0)
modifications.
"KRN",8989.51,401,30,0)
^8989.513I^1^1
"KRN",8989.51,401,30,1,0)
100^200
"KRN",8989.51,402,-1)
0^15
"KRN",8989.51,402,0)
RGCWPTCX RECALL LAST^Recall last selected patient^0^^Recall last selected patient?
"KRN",8989.51,402,1)
Y^^Recalls the patient last selected upon startup.
"KRN",8989.51,402,6)
N
"KRN",8989.51,402,20,0)
^8989.512^2^2^3080216^^^^
"KRN",8989.51,402,20,1,0)
If yes, the patient context is set to the last patient selected upon
"KRN",8989.51,402,20,2,0)
startup.
"KRN",8989.51,402,30,0)
^8989.513I^3^3
"KRN",8989.51,402,30,1,0)
100^200
"KRN",8989.51,402,30,2,0)
200^4
"KRN",8989.51,402,30,3,0)
300^4.2
"KRN",8994,2643,-1)
0^2
"KRN",8994,2643,0)
RGCWENCX ADMITLST^ADMITLST^RGCWENCX^2
"KRN",8994,2644,-1)
0^4
"KRN",8994,2644,0)
RGCWENCX CLINLOC^CLINLOC^RGCWENCX^2
"KRN",8994,2645,-1)
0^6
"KRN",8994,2645,0)
RGCWENCX FETCH^FETCH^RGCWENCX^1^^^^1
"KRN",8994,2646,-1)
0^7
"KRN",8994,2646,0)
RGCWENCX GETPRV^GETPRV^RGCWENCX^2^^^^1
"KRN",8994,2647,-1)
0^8
"KRN",8994,2647,0)
RGCWENCX GETVISIT^GETVISIT^RGCWENCX^1
"KRN",8994,2647,1,0)
^8994.01^1^1^3010531^
"KRN",8994,2647,1,1,0)
Returns visit data given IEN of VISIT file entry.
"KRN",8994,2648,-1)
0^9
"KRN",8994,2648,0)
RGCWENCX HOSPLOC^HOSPLOC^RGCWENCX^2
"KRN",8994,2649,-1)
0^10
"KRN",8994,2649,0)
RGCWENCX INPLOC^INPLOC^RGCWENCX^2
"KRN",8994,2650,-1)
0^11
"KRN",8994,2650,0)
RGCWENCX LOCIEN^LOCIEN^RGCWENCX^1
"KRN",8994,2650,1,0)
^8994.01^1^1^3010531.210736
"KRN",8994,2650,1,1,0)
Returns the IEN of the specified hospital location.
"KRN",8994,2651,-1)
0^14
"KRN",8994,2651,0)
RGCWENCX VID2IEN^VID2IEN^RGCWENCX^1
"KRN",8994,2651,1,0)
^8994.01^1^1^3010531.120443
"KRN",8994,2651,1,1,0)
Returns the IEN of a VISIT file entry given its visit id.
"KRN",8994,2652,-1)
0^15
"KRN",8994,2652,0)
RGCWENCX VISITLST^VISITLST^RGCWENCX^4^^^^1
"KRN",8994,2653,-1)
0^13
"KRN",8994,2653,0)
RGCWENCX UPDPRV^UPDPRV^RGCWENCX^1
"KRN",8994,2654,-1)
0^12
"KRN",8994,2654,0)
RGCWENCX LOCINFO^LOCINFO^RGCWENCX^1
"KRN",8994,2654,1,0)
^8994.01^1^1^3051128.075357
"KRN",8994,2654,1,1,0)
Returns information about the specified entry from the HOSPITAL LOCATION file.
"KRN",8994,2654,2,0)
^8994.02A^1^1
"KRN",8994,2654,2,1,0)
LOCATION^1^^1^1
"KRN",8994,2654,2,1,1,0)
^^1^1^3051128.075318
"KRN",8994,2654,2,1,1,1,0)
Internal entry number in HOSPITAL LOCATION file.
"KRN",8994,2654,2,"B","LOCATION",1)

"KRN",8994,2654,2,"PARAMSEQ",1,1)

"KRN",8994,2654,3,0)
^^1^1^3051128.075343
"KRN",8994,2654,3,1,0)
Returns the zero node of the specified entry from the HOSPITAL LOCATION file.
"KRN",8994,2655,-1)
0^3
"KRN",8994,2655,0)
RGCWENCX CHKVISIT^CHKVISIT^RGCWENCX^2^^^^1
"KRN",8994,2656,-1)
0^1
"KRN",8994,2656,0)
RGCWENCX ADMITCUR^ADMITCUR^RGCWENCX^1
"KRN",8994,2656,1,0)
^8994.01^1^1^3070517.114924
"KRN",8994,2656,1,1,0)
Return information about current admission.
"KRN",8994,2656,2,0)
^8994.02A^1^1
"KRN",8994,2656,2,1,0)
DFN^1^^1^1
"KRN",8994,2656,2,1,1,0)
^^1^1^3070517.114942
"KRN",8994,2656,2,1,1,1,0)
Patient internal record number.
"KRN",8994,2656,2,"B","DFN",1)

"KRN",8994,2656,2,"PARAMSEQ",1,1)

"KRN",8994,2656,3,0)
^^1^1^3070517.115113
"KRN",8994,2656,3,1,0)
VSTR [1] ^ LOCNAME [2] ^ ADMDATE [3] ^ TYPE [4] ^ LOCKED [5]
"KRN",8994,2657,-1)
0^16
"KRN",8994,2657,0)
RGCWPTPL CLINRNG^CLINRNG^RGCWPTPL^2
"KRN",8994,2658,-1)
0^17
"KRN",8994,2658,0)
RGCWPTPL DOBLKP^DOBLKP^RGCWPTPL^4^^^^1
"KRN",8994,2659,-1)
0^18
"KRN",8994,2659,0)
RGCWPTPL GETDFLT^GETDFLT^RGCWPTPL^1
"KRN",8994,2660,-1)
0^19
"KRN",8994,2660,0)
RGCWPTPL HRNLKP^HRNLKP^RGCWPTPL^2^^^^1
"KRN",8994,2661,-1)
0^20
"KRN",8994,2661,0)
RGCWPTPL IENLKP^IENLKP^RGCWPTPL^2
"KRN",8994,2662,-1)
0^21
"KRN",8994,2662,0)
RGCWPTPL LISTALL^LISTALL^RGCWPTPL^2
"KRN",8994,2663,-1)
0^22
"KRN",8994,2663,0)
RGCWPTPL LISTINFO^LISTINFO^RGCWPTPL^2^^^^1
"KRN",8994,2664,-1)
0^23
"KRN",8994,2664,0)
RGCWPTPL LISTPTS^LISTPTS^RGCWPTPL^2
"KRN",8994,2665,-1)
0^24
"KRN",8994,2665,0)
RGCWPTPL LISTSEL^LISTSEL^RGCWPTPL^2
"KRN",8994,2666,-1)
0^25
"KRN",8994,2666,0)
RGCWPTPL LOOKUP^LOOKUP^RGCWPTPL^4^^^^1
"KRN",8994,2667,-1)
0^27
"KRN",8994,2667,0)
RGCWPTPL MANAGE^MANAGE^RGCWPTPL^1
"KRN",8994,2668,-1)
0^28
"KRN",8994,2668,0)
RGCWPTPL SAVEDFLT^SAVEDFLT^RGCWPTPL^1
"KRN",8994,2669,-1)
0^5
"KRN",8994,2669,0)
RGCWENCX ENINQ^ENINQ^RGCWENCX^4^^^^1
"KRN",8994,2670,-1)
0^29
"KRN",8994,2670,0)
RGCWPTPS SEARCH^SEARCH^RGCWPTPS^4^^^^1
"KRN",8994,2671,-1)
0^30
"KRN",8994,2671,0)
RGCWPTPL LISTINFO1^LISTINFO^RGCWPTPL^1
"MBREQ")
1
"ORD",3,19.1)
19.1;3;;;KEY^XPDTA1;KEYF1^XPDIA1;KEYE1^XPDIA1;KEYF2^XPDIA1;;KEYDEL^XPDIA1
"ORD",3,19.1,0)
SECURITY KEY
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",20,8989.51)
8989.51;20;;;PAR1E1^XPDTA2;PAR1F1^XPDIA3;PAR1E1^XPDIA3;PAR1F2^XPDIA3;;PAR1DEL^XPDIA3(%)
"ORD",20,8989.51,0)
PARAMETER DEFINITION
"PGL",19941.21,0,7,7)
EVENT PROTOCOL^*P101'^ORD(101,^0;7^S DIC("S")="I $E(^(0),1,4)=""CIAV"",$P(^(0),U,4)=""X""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"PRE")
RGCWKDIN
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
10
"RTN","RGCWENC1")
0^1^B34209910
"RTN","RGCWENC1",1,0)
RGCWENC1 ;RI/CBMI/DKM - Visit Creation Support ;14-Mar-2014 17:10;DKM
"RTN","RGCWENC1",2,0)
 ;;1.0;CAREWEB FRAMEWORK;**005004;20-Aug-2007 08:41;Build 38
"RTN","RGCWENC1",3,0)
 ; Visit creation API
"RTN","RGCWENC1",4,0)
GETVISIT(IN,OUT) ;
"RTN","RGCWENC1",5,0)
 ;
"RTN","RGCWENC1",6,0)
 ; >> All date/time variables must be in FileMan internal format
"RTN","RGCWENC1",7,0)
 ;
"RTN","RGCWENC1",8,0)
 ; Special Incoming Variables:
"RTN","RGCWENC1",9,0)
 ;  IN("FORCE ADD")   = 1    ; no matter what, create new visit (Optional)
"RTN","RGCWENC1",10,0)
 ;  IN ("NEVER ADD")  = 1    ; never add visit, just try to find one or more (Optional)
"RTN","RGCWENC1",11,0)
 ;  IN("ANCILLARY")   = 1    ; for ancillary packages to create noon visit if no match found (Optional)
"RTN","RGCWENC1",12,0)
 ;
"RTN","RGCWENC1",13,0)
 ; Incoming Variables used in Matching: REQUIRED
"RTN","RGCWENC1",14,0)
 ;  IN("PAT")         = patient IEN (file 2 or 9000001)
"RTN","RGCWENC1",15,0)
 ;  IN("VISIT DATE")  = visit date & time (same as check-in date & time)
"RTN","RGCWENC1",16,0)
 ;  IN ("SITE")       = location of encounter IEN (file 4 or 9999999.06)
"RTN","RGCWENC1",17,0)
 ;  IN("VISIT TYPE")  = internal value for field .03 in Visit file
"RTN","RGCWENC1",18,0)
 ;  IN("SRV CAT")     = internal value for service category
"RTN","RGCWENC1",19,0)
 ;  IN("TIME RANGE")  = #   ; range in minutes for matching on visit time; REQUIRED unless FORCE ADD set
"RTN","RGCWENC1",20,0)
 ;                             ;   zero=exact matches only; -1=don't match on time
"RTN","RGCWENC1",21,0)
 ;
"RTN","RGCWENC1",22,0)
 ;   These are used to match if sent (Optional)
"RTN","RGCWENC1",23,0)
 ;  IN("PROVIDER")    = IEN for provider to match from file 200
"RTN","RGCWENC1",24,0)
 ;  IN("CLINIC CODE") = IEN of clinic stop code (file 40.7)
"RTN","RGCWENC1",25,0)
 ;  IN("HOS LOC")     = IEN of hospital location (file 44)
"RTN","RGCWENC1",26,0)
 ;
"RTN","RGCWENC1",27,0)
 ; Incoming Variables used in creating appt and visit
"RTN","RGCWENC1",28,0)
 ;  IN("USR")         = user IEN in file 200; REQUIRED
"RTN","RGCWENC1",29,0)
 ;
"RTN","RGCWENC1",30,0)
 ; Incoming PCC variables for adding additional info to visit (Optional)
"RTN","RGCWENC1",31,0)
 ;  IN("APCDOLOC") = Outside Location (#2101)
"RTN","RGCWENC1",32,0)
 ;
"RTN","RGCWENC1",33,0)
 ; Outgoing Array:
"RTN","RGCWENC1",34,0)
 ;  OUT(0) always set
"RTN","RGCWENC1",35,0)
 ;    if = 0 none found and may have error message in 2nd piece
"RTN","RGCWENC1",36,0)
 ;    if = 1 and OUT(visit ien)="ADD" new visit just created
"RTN","RGCWENC1",37,0)
 ;    if = 1 and OUT(visit ien)=#; # is time difference in minutes
"RTN","RGCWENC1",38,0)
 ;    if >1, multiple OUT(visit ien) entries exist
"RTN","RGCWENC1",39,0)
 ;
"RTN","RGCWENC1",40,0)
 N TMP
"RTN","RGCWENC1",41,0)
 K OUT
"RTN","RGCWENC1",42,0)
 M TMP=IN    ;don't mess with incoming array
"RTN","RGCWENC1",43,0)
 Q:'$$HAVEREQ(.TMP,.OUT)    ;check required fields
"RTN","RGCWENC1",44,0)
 ; if forced add, skip visit match attempt
"RTN","RGCWENC1",45,0)
 I $G(TMP("FORCE ADD")) D ADDVIST(.TMP,.OUT) Q
"RTN","RGCWENC1",46,0)
 ; attempt to find matching visits; return OUT array
"RTN","RGCWENC1",47,0)
 D MATCH(.TMP,.OUT)
"RTN","RGCWENC1",48,0)
 ; if appt date set, go to check-in
"RTN","RGCWENC1",49,0)
 I $G(TMP("APPT DATE")),'$G(TMP("NEVER ADD")) D ADDVIST(.TMP,.OUT) Q
"RTN","RGCWENC1",50,0)
 ; if only 1 visit found, return ien and quit
"RTN","RGCWENC1",51,0)
 ; if >1 visits found, return full array and quit
"RTN","RGCWENC1",52,0)
 Q:OUT(0)
"RTN","RGCWENC1",53,0)
 ; if called by ancillary package, just create noon visit and quit
"RTN","RGCWENC1",54,0)
 I $G(TMP("ANCILLARY")) D  Q
"RTN","RGCWENC1",55,0)
 .K TMP("ANCILLARY"),TMP("PROVIDER")             ; set up to find other ancillaries
"RTN","RGCWENC1",56,0)
 .D MATCH(.TMP,.OUT)
"RTN","RGCWENC1",57,0)
 .Q:OUT(0)=1                                     ; try to match on hos loc or clinic
"RTN","RGCWENC1",58,0)
 .Q:$G(TMP("NEVER ADD"))=1                       ; if in never add mode, quit after 2nd match
"RTN","RGCWENC1",59,0)
 .S TMP("VISIT DATE")=TMP("VISIT DATE")\1        ; take off time; PCC will add noon
"RTN","RGCWENC1",60,0)
 .D ADDVIST(.TMP,.OUT)                           ; create noon visit; no PIMS link
"RTN","RGCWENC1",61,0)
 ; if no visits found but in never add mode, just quit
"RTN","RGCWENC1",62,0)
 Q:$G(TMP("NEVER ADD"))=1
"RTN","RGCWENC1",63,0)
 ; otherwise, logic falls through to create visit choices
"RTN","RGCWENC1",64,0)
 D ADDVIST(.TMP,.OUT)
"RTN","RGCWENC1",65,0)
 Q
"RTN","RGCWENC1",66,0)
 ; Check required fields
"RTN","RGCWENC1",67,0)
HAVEREQ(IN,OUT) ;
"RTN","RGCWENC1",68,0)
 I ('$G(IN("FORCE ADD"))),('$D(IN("TIME RANGE"))) S OUT(0)="0^Missing Time Range" Q 0
"RTN","RGCWENC1",69,0)
 I '$D(IN("PAT")) S OUT(0)="0^Missing Patient IEN" Q 0
"RTN","RGCWENC1",70,0)
 I '$D(IN("VISIT DATE")) S OUT(0)="0^Missing Visit Date" Q 0
"RTN","RGCWENC1",71,0)
 I IN("VISIT DATE")\1>DT S OUT(0)="0^Future Dates Not Allowed" Q 0
"RTN","RGCWENC1",72,0)
 I '$D(IN("SITE")) S OUT(0)="0^Missing Facility/Site" Q 0
"RTN","RGCWENC1",73,0)
 I '$D(IN("VISIT TYPE")) S OUT(0)="0^Missing Visit Type" Q 0
"RTN","RGCWENC1",74,0)
 I '$D(IN("SRV CAT")) S OUT(0)="0^Missing Service Category" Q 0
"RTN","RGCWENC1",75,0)
 I '$D(IN("USR")) S OUT(0)="0^Missing User IEN" Q 0
"RTN","RGCWENC1",76,0)
 I $G(IN("HOS LOC")),'$G(IN("CLINIC CODE")) S IN("CLINIC CODE")=$$GET1^DIQ(44,IN("HOS LOC"),8,"I")
"RTN","RGCWENC1",77,0)
 Q 1
"RTN","RGCWENC1",78,0)
 ; Set DATE and END based on TIME RANGE setting in minutes
"RTN","RGCWENC1",79,0)
TIME(RANGE,VISIT,DATE,END) ;
"RTN","RGCWENC1",80,0)
 N TMDIF,SW
"RTN","RGCWENC1",81,0)
 S TMDIF=$S(RANGE<1:0,1:RANGE)
"RTN","RGCWENC1",82,0)
 S DATE=$$FMADD^XLFDT(VISIT,,,-TMDIF)
"RTN","RGCWENC1",83,0)
 S END=$$FMADD^XLFDT(VISIT,,,TMDIF)
"RTN","RGCWENC1",84,0)
 I (DATE\1)<(END\1) S SW=(END\1),END=(DATE\1)_".9999",DATE=SW
"RTN","RGCWENC1",85,0)
 S DATE=(9999999-(DATE\1)_"."_$P(DATE,".",2))-.0001
"RTN","RGCWENC1",86,0)
 S END=9999999-(END\1)_"."_$P(END,".",2)
"RTN","RGCWENC1",87,0)
 I RANGE=-1 S END=END\1_".9999",DATE=DATE\1     ;no time range used; go from begin one day to end
"RTN","RGCWENC1",88,0)
 Q
"RTN","RGCWENC1",89,0)
 ; Find matching visits based on IN array
"RTN","RGCWENC1",90,0)
 ; OUT(0)=# of visits found^optional error message
"RTN","RGCWENC1",91,0)
MATCH(IN,OUT) ;
"RTN","RGCWENC1",92,0)
 N END,DATE,VIEN,STOP,DIFF
"RTN","RGCWENC1",93,0)
 S OUT(0)=0
"RTN","RGCWENC1",94,0)
 D TIME(IN("TIME RANGE"),IN("VISIT DATE"),.DATE,.END)
"RTN","RGCWENC1",95,0)
 F  S DATE=$O(^AUPNVSIT("AA",IN("PAT"),DATE)) Q:'DATE  Q:(DATE>END)  D
"RTN","RGCWENC1",96,0)
 .S VIEN=0
"RTN","RGCWENC1",97,0)
 .F  S VIEN=$O(^AUPNVSIT("AA",IN("PAT"),DATE,VIEN)) Q:'VIEN  D
"RTN","RGCWENC1",98,0)
 ..I $P($G(^AUPNVSIT(VIEN,0)),U,11) Q                        ;check for delete flag just in case xref not killed
"RTN","RGCWENC1",99,0)
 ..I IN("SITE")'=$$GET1^DIQ(9000010,VIEN,.06,"I") Q          ;no match on loc of enc
"RTN","RGCWENC1",100,0)
 ..I IN("VISIT TYPE")'=$$GET1^DIQ(9000010,VIEN,.03,"I") Q    ;no match on vist type
"RTN","RGCWENC1",101,0)
 ..I IN("SRV CAT")'=$$GET1^DIQ(9000010,VIEN,.07,"I") Q       ;no match on service category
"RTN","RGCWENC1",102,0)
 ..I IN("TIME RANGE")>-1 S STOP=0 D  Q:STOP                  ;check time range
"RTN","RGCWENC1",103,0)
 ...S DIFF=$$TIMEDIF(IN("VISIT DATE"),VIEN)                 ;find difference in minutes
"RTN","RGCWENC1",104,0)
 ...S:$$ABS^XLFMTH(DIFF)>IN("TIME RANGE") STOP=1
"RTN","RGCWENC1",105,0)
 ..Q:'$$PRVMTCH    ; if provider sent and didn't match, skip
"RTN","RGCWENC1",106,0)
 ..;
"RTN","RGCWENC1",107,0)
 ..; if called by ancillary, falls through and sets visit into array
"RTN","RGCWENC1",108,0)
 ..; otherwise, check if app wants to match on clinic code or hosp location
"RTN","RGCWENC1",109,0)
 ..I '$G(IN("ANCILLARY")) S STOP=0 D  Q:STOP
"RTN","RGCWENC1",110,0)
 ...I $G(IN("HOS LOC")),'$G(IN("CLINIC CODE")) S IN("CLINIC CODE")=$$GET1^DIQ(44,IN("HOS LOC"),8,"I")
"RTN","RGCWENC1",111,0)
 ...I $G(IN("CLINIC CODE")),IN("CLINIC CODE")'=$$GET1^DIQ(9000010,VIEN,.08,"I") S STOP=1 Q  ;no match on clinic code
"RTN","RGCWENC1",112,0)
 ...I $G(IN("HOS LOC")),(IN("HOS LOC")'=$$GET1^DIQ(9000010,VIEN,.22,"I")) S STOP=1 Q  ;no match on hospital location
"RTN","RGCWENC1",113,0)
 ..S OUT(0)=OUT(0)+1
"RTN","RGCWENC1",114,0)
 ..S OUT(VIEN)=$$TIMEDIF(IN("VISIT DATE"),VIEN)
"RTN","RGCWENC1",115,0)
 Q
"RTN","RGCWENC1",116,0)
 ; Do visits match on provider?
"RTN","RGCWENC1",117,0)
PRVMTCH() ;
"RTN","RGCWENC1",118,0)
 N PRVS,IEN
"RTN","RGCWENC1",119,0)
 I '$G(IN("PROVIDER")) Q 1     ; if no provider sent, assume okay
"RTN","RGCWENC1",120,0)
 ; find all v provider entries for visit
"RTN","RGCWENC1",121,0)
 S IEN=0
"RTN","RGCWENC1",122,0)
 F  S IEN=$O(^AUPNVPRV("AD",VIEN,IEN)) Q:'IEN  D
"RTN","RGCWENC1",123,0)
 .S PRVS(+$G(^AUPNVPRV(IEN,0)))=""
"RTN","RGCWENC1",124,0)
 Q ''$D(PRVS(IN("PROVIDER")))
"RTN","RGCWENC1",125,0)
 ;
"RTN","RGCWENC1",126,0)
TIMEDIF(VDTTM,VIEN) ; return time difference between incoming time and current visit
"RTN","RGCWENC1",127,0)
 Q $$FMDIFF^XLFDT(VDTTM,+$G(^AUPNVSIT(VIEN,0)),2)\60
"RTN","RGCWENC1",128,0)
 ; Create visit
"RTN","RGCWENC1",129,0)
ADDVIST(IN,OUT) ;
"RTN","RGCWENC1",130,0)
 N VSIT,VSITPKG,DFN
"RTN","RGCWENC1",131,0)
 S VSIT("VDT")=IN("VISIT DATE")
"RTN","RGCWENC1",132,0)
 S VSIT("TYP")=IN("VISIT TYPE")
"RTN","RGCWENC1",133,0)
 S VSIT("PAT")=IN("PAT")
"RTN","RGCWENC1",134,0)
 S VSIT("INS")=IN("SITE")
"RTN","RGCWENC1",135,0)
 S VSIT("SVC")=IN("SRV CAT")
"RTN","RGCWENC1",136,0)
 S VSIT("DSS")=$G(IN("CLINIC CODE"))
"RTN","RGCWENC1",137,0)
 S VSIT("LOC")=$G(IN("HOS LOC"))
"RTN","RGCWENC1",138,0)
 S VSIT("USR")=IN("USR")
"RTN","RGCWENC1",139,0)
 S VSIT("OPT")=$G(XQY)
"RTN","RGCWENC1",140,0)
 S VSIT("VID")=$$GETVID^VSITVID
"RTN","RGCWENC1",141,0)
 S:$D(IN("APCDOLOC")) VSIT("OUT")=IN("APCDOLOC")
"RTN","RGCWENC1",142,0)
 S VSIT(0)="F"
"RTN","RGCWENC1",143,0)
 S VSITPKG="RGCW"
"RTN","RGCWENC1",144,0)
 S DFN=IN("PAT")
"RTN","RGCWENC1",145,0)
 D ^VSIT
"RTN","RGCWENC1",146,0)
 I $G(VSIT("IEN"))'>0 S OUT(0)="0^Could not create visit."
"RTN","RGCWENC1",147,0)
 E  S OUT(+VSIT("IEN"))="ADD",OUT(0)=1
"RTN","RGCWENC1",148,0)
 Q
"RTN","RGCWENCX")
0^2^B118148848
"RTN","RGCWENCX",1,0)
RGCWENCX ;RI/CBMI/DKM - Encounter Context Support ;17-Mar-2014 15:59;DKM
"RTN","RGCWENCX",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 38
"RTN","RGCWENCX",3,0)
 ; RPC: Fetch visit data given visit file IEN
"RTN","RGCWENCX",4,0)
 ; Returns hosp loc^visit date^service category^dfn^visit id^locked
"RTN","RGCWENCX",5,0)
GETVISIT(DATA,IEN) ;EP
"RTN","RGCWENCX",6,0)
 N VSIT,DLM
"RTN","RGCWENCX",7,0)
 S (DLM,DATA)=""
"RTN","RGCWENCX",8,0)
 Q:$$LOOKUP^VSIT(IEN,"I",0)<1
"RTN","RGCWENCX",9,0)
 Q:$G(VSIT("DEL"))
"RTN","RGCWENCX",10,0)
 F VSIT="LOC","VDT","SVC","PAT","VID" S DATA=DATA_DLM_VSIT(VSIT),DLM=U
"RTN","RGCWENCX",11,0)
 S DATA=DATA_U_$$ISLOCKED(IEN)
"RTN","RGCWENCX",12,0)
 Q
"RTN","RGCWENCX",13,0)
 ; RPC: Fetch visit IEN given visit id
"RTN","RGCWENCX",14,0)
VID2IEN(DATA,VID) ;EP
"RTN","RGCWENCX",15,0)
 S DATA=$$VID2IEN^VSIT(VID)
"RTN","RGCWENCX",16,0)
 Q
"RTN","RGCWENCX",17,0)
 ; RPC: Return IEN of hospital location
"RTN","RGCWENCX",18,0)
LOCIEN(DATA,LOC) ;EP
"RTN","RGCWENCX",19,0)
 S DATA=$$FIND1^DIC(44,"","QX",LOC)
"RTN","RGCWENCX",20,0)
 Q
"RTN","RGCWENCX",21,0)
 ; RPC: Return values for specified encounter
"RTN","RGCWENCX",22,0)
 ;   DFN   = Patient IEN
"RTN","RGCWENCX",23,0)
 ;   VSTR  = Visit string (extended)
"RTN","RGCWENCX",24,0)
 ;   PRV   = Provider
"RTN","RGCWENCX",25,0)
 ;   CREATE= -1=Always, 0=never, 1=If not found
"RTN","RGCWENCX",26,0)
 ;   Return value =
"RTN","RGCWENCX",27,0)
 ;        1       2       3       4        5       6        7       8      9
"RTN","RGCWENCX",28,0)
 ;     LOCNAME^LOCABBR^ROOMBED^PROVIEN^PROVNAME^VISITIEN^VISITID^LOCKED^ERRORTXT
"RTN","RGCWENCX",29,0)
FETCH(DATA,DFN,VSTR,PRV,CREATE) ;EP
"RTN","RGCWENCX",30,0)
 N IEN,X,FETCH
"RTN","RGCWENCX",31,0)
 S PRV=+$G(PRV)
"RTN","RGCWENCX",32,0)
 S FETCH=$$GET^XPAR("ALL","RGCWENCX PROV ENC FETCH")
"RTN","RGCWENCX",33,0)
 I 'PRV,$$ISPROV^RGCWFUSR S PRV=DUZ
"RTN","RGCWENCX",34,0)
 S IEN=$$VSTR2VIS(DFN,.VSTR,.CREATE,PRV)
"RTN","RGCWENCX",35,0)
 I IEN>0,'PRV,FETCH D
"RTN","RGCWENCX",36,0)
 .D GETPRV2(.X,IEN,1)
"RTN","RGCWENCX",37,0)
 .S PRV=+$O(X(0))
"RTN","RGCWENCX",38,0)
 S DATA=$P($G(^SC(+VSTR,0)),U,1,2)
"RTN","RGCWENCX",39,0)
 S $P(DATA,U,3)=$P($G(^DPT(DFN,.101)),U)
"RTN","RGCWENCX",40,0)
 S $P(DATA,U,4)=PRV
"RTN","RGCWENCX",41,0)
 S $P(DATA,U,5)=$P($G(^VA(200,PRV,0)),U)
"RTN","RGCWENCX",42,0)
 I IEN>0 S $P(DATA,U,6)=IEN,$P(DATA,U,7)=$P($G(^AUPNVSIT(IEN,150)),U),$P(DATA,U,8)=$$ISLOCKED(IEN)
"RTN","RGCWENCX",43,0)
 E  S $P(DATA,U,9)=$P(IEN,U,2)
"RTN","RGCWENCX",44,0)
 Q
"RTN","RGCWENCX",45,0)
 ; RPC: Return location info
"RTN","RGCWENCX",46,0)
 ;   Returns 0 node of HOSPITAL LOCATION file for specified entry.
"RTN","RGCWENCX",47,0)
LOCINFO(DATA,LOC) ;
"RTN","RGCWENCX",48,0)
 Q $G(^SC(+LOC,0))
"RTN","RGCWENCX",49,0)
 ; Find a visit
"RTN","RGCWENCX",50,0)
 ;   DFN = Patient IEN
"RTN","RGCWENCX",51,0)
 ;   DAT = Visit date/time
"RTN","RGCWENCX",52,0)
 ;   CAT = Service category
"RTN","RGCWENCX",53,0)
 ;   LOC = Value to compare (location or stop code)
"RTN","RGCWENCX",54,0)
 ;   CRE = Force create?
"RTN","RGCWENCX",55,0)
 ;   PRV = Provider IEN to restrict search (optional)
"RTN","RGCWENCX",56,0)
 ;   ELC = Encounter location (optional)
"RTN","RGCWENCX",57,0)
 ; Returns one of:
"RTN","RGCWENCX",58,0)
 ;   If found or created: visit ien
"RTN","RGCWENCX",59,0)
 ;   If not found: 0
"RTN","RGCWENCX",60,0)
 ;   If error: -1^error message
"RTN","RGCWENCX",61,0)
FNDVIS(DFN,DAT,CAT,LOC,CRE,PRV,ELC) ;PEP - Find a visit
"RTN","RGCWENCX",62,0)
 N IN,OUT,IEN,DIF
"RTN","RGCWENCX",63,0)
 S IN("PAT")=DFN
"RTN","RGCWENCX",64,0)
 S IN("VISIT DATE")=DAT
"RTN","RGCWENCX",65,0)
 S IN("VISIT TYPE")=$S(CAT="E":"O",1:$S($G(DUZ("AG"))="I":$$GET1^DIQ(9001000,DUZ(2),.04,"I"),1:$$GET^XPAR("ALL","RGCWENCX VISIT TYPE")))
"RTN","RGCWENCX",66,0)
 S IN("SRV CAT")=CAT
"RTN","RGCWENCX",67,0)
 S IN("TIME RANGE")=60
"RTN","RGCWENCX",68,0)
 S IN("USR")=DUZ
"RTN","RGCWENCX",69,0)
 S:$G(LOC) IN("HOS LOC")=LOC
"RTN","RGCWENCX",70,0)
 S:$G(XQY) IN("APCDOPT")=XQY
"RTN","RGCWENCX",71,0)
 S:$G(PRV) IN("PROVIDER")=PRV
"RTN","RGCWENCX",72,0)
 S ELC=$G(ELC)
"RTN","RGCWENCX",73,0)
 I $L(ELC),ELC'=+ELC D
"RTN","RGCWENCX",74,0)
 .S IN("APCDOLOC")=ELC
"RTN","RGCWENCX",75,0)
 .S ELC=$$GET^XPAR("ALL","RGCWENCX OTHER LOCATION")
"RTN","RGCWENCX",76,0)
 S IN("SITE")=$S(ELC:ELC,$P($G(^SC(+$G(LOC),0)),U,4):$P(^(0),U,4),1:DUZ(2))
"RTN","RGCWENCX",77,0)
 I 'CRE S IN("NEVER ADD")=1
"RTN","RGCWENCX",78,0)
 E  I CRE<0 S IN("FORCE ADD")=1
"RTN","RGCWENCX",79,0)
 I $G(DUZ("AG"))="I" D
"RTN","RGCWENCX",80,0)
 .D GETVISIT^BSDAPI4(.IN,.OUT)
"RTN","RGCWENCX",81,0)
 E  D GETVISIT^RGCWENC1(.IN,.OUT)
"RTN","RGCWENCX",82,0)
 Q:'OUT(0) $S(OUT(0)[U:"-1^"_$P(OUT(0),U,2),1:0)
"RTN","RGCWENCX",83,0)
 S IEN=0,DIF=999999
"RTN","RGCWENCX",84,0)
 F  S IEN=$O(OUT(IEN)) Q:'IEN  D
"RTN","RGCWENCX",85,0)
 .I OUT(IEN)="ADD" D
"RTN","RGCWENCX",86,0)
 ..N VSTR
"RTN","RGCWENCX",87,0)
 ..S VSTR=$$VIS2VSTR(DFN,IEN)
"RTN","RGCWENCX",88,0)
 ..D BRDCAST^CIANBEVT("PCC."_DFN_".VST",VSTR)
"RTN","RGCWENCX",89,0)
 ..D:$G(PRV) UPDPRV(,DFN,VSTR,PRV)
"RTN","RGCWENCX",90,0)
 .S:$$ABS(OUT(IEN))<DIF DIF=$$ABS(OUT(IEN)),IEN(0)=IEN
"RTN","RGCWENCX",91,0)
 Q IEN(0)
"RTN","RGCWENCX",92,0)
 ; Return absolute value
"RTN","RGCWENCX",93,0)
ABS(X) Q $S(X<0:-X,1:X)
"RTN","RGCWENCX",94,0)
 ; Return a visit ien from a visit string (create if necessary)
"RTN","RGCWENCX",95,0)
 ;   DFN    = Patient IEN
"RTN","RGCWENCX",96,0)
 ;   VSTR   = Visit string
"RTN","RGCWENCX",97,0)
 ;   CREATE = Create flag
"RTN","RGCWENCX",98,0)
 ;            0 = Don't create
"RTN","RGCWENCX",99,0)
 ;           >0 = Create if not found
"RTN","RGCWENCX",100,0)
 ;           <0 = Always create
"RTN","RGCWENCX",101,0)
 ;   PRV    = Provider IEN to restrict visit search (optional)
"RTN","RGCWENCX",102,0)
VSTR2VIS(DFN,VSTR,CREATE,PRV) ;PEP - Convert visit string to visit IEN
"RTN","RGCWENCX",103,0)
 N IEN,DAT,CAT,LOC,FLG,VSIT,LP
"RTN","RGCWENCX",104,0)
 S LOC=+VSTR,DAT=+$P(VSTR,";",2),CAT=$P(VSTR,";",3),IEN=+$P(VSTR,";",4),CREATE=+$G(CREATE)
"RTN","RGCWENCX",105,0)
 I 'IEN,CREATE'<0 S IEN=$$FNDVIS(DFN,DAT,CAT,LOC,0,.PRV)
"RTN","RGCWENCX",106,0)
 I 'IEN,CREATE'<0 S IEN=$$FNDVIS(DFN,DAT,CAT,LOC,0)
"RTN","RGCWENCX",107,0)
 I 'IEN,CREATE S IEN=$$FNDVIS(DFN,DAT,CAT,LOC,CREATE,.PRV)
"RTN","RGCWENCX",108,0)
 S:IEN>0 VSTR=$$VIS2VSTR(DFN,IEN,.IEN),$P(VSTR,";")=LOC
"RTN","RGCWENCX",109,0)
 Q IEN
"RTN","RGCWENCX",110,0)
 ; Return a visit string given visit ien
"RTN","RGCWENCX",111,0)
VIS2VSTR(DFN,IEN,ERR) ;PEP - Convert visit IEN to visit string
"RTN","RGCWENCX",112,0)
 N VSTR
"RTN","RGCWENCX",113,0)
 S VSTR=$G(^AUPNVSIT(+IEN,0))
"RTN","RGCWENCX",114,0)
 I '$L(VSTR) S ERR="-1^Visit does not exist"
"RTN","RGCWENCX",115,0)
 E  I $P(VSTR,U,5)'=DFN S ERR="-1^Visit does not belong to current patient",VSTR=""
"RTN","RGCWENCX",116,0)
 E  S VSTR=$P(VSTR,U,22)_";"_+VSTR_";"_$P(VSTR,U,7)_";"_IEN
"RTN","RGCWENCX",117,0)
 Q VSTR
"RTN","RGCWENCX",118,0)
 ; RPC: Return a list of appointments
"RTN","RGCWENCX",119,0)
 ; APPTTIME^LOCIEN^LOCNAME^EXTSTATUS
"RTN","RGCWENCX",120,0)
APPTLST(DATA,DFN) ;EP
"RTN","RGCWENCX",121,0)
 N VASD,I
"RTN","RGCWENCX",122,0)
 S VASD("F")=$$HTFM^XLFDT($H-30,1)
"RTN","RGCWENCX",123,0)
 S VASD("T")=$$HTFM^XLFDT($H+1,1)_".2359"
"RTN","RGCWENCX",124,0)
 S VASD("W")="123456789"
"RTN","RGCWENCX",125,0)
 D SDA^VADPT
"RTN","RGCWENCX",126,0)
 S I=0
"RTN","RGCWENCX",127,0)
 F  S I=$O(^UTILITY("VASD",$J,I)) Q:'I  D
"RTN","RGCWENCX",128,0)
 .S DATA(I)=$P(^UTILITY("VASD",$J,I,"I"),U,1,2)_U_$P(^("E"),U,2,3)
"RTN","RGCWENCX",129,0)
 K ^UTILITY("VASD",$J)
"RTN","RGCWENCX",130,0)
 Q
"RTN","RGCWENCX",131,0)
 ; RPC: Return a list of admissions
"RTN","RGCWENCX",132,0)
 ; VSTR^LOCNAME^ADMDATE^TYPE^LOCKED
"RTN","RGCWENCX",133,0)
ADMITLST(DATA,DFN,BEG,END) ;EP
"RTN","RGCWENCX",134,0)
 N TIM,MOV,CNT,IDT,IDT2
"RTN","RGCWENCX",135,0)
 S CNT=0,TIM=""
"RTN","RGCWENCX",136,0)
 S:'$G(BEG) BEG=2000000
"RTN","RGCWENCX",137,0)
 S:'$G(END) END=DT
"RTN","RGCWENCX",138,0)
 S IDT2=9999999-(BEG\1)+.9,IDT=9999999-(END\1)
"RTN","RGCWENCX",139,0)
 F  Q:'IDT!(IDT>IDT2)  D  S IDT=$O(^DGPM("ATID1",DFN,IDT))
"RTN","RGCWENCX",140,0)
 .S MOV=0 F  S MOV=$O(^DGPM("ATID1",DFN,IDT,MOV)) Q:MOV'>0  D
"RTN","RGCWENCX",141,0)
 ..S X=$$ADMITINF(DFN,MOV)
"RTN","RGCWENCX",142,0)
 ..S:X CNT=CNT+1,DATA(CNT)=X
"RTN","RGCWENCX",143,0)
 Q
"RTN","RGCWENCX",144,0)
 ; RPC: Return current admission info
"RTN","RGCWENCX",145,0)
 ; VSTR^LOCNAME^ADMDATE^TYPE^LOCKED
"RTN","RGCWENCX",146,0)
ADMITCUR(DATA,DFN) ;EP
"RTN","RGCWENCX",147,0)
 S DATA=$$ADMITINF(DFN,+$G(^DPT(DFN,.105)))
"RTN","RGCWENCX",148,0)
 Q
"RTN","RGCWENCX",149,0)
 ; Return admission info
"RTN","RGCWENCX",150,0)
 ; VSTR^LOCNAME^ADMDATE^TYPE^LOCKED
"RTN","RGCWENCX",151,0)
ADMITINF(DFN,MOV) ;EP
"RTN","RGCWENCX",152,0)
 N VIEN,VSTR,LLOC,XLOC,HLOC,CMOV,AMOV,DMOV,LMOV,MTIM,XTYP,X0
"RTN","RGCWENCX",153,0)
 S X0=$G(^DGPM(+MOV,0))
"RTN","RGCWENCX",154,0)
 Q:$P(X0,U,3)'=DFN ""
"RTN","RGCWENCX",155,0)
 S MTIM=$P(X0,U),DMOV=$P(X0,U,17),VIEN=$P(X0,U,27)
"RTN","RGCWENCX",156,0)
 S:'$D(^AUPNVSIT(+VIEN,0)) VIEN=""
"RTN","RGCWENCX",157,0)
 S CMOV=+$G(^DPT(DFN,.102)),AMOV=+$G(^(.105))
"RTN","RGCWENCX",158,0)
 S XTYP=$P($G(^DG(405.1,+$P(X0,U,4),0)),U)
"RTN","RGCWENCX",159,0)
 I MOV=AMOV,CMOV'=AMOV,$D(^DGPM(CMOV,0)) S LMOV=CMOV
"RTN","RGCWENCX",160,0)
 E  S LMOV=MOV
"RTN","RGCWENCX",161,0)
 D AL2(MOV,.XLOC,.HLOC),AL2(LMOV,.LLOC,.HLOC):LMOV'=MOV
"RTN","RGCWENCX",162,0)
 I $L($G(LLOC)),LLOC'=XLOC S XLOC=XLOC_" ("_LLOC_")"
"RTN","RGCWENCX",163,0)
 S VSTR=HLOC_";"_MTIM_";H;"_VIEN
"RTN","RGCWENCX",164,0)
 Q VSTR_U_XLOC_U_MTIM_U_XTYP_U_$$ISLOCKED(VIEN)
"RTN","RGCWENCX",165,0)
 ; Return ward location name and associated hospital location ien for movement
"RTN","RGCWENCX",166,0)
AL2(MOV,WLOC,HLOC) ;
"RTN","RGCWENCX",167,0)
 S WLOC=+$P($G(^DGPM(MOV,0)),U,6),WLOC=$P($G(^DIC(42,WLOC,0)),U),HLOC=+$G(^(44))
"RTN","RGCWENCX",168,0)
 Q
"RTN","RGCWENCX",169,0)
 ; RPC: Get discharge movement information
"RTN","RGCWENCX",170,0)
DISCHRG(DATA,DFN,ADMITDT) ;EP
"RTN","RGCWENCX",171,0)
 N VAIP
"RTN","RGCWENCX",172,0)
 S DATA=DT
"RTN","RGCWENCX",173,0)
 Q:'$G(ADMITDT)
"RTN","RGCWENCX",174,0)
 S VAIP("D")=ADMITDT
"RTN","RGCWENCX",175,0)
 D 52^VADPT
"RTN","RGCWENCX",176,0)
 S:VAIP(17) DATA=+VAIP(17,1)
"RTN","RGCWENCX",177,0)
 Q
"RTN","RGCWENCX",178,0)
 ; Returns true if active hospital location
"RTN","RGCWENCX",179,0)
 ; LOC = IEN of hospital location
"RTN","RGCWENCX",180,0)
 ; DAT = optional date to check (defaults to today)
"RTN","RGCWENCX",181,0)
ACTLOC(LOC,DAT) ;PEP - Is active location?
"RTN","RGCWENCX",182,0)
 N D0,X
"RTN","RGCWENCX",183,0)
 S X=$G(^SC(LOC,0))
"RTN","RGCWENCX",184,0)
 Q:'$L(X) 0                                                            ; Screen nonexistent entries
"RTN","RGCWENCX",185,0)
 S X=$P($G(^DG(40.8,+$P(X,U,15),0)),U,7)
"RTN","RGCWENCX",186,0)
 I X,X'=DUZ(2) Q 0                                                     ; Screen clinics not in current division
"RTN","RGCWENCX",187,0)
 Q:+$G(^SC(LOC,"OOS")) 0                                               ; Screen OOS entry
"RTN","RGCWENCX",188,0)
 S D0=+$G(^SC(LOC,42)),DAT=$G(DAT,DT)\1
"RTN","RGCWENCX",189,0)
 I D0 D WIN^DGPMDDCF Q 'X                                              ; Check out of svc wards
"RTN","RGCWENCX",190,0)
 S X=$G(^SC(LOC,"I"))
"RTN","RGCWENCX",191,0)
 Q:'X 1                                                                ; No inactivate date
"RTN","RGCWENCX",192,0)
 Q:DAT'<$P(X,U)&($P(X,U,2)=""!(DAT<$P(X,U,2))) 0                       ; Check reactivate date
"RTN","RGCWENCX",193,0)
 Q 1                                                                   ; Must still be active
"RTN","RGCWENCX",194,0)
 ; RPC: Return a set of hospital locations
"RTN","RGCWENCX",195,0)
HOSPLOC(DATA,FROM,DIR,MAX,TYPE,START,END) ;EP
"RTN","RGCWENCX",196,0)
 N IEN,CNT,APT
"RTN","RGCWENCX",197,0)
 S FROM=$G(FROM),DIR=$G(DIR,1),MAX=$G(MAX,44),TYPE=$G(TYPE),CNT=0
"RTN","RGCWENCX",198,0)
 S START=$G(START)\1,END=$G(END)\1
"RTN","RGCWENCX",199,0)
 S:'END END=START
"RTN","RGCWENCX",200,0)
 F  S FROM=$O(^SC("B",FROM),DIR),IEN="" Q:FROM=""  D  Q:CNT'<MAX
"RTN","RGCWENCX",201,0)
 .F  S IEN=$O(^SC("B",FROM,IEN),DIR) Q:'IEN  D
"RTN","RGCWENCX",202,0)
 ..I $$ACTLOC(IEN),$P(^SC(IEN,0),U,3)[TYPE D
"RTN","RGCWENCX",203,0)
 ...I START S APT=$O(^SC(IEN,"S",START-.1))\1 Q:'APT!(APT>END)
"RTN","RGCWENCX",204,0)
 ...S CNT=CNT+1,DATA(CNT)=IEN_U_$P(^SC(IEN,0),U)_U_$S($G(DUZ("AG"))="I":$P($G(^BSDSC(IEN,0)),U,12),1:$P($G(^SC(IEN,0)),U,9))
"RTN","RGCWENCX",205,0)
 Q
"RTN","RGCWENCX",206,0)
 ; RPC: Return a set of clinics
"RTN","RGCWENCX",207,0)
CLINLOC(DATA,FROM,DIR,MAX,START,END) ;EP
"RTN","RGCWENCX",208,0)
 D HOSPLOC(.DATA,.FROM,.DIR,.MAX,"C",.START,.END)
"RTN","RGCWENCX",209,0)
 Q
"RTN","RGCWENCX",210,0)
 ; RPC: Return a set of wards
"RTN","RGCWENCX",211,0)
INPLOC(DATA,FROM,DIR,MAX) ;EP
"RTN","RGCWENCX",212,0)
 D HOSPLOC(.DATA,.FROM,.DIR,.MAX,"W")
"RTN","RGCWENCX",213,0)
 Q
"RTN","RGCWENCX",214,0)
 ; RPC: Return appts/visits for patient
"RTN","RGCWENCX",215,0)
 ;  DFN = Patient IEN
"RTN","RGCWENCX",216,0)
 ;  BEG = Beginning date to search (optional)
"RTN","RGCWENCX",217,0)
 ;        Defaults to RGCWENCX SEARCH RANGE START
"RTN","RGCWENCX",218,0)
 ;  END = Ending date to search (optional)
"RTN","RGCWENCX",219,0)
 ;        Defaults to RGCWENCX SEARCH RANGE END
"RTN","RGCWENCX",220,0)
 ;  LOC = If not specified, return all locations and all active appointments
"RTN","RGCWENCX",221,0)
 ;        If <0, return all locations and all appointments (except checked-in)
"RTN","RGCWENCX",222,0)
 ;        If >0, return only specified location and only active appointments
"RTN","RGCWENCX",223,0)
 ;SCEXC = Contains service category types to exclude (defaults to HXI)
"RTN","RGCWENCX",224,0)
 ; .DATA= List of results in format:
"RTN","RGCWENCX",225,0)
 ;        VSTR^LOCNAME^DATE^STATUS^LOCKED^PRV^PRVNM^STANDALONE
"RTN","RGCWENCX",226,0)
VISITLST(DATA,DFN,BEG,END,LOC,SCEXC) ;EP
"RTN","RGCWENCX",227,0)
 N VAERR,VASD,CNT,IDT,IDT2,STS,DTM,LOCNAM,LOCIEN,VSTR,IEN,LP,XI,XE,X
"RTN","RGCWENCX",228,0)
 S CNT=0,DATA=$$TMPGBL^RGVMRPC,LOC=+$G(LOC)
"RTN","RGCWENCX",229,0)
 S SCEXC=$G(SCEXC,"XI")  ;p9 removed H
"RTN","RGCWENCX",230,0)
 S:'$G(BEG) BEG=$$DTSTART
"RTN","RGCWENCX",231,0)
 S:'$G(END) END=$$DTSTOP+.9
"RTN","RGCWENCX",232,0)
 ; Return list of visits for a patient
"RTN","RGCWENCX",233,0)
 S IDT2=9999999-(BEG\1)+.9,IDT=9999999-(END\1)
"RTN","RGCWENCX",234,0)
 F  Q:'IDT!(IDT>IDT2)  D  S IDT=$O(^AUPNVSIT("AA",DFN,IDT))
"RTN","RGCWENCX",235,0)
 .F IEN=0:0 S IEN=$O(^AUPNVSIT("AA",DFN,IDT,IEN)) Q:'IEN  D
"RTN","RGCWENCX",236,0)
 ..N PRV
"RTN","RGCWENCX",237,0)
 ..S XI=$G(^AUPNVSIT(IEN,0)),DTM=+XI,LOCIEN=$P(XI,U,22),LOCNAM=$P($G(^SC(+LOCIEN,0),"Unknown"),U),X=$P(XI,U,7)
"RTN","RGCWENCX",238,0)
 ..Q:$P(XI,U,11)                                                       ; Ignore if logically deleted
"RTN","RGCWENCX",239,0)
 ..Q:'LOC&'LOCIEN
"RTN","RGCWENCX",240,0)
 ..Q:LOC>0&(LOC'=LOCIEN)
"RTN","RGCWENCX",241,0)
 ..D GETPRV2(.PRV,IEN,1)
"RTN","RGCWENCX",242,0)
 ..S PRV=$P($G(PRV(+$O(PRV(0)))),U,1,2)
"RTN","RGCWENCX",243,0)
 ..S VSTR=LOCIEN_";"_DTM_";"_X_";"_IEN,STS=$$SET^CIAU(X,$P($G(^DD(9000010,.07,0)),U,3))
"RTN","RGCWENCX",244,0)
 ..S:SCEXC'[X CNT=CNT+1,@DATA@(-DTM,CNT)=VSTR_U_LOCNAM_U_DTM_U_STS_U_$$ISLOCKED(IEN)_U_PRV_U_'$D(^SCE("AVSIT",IEN))
"RTN","RGCWENCX",245,0)
 Q:LOC>0
"RTN","RGCWENCX",246,0)
 ; Get appointments pending check-in
"RTN","RGCWENCX",247,0)
 S VASD("F")=$S(LOC<0:BEG,BEG<DT:DT,1:BEG)
"RTN","RGCWENCX",248,0)
 S VASD("T")=END
"RTN","RGCWENCX",249,0)
 S VASD("W")=$S(LOC<0:123456789,1:1)
"RTN","RGCWENCX",250,0)
 D SDA^VADPT
"RTN","RGCWENCX",251,0)
 S LP=0
"RTN","RGCWENCX",252,0)
 F  S LP=$O(^UTILITY("VASD",$J,LP)) Q:'LP  D
"RTN","RGCWENCX",253,0)
 .S XI=^UTILITY("VASD",$J,LP,"I"),XE=^("E")
"RTN","RGCWENCX",254,0)
 .S DTM=$P(XI,U),LOCIEN=$P(XI,U,2),LOCNAM=$P(XE,U,2)
"RTN","RGCWENCX",255,0)
 .Q:$$CHKDIN(DFN,LOCIEN,DTM)
"RTN","RGCWENCX",256,0)
 .S XI=$G(^DPT(DFN,"S",DTM,0))
"RTN","RGCWENCX",257,0)
 .Q:+XI'=LOCIEN
"RTN","RGCWENCX",258,0)
 .S XI=$P(XI,U,20),STS=$S(LOC<0:$P(XE,U,3),1:"Pending Check-In")
"RTN","RGCWENCX",259,0)
 .I XI,$P($G(^SCE(XI,0)),U,5) Q
"RTN","RGCWENCX",260,0)
 .S VSTR=LOCIEN_";"_DTM_";A"
"RTN","RGCWENCX",261,0)
 .S CNT=CNT+1,@DATA@(-DTM,CNT)=VSTR_U_LOCNAM_U_DTM_U_STS
"RTN","RGCWENCX",262,0)
 K ^UTILITY("VASD",$J)
"RTN","RGCWENCX",263,0)
 Q
"RTN","RGCWENCX",264,0)
 ; Returns true if checked in
"RTN","RGCWENCX",265,0)
CHKDIN(DFN,LOCIEN,DTM) ;
"RTN","RGCWENCX",266,0)
 Q:$G(DUZ("AG"))="I" $$CI^BSDU2(DFN,LOCIEN,DTM)
"RTN","RGCWENCX",267,0)
 Q ''$P($$STATUS^SDAMA308(DFN,DTM,LOCIEN),";",4)
"RTN","RGCWENCX",268,0)
 ; Returns visit lock status:
"RTN","RGCWENCX",269,0)
 ;  -1:  Visit not found
"RTN","RGCWENCX",270,0)
 ;   0:  Visit is not locked
"RTN","RGCWENCX",271,0)
 ;   1:  Visit is locked
"RTN","RGCWENCX",272,0)
ISLOCKED(IEN) ;PEP - Is visit locked?
"RTN","RGCWENCX",273,0)
 N DAT,DAYS,EXPDT
"RTN","RGCWENCX",274,0)
 S DAT=$$VISREFDT(IEN)
"RTN","RGCWENCX",275,0)
 Q:'DAT -1
"RTN","RGCWENCX",276,0)
 ;IHS/MSC/PLS - 02/18/09 - Parameter now holds lock expiration date
"RTN","RGCWENCX",277,0)
 S EXPDT=$$GET^XPAR("USR","RGCWENCX VISIT LOCK OVERRIDE","`"_IEN)
"RTN","RGCWENCX",278,0)
 Q:EXPDT'<$$DT^XLFDT() 0
"RTN","RGCWENCX",279,0)
 D:EXPDT DEL^XPAR("USR","RGCWENCX VISIT LOCK OVERRIDE","`"_IEN)  ; remove expired locked
"RTN","RGCWENCX",280,0)
 ;Q:$$GET^XPAR("USR","RGCWENCX VISIT LOCK OVERRIDE","`"_IEN) 0
"RTN","RGCWENCX",281,0)
 S DAYS=$$GET^XPAR("ALL","RGCWENCX VISIT LOCKED")
"RTN","RGCWENCX",282,0)
 Q $$FMDIFF^XLFDT(DT,DAT)>$S(DAYS<1:1,1:DAYS)
"RTN","RGCWENCX",283,0)
 ; Returns reference date for visit lock check
"RTN","RGCWENCX",284,0)
VISREFDT(IEN) ;
"RTN","RGCWENCX",285,0)
 N ADM,DIS,DAT
"RTN","RGCWENCX",286,0)
 S DAT=$P($G(^AUPNVSIT(+IEN,0)),U,2)
"RTN","RGCWENCX",287,0)
 Q:'DAT ""
"RTN","RGCWENCX",288,0)
 S ADM=$O(^DGPM("AVISIT",IEN,0))
"RTN","RGCWENCX",289,0)
 Q:'ADM DAT
"RTN","RGCWENCX",290,0)
 S DIS=$P($G(^DGPM(ADM,0)),U,17)
"RTN","RGCWENCX",291,0)
 Q $S(DIS:$P($G(^DGPM(DIS,0)),U),1:DT)
"RTN","RGCWENCX",292,0)
 ; RPC: Return providers associated with a visit (by VSTR)
"RTN","RGCWENCX",293,0)
 ; If PRI is set, returns primary only
"RTN","RGCWENCX",294,0)
 ; Returns as DATA(DUZ)=DUZ^Name^Primary^EncDT
"RTN","RGCWENCX",295,0)
GETPRV(DATA,DFN,VSTR,PRI) ;EP
"RTN","RGCWENCX",296,0)
 D GETPRV2(.DATA,$$VSTR2VIS(DFN,VSTR,0),.PRI)
"RTN","RGCWENCX",297,0)
 Q
"RTN","RGCWENCX",298,0)
 ; RPC: Return providers associated with a visit (by IEN)
"RTN","RGCWENCX",299,0)
 ; If PRI is set, returns primary only
"RTN","RGCWENCX",300,0)
 ; Returns as DATA(DUZ)=DUZ^Name^Primary^EncDT
"RTN","RGCWENCX",301,0)
GETPRV2(DATA,IEN,PRI) ;EP
"RTN","RGCWENCX",302,0)
 N LP,ED,PP,PR,X
"RTN","RGCWENCX",303,0)
 K DATA
"RTN","RGCWENCX",304,0)
 S LP=0,IEN=+IEN,PRI=+$G(PRI)
"RTN","RGCWENCX",305,0)
 F  S LP=$O(^AUPNVPRV("AD",IEN,LP)) Q:'LP  D
"RTN","RGCWENCX",306,0)
 .S X=$G(^AUPNVPRV(LP,0)),ED=$P($G(^(12)),U),PP=$P(X,U,4)="P",PR=+X
"RTN","RGCWENCX",307,0)
 .I $P(X,U,3)=IEN,'PRI!PP S DATA(PR)=PR_U_$$GET1^DIQ(200,PR,.01)_U_PP_U_ED
"RTN","RGCWENCX",308,0)
 Q
"RTN","RGCWENCX",309,0)
 ; RPC: Add/Remove providers to/from a visit
"RTN","RGCWENCX",310,0)
UPDPRV(DATA,DFN,VSTR,PRV) ;EP
"RTN","RGCWENCX",311,0)
 N PCC,ACT,PRI,PFG,RTN
"RTN","RGCWENCX",312,0)
 S:$D(PRV)=1 PRV(PRV)="P"
"RTN","RGCWENCX",313,0)
 S PRV="",PFG=0
"RTN","RGCWENCX",314,0)
 F  S PRV=$O(PRV(PRV)) Q:'$L(PRV)  D
"RTN","RGCWENCX",315,0)
 .S ACT=PRV(PRV),PRI=0
"RTN","RGCWENCX",316,0)
 .S:ACT="P" PRI='PFG,ACT="+",PFG=1
"RTN","RGCWENCX",317,0)
 .D ADDPCC("PRV"_ACT_U_PRV_"^^^^"_PRI)
"RTN","RGCWENCX",318,0)
 D:$D(PCC) SAVE^RGCWENPC(.DATA,.PCC)
"RTN","RGCWENCX",319,0)
 Q
"RTN","RGCWENCX",320,0)
 ; RPC: Check visit for missing elements
"RTN","RGCWENCX",321,0)
CHKVISIT(DATA,IEN) ;
"RTN","RGCWENCX",322,0)
 Q:$T(+2^RGCWXQPC)=""
"RTN","RGCWENCX",323,0)
 N RTN,CNT
"RTN","RGCWENCX",324,0)
 S CNT=0
"RTN","RGCWENCX",325,0)
 D NOPOV^RGCWXQPC(.RTN,IEN),CV1("POV")
"RTN","RGCWENCX",326,0)
 D NOEMC^RGCWXQPC(.RTN,IEN),CV1("E&M")
"RTN","RGCWENCX",327,0)
 Q
"RTN","RGCWENCX",328,0)
CV1(DX) S:$D(RTN) CNT=CNT+1,$P(RTN,U)=DX,DATA(CNT)=RTN
"RTN","RGCWENCX",329,0)
 K RTN
"RTN","RGCWENCX",330,0)
 Q
"RTN","RGCWENCX",331,0)
 ; Build PCC array
"RTN","RGCWENCX",332,0)
ADDPCC(X) ;
"RTN","RGCWENCX",333,0)
 S:'$D(PCC) PCC(1)="HDR^^^"_VSTR,PCC(2)="VST^PT^"_DFN
"RTN","RGCWENCX",334,0)
 S PCC($O(PCC(""),-1)+1)=X
"RTN","RGCWENCX",335,0)
 Q
"RTN","RGCWENCX",336,0)
 ;  VST may either be the visit ien or a visitstr
"RTN","RGCWENCX",337,0)
 ;  Optionally returns success indicator
"RTN","RGCWENCX",338,0)
SETCTX(VST) ;PEP - Set the encounter context
"RTN","RGCWENCX",339,0)
 N UID
"RTN","RGCWENCX",340,0)
 S UID=$$GETUID^CIANBUTL
"RTN","RGCWENCX",341,0)
 D:$L(UID) QUEUE^CIANBEVT("CONTEXT.ENCOUNTER",VST,UID)
"RTN","RGCWENCX",342,0)
 Q:$Q ''$L(UID)
"RTN","RGCWENCX",343,0)
 Q
"RTN","RGCWENCX",344,0)
 ; Return FM date given relative date
"RTN","RGCWENCX",345,0)
 ;   DAT = Relative date (e.g., T+1)
"RTN","RGCWENCX",346,0)
 ;   DFL = Default relative date (if DAT is not specified)
"RTN","RGCWENCX",347,0)
TOFM(DAT,DFL) ;
"RTN","RGCWENCX",348,0)
 N %DT,X,Y
"RTN","RGCWENCX",349,0)
 S X=$S(DAT="":DFL,1:DAT),%DT="TS"
"RTN","RGCWENCX",350,0)
 D ^%DT
"RTN","RGCWENCX",351,0)
 Q Y
"RTN","RGCWENCX",352,0)
 ; Return start date for encounters
"RTN","RGCWENCX",353,0)
DTSTART() ;EP
"RTN","RGCWENCX",354,0)
 Q $$TOFM($$GET^XPAR("ALL","RGCWENCX SEARCH RANGE START",1,"I"),"T-365")
"RTN","RGCWENCX",355,0)
 ; Return stop date for encounters
"RTN","RGCWENCX",356,0)
DTSTOP() ;EP
"RTN","RGCWENCX",357,0)
 Q $$TOFM($$GET^XPAR("ALL","RGCWENCX SEARCH RANGE STOP",1,"I"),"T+90")
"RTN","RGCWENCX",358,0)
 ; Return formatted visit detail report
"RTN","RGCWENCX",359,0)
ENINQ(DATA,VIEN) ;
"RTN","RGCWENCX",360,0)
 S DATA=$$TMPGBL^RGCWFRPC
"RTN","RGCWENCX",361,0)
 D CAPTURE^CIAUHFS($TR($$GET^XPAR($$ENT^RGCWFPAR("RGCWENCX DETAIL REPORT"),"RGCWENCX DETAIL REPORT"),"~",U),DATA,80)
"RTN","RGCWENCX",362,0)
 Q
"RTN","RGCWKDIN")
0^^B31823827
"RTN","RGCWKDIN",1,0)
RGCKDIN ;RI/CBMI/DKM - CareWeb KIDS installation support ;18-Mar-2014 23:53;DKM
"RTN","RGCWKDIN",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 38
"RTN","RGCWKDIN",3,0)
 ; Environment check
"RTN","RGCWKDIN",4,0)
EC X $G(@XPDGREF@("EC"))
"RTN","RGCWKDIN",5,0)
 Q
"RTN","RGCWKDIN",6,0)
 ; Preinit
"RTN","RGCWKDIN",7,0)
PRE N RGX,RGY
"RTN","RGCWKDIN",8,0)
 D MES(),OBJINST,SDINIT^RGCWFUTL(,60,1)
"RTN","RGCWKDIN",9,0)
 F  D  Q:'RGX
"RTN","RGCWKDIN",10,0)
 .S RGX=$$SHOWSESS^RGCWFUTL
"RTN","RGCWKDIN",11,0)
 .R:RGX "Waiting for active sessions to terminate...",RGY:10,!!
"RTN","RGCWKDIN",12,0)
 .I RGX,RGY=U,$$ASK^CIAU("There are still active sessions.  Are you sure you want to proceed") S RGX=0
"RTN","RGCWKDIN",13,0)
 D MES("Proceeding with installation...")
"RTN","RGCWKDIN",14,0)
 D INITIAL,SAVEOPT
"RTN","RGCWKDIN",15,0)
 Q
"RTN","RGCWKDIN",16,0)
 ; Postinit
"RTN","RGCWKDIN",17,0)
POST N PAR,Y
"RTN","RGCWKDIN",18,0)
 X ^%ZOSF("EON"),^%ZOSF("TRMOFF")
"RTN","RGCWKDIN",19,0)
 D RESPTR,DEFPAR,RESTOPT,REGISTER,FINAL
"RTN","RGCWKDIN",20,0)
 W !!!
"RTN","RGCWKDIN",21,0)
 Q
"RTN","RGCWKDIN",22,0)
 ; Execute initial preinit code, if any
"RTN","RGCWKDIN",23,0)
INITIAL ; EP
"RTN","RGCWKDIN",24,0)
 X $G(@XPDGREF@("INITIAL"))
"RTN","RGCWKDIN",25,0)
 Q
"RTN","RGCWKDIN",26,0)
 ; Execute final postinit code, if any
"RTN","RGCWKDIN",27,0)
FINAL ; EP
"RTN","RGCWKDIN",28,0)
 X $G(@XPDGREF@("FINAL"))
"RTN","RGCWKDIN",29,0)
 Q
"RTN","RGCWKDIN",30,0)
 ; Initializes default parameter values.  Does not affect existing entries.
"RTN","RGCWKDIN",31,0)
DEFPAR N PAR,ENT,VAL,INST,LP,Y
"RTN","RGCWKDIN",32,0)
 D MES("Setting up default site parameters...")
"RTN","RGCWKDIN",33,0)
 F LP=0:0 S LP=$O(@XPDGREF@("PARAM",LP)) Q:'LP  K VAL M VAL=^(LP) D
"RTN","RGCWKDIN",34,0)
 .S Y=VAL,VAL=$$MSG^CIAU($P(Y,U,3,999),"|",0),PAR=$P(Y,U),INST=$P(Y,U,2)
"RTN","RGCWKDIN",35,0)
 .S ENT=$$ENT^RGCWFPAR(PAR),ENT=$P(ENT,U,$L(ENT,U))
"RTN","RGCWKDIN",36,0)
 .D:$L(ENT) ADD^XPAR(ENT,PAR,INST,.VAL)
"RTN","RGCWKDIN",37,0)
 Q
"RTN","RGCWKDIN",38,0)
 ; Delete a file or subfile
"RTN","RGCWKDIN",39,0)
 ;   DIU = File or subfile #
"RTN","RGCWKDIN",40,0)
DELFIL(DIU) ; EP
"RTN","RGCWKDIN",41,0)
 N $ET
"RTN","RGCWKDIN",42,0)
 S $ET="",@$$TRAP^CIAUOS("DELERR^RGCWKDIN")
"RTN","RGCWKDIN",43,0)
 Q:'$D(^DD(DIU))
"RTN","RGCWKDIN",44,0)
 S DIU(0)=$S($D(^DIC(DIU)):"D",1:"S")
"RTN","RGCWKDIN",45,0)
 D EN^DIU2
"RTN","RGCWKDIN",46,0)
 Q
"RTN","RGCWKDIN",47,0)
DELERR N ERR
"RTN","RGCWKDIN",48,0)
 S ERR=$$EC^%ZOSV
"RTN","RGCWKDIN",49,0)
 D MES("An error occurred deleting file #"_$G(DIU))
"RTN","RGCWKDIN",50,0)
 D MES("The error was: "_ERR)
"RTN","RGCWKDIN",51,0)
 D MES("Please delete the file manually after correcting the problem.")
"RTN","RGCWKDIN",52,0)
 Q
"RTN","RGCWKDIN",53,0)
 ; Save ITEM and RPC entries for RGCWF CAREWEB FRAMEWORK option
"RTN","RGCWKDIN",54,0)
SAVEOPT N OPT
"RTN","RGCWKDIN",55,0)
 S OPT=$$FIND1^DIC(19,"","X","RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",56,0)
 Q:'OPT
"RTN","RGCWKDIN",57,0)
 M @XPDGREF@("ITMSAVE")=^DIC(19,OPT,10,"B")
"RTN","RGCWKDIN",58,0)
 M @XPDGREF@("RPCSAVE")=^DIC(19,OPT,"RPC","B")
"RTN","RGCWKDIN",59,0)
 Q
"RTN","RGCWKDIN",60,0)
 ; Restore ITEM and RPC entries for RGCWF CAREWEB FRAMEWORK
"RTN","RGCWKDIN",61,0)
RESTOPT N OPT,ITM,RPC
"RTN","RGCWKDIN",62,0)
 S OPT=$$FIND1^DIC(19,"","X","RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",63,0)
 Q:'OPT
"RTN","RGCWKDIN",64,0)
 F ITM=0:0 S ITM=$O(@XPDGREF@("ITMSAVE",ITM)) Q:'ITM  I $$REGCTX^CIAURPC(ITM,OPT)
"RTN","RGCWKDIN",65,0)
 F RPC=0:0 S RPC=$O(@XPDGREF@("RPCSAVE",RPC)) Q:'RPC  I $$REGRPC^CIAURPC(RPC,OPT)
"RTN","RGCWKDIN",66,0)
 Q
"RTN","RGCWKDIN",67,0)
 ; Resolve pointers in multiples (KIDS doesn't)
"RTN","RGCWKDIN",68,0)
RESPTR ; EP
"RTN","RGCWKDIN",69,0)
 N TGT,SRC,SUB,NOD,NAM,VAL,IEN,CNT,SGB,PTR
"RTN","RGCWKDIN",70,0)
 S SUB=0
"RTN","RGCWKDIN",71,0)
 F  S SUB=$O(@XPDGREF@("PTRS",SUB)) Q:'SUB  S X=^(SUB)  D
"RTN","RGCWKDIN",72,0)
 .S NOD=+X,SRC=$P(X,U,2),TGT=$P(X,U,3),SGB=$$ROOT^DILFD(SRC,,1),NAM=""
"RTN","RGCWKDIN",73,0)
 .F  S NAM=$O(@XPDGREF@("PTRS",SUB,NAM)) Q:'$L(NAM)  D
"RTN","RGCWKDIN",74,0)
 ..S IEN=$$FIND1^DIC(SRC,"","QX",NAM),VAL="",CNT=0
"RTN","RGCWKDIN",75,0)
 ..Q:IEN'>0
"RTN","RGCWKDIN",76,0)
 ..K @SGB@(IEN,NOD)
"RTN","RGCWKDIN",77,0)
 ..F  S VAL=$O(@XPDGREF@("PTRS",SUB,NAM,VAL)) Q:'$L(VAL)  D
"RTN","RGCWKDIN",78,0)
 ...S PTR=$$FIND1^DIC(TGT,,"X",VAL)
"RTN","RGCWKDIN",79,0)
 ...I 'PTR D MES("  Failed to resolve "_VAL) Q
"RTN","RGCWKDIN",80,0)
 ...S CNT=CNT+1,@SGB@(IEN,NOD,CNT,0)=PTR,@SGB@(IEN,NOD,"B",PTR,CNT)=""
"RTN","RGCWKDIN",81,0)
 ..S:CNT @SGB@(IEN,NOD,0)=U_SUB_"P^"_CNT_U_CNT
"RTN","RGCWKDIN",82,0)
 Q
"RTN","RGCWKDIN",83,0)
 ; Check binary version against M system
"RTN","RGCWKDIN",84,0)
OBJCHK ; EP
"RTN","RGCWKDIN",85,0)
 N VER,MSYS
"RTN","RGCWKDIN",86,0)
 D GETMSYS(.MSYS,.VER)
"RTN","RGCWKDIN",87,0)
 Q:'$D(MSYS)
"RTN","RGCWKDIN",88,0)
 I '$D(VER) D
"RTN","RGCWKDIN",89,0)
 .D MES("This package contains object code that is not supported on "_MSYS_" installations.",2)
"RTN","RGCWKDIN",90,0)
 E  I VER="" D
"RTN","RGCWKDIN",91,0)
 .D MES("This package does not contain object code for this version of "_MSYS_" installations.",2)
"RTN","RGCWKDIN",92,0)
 Q
"RTN","RGCWKDIN",93,0)
 ; Get M system type and target version
"RTN","RGCWKDIN",94,0)
GETMSYS(MSYS,VER) ;
"RTN","RGCWKDIN",95,0)
 K MSYS,VER
"RTN","RGCWKDIN",96,0)
 Q:'$D(@XPDGREF@("OBJ"))
"RTN","RGCWKDIN",97,0)
 S MSYS=$$UP^XLFSTR($P($$VERSION^%ZOSV(1)," ")),MSYS(0)=$S(MSYS="CACHE":1,MSYS="JUMPS":2,1:0)
"RTN","RGCWKDIN",98,0)
 Q:'$D(@XPDGREF@("OBJ",MSYS(0)))
"RTN","RGCWKDIN",99,0)
 S VER=$TR($$VERSION^%ZOSV()," ")
"RTN","RGCWKDIN",100,0)
 F  Q:'$L(VER)  Q:$D(@XPDGREF@("OBJ",MSYS(0),VER))  S VER=$P(VER,".",1,$L(VER,".")-1)
"RTN","RGCWKDIN",101,0)
 Q
"RTN","RGCWKDIN",102,0)
 ; Install routine binaries
"RTN","RGCWKDIN",103,0)
OBJINST ; EP
"RTN","RGCWKDIN",104,0)
 N MSYS,RTN,OBJ,SUB,GBL
"RTN","RGCWKDIN",105,0)
 D GETMSYS(.MSYS,.VER)
"RTN","RGCWKDIN",106,0)
 Q:'$D(MSYS)
"RTN","RGCWKDIN",107,0)
 Q:$D(@XPDGREF@("OBJ",MSYS(0)))<10
"RTN","RGCWKDIN",108,0)
 S RTN=""
"RTN","RGCWKDIN",109,0)
 D MES("Installing routine binaries...")
"RTN","RGCWKDIN",110,0)
 F  S RTN=$O(@XPDGREF@("OBJ",MSYS(0),VER,RTN)) Q:'$L(RTN)  D
"RTN","RGCWKDIN",111,0)
 .X "ZR  ZS @RTN"
"RTN","RGCWKDIN",112,0)
 .S OBJ="",SUB=0,GBL=$NA(@$S(MSYS(0)=1:"^rOBJ(RTN)",1:"^$R(RTN,""OBJECT"")"))
"RTN","RGCWKDIN",113,0)
 .F  S SUB=$O(@XPDGREF@("OBJ",MSYS(0),VER,RTN,SUB)) Q:'SUB  S OBJ=OBJ_^(SUB,0)
"RTN","RGCWKDIN",114,0)
 .S @GBL=$S(MSYS(0)=1:$$DECODE^CIAUUU(OBJ),1:OBJ)
"RTN","RGCWKDIN",115,0)
 Q
"RTN","RGCWKDIN",116,0)
 ; Perform various registration actions
"RTN","RGCWKDIN",117,0)
REGISTER N X,CTX
"RTN","RGCWKDIN",118,0)
 S CTX=$$GETOPT^CIAURPC("RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",119,0)
 Q:'CTX
"RTN","RGCWKDIN",120,0)
 F X="RGCW","CIAV","CIAU","DG","DDR","RGUT","BEH" D REGNMSP^CIAURPC(X,CTX)
"RTN","RGCWKDIN",121,0)
 F X="OR CPRS GUI CHART" D DOREG(X)
"RTN","RGCWKDIN",122,0)
 Q
"RTN","RGCWKDIN",123,0)
 ; Add an option as a subcontext to CareWeb Framework
"RTN","RGCWKDIN",124,0)
 ; Remove any redundant RPC's
"RTN","RGCWKDIN",125,0)
DOREG(OPT) ;
"RTN","RGCWKDIN",126,0)
 N RPC,CNT1,CNT2,STAT,IEN
"RTN","RGCWKDIN",127,0)
 S IEN=$$GETOPT^CIAURPC(OPT)
"RTN","RGCWKDIN",128,0)
 Q:'IEN
"RTN","RGCWKDIN",129,0)
 W !!,"Registering ",OPT," as a subcontext under RGCWF CAREWEB FRAMEWORK...",!
"RTN","RGCWKDIN",130,0)
 I $$REGCTX^CIAURPC(IEN,CTX)
"RTN","RGCWKDIN",131,0)
 W "Removing redundant RPC references...",!
"RTN","RGCWKDIN",132,0)
 S (CNT1,CNT2)=0
"RTN","RGCWKDIN",133,0)
 F RPC=0:0 S RPC=$O(^DIC(19,IEN,"RPC","B",RPC)) Q:'RPC  D
"RTN","RGCWKDIN",134,0)
 .S STAT=$$REGRPC^CIAURPC(RPC,CTX,1)
"RTN","RGCWKDIN",135,0)
 .Q:STAT=-1
"RTN","RGCWKDIN",136,0)
 .W $$GET1^DIQ(8994,RPC,.01)_" - "
"RTN","RGCWKDIN",137,0)
 .I STAT=1 W "Removed",! S CNT1=CNT1+1
"RTN","RGCWKDIN",138,0)
 .E  I 'STAT W "Not removed",! S CNT2=CNT2+1
"RTN","RGCWKDIN",139,0)
 W !,CNT1," remote procedure(s) removed",!
"RTN","RGCWKDIN",140,0)
 W:CNT2 CNT2," remote procedure(s) could not be removed",!!
"RTN","RGCWKDIN",141,0)
 Q
"RTN","RGCWKDIN",142,0)
 ; Check if specified routine is installed
"RTN","RGCWKDIN",143,0)
RTNTST(RTN,VN,MSG) ;
"RTN","RGCWKDIN",144,0)
 D:$$RTNVER(RTN)<VN MES(MSG_" must be installed before proceeding.",2)
"RTN","RGCWKDIN",145,0)
 Q
"RTN","RGCWKDIN",146,0)
 ; Get version # for specified routine
"RTN","RGCWKDIN",147,0)
RTNVER(RTN) ;
"RTN","RGCWKDIN",148,0)
 Q $P($T(+2^@RTN),";",3)
"RTN","RGCWKDIN",149,0)
 ; Check patch #s for specified routine
"RTN","RGCWKDIN",150,0)
PATCH(RTN,PN,MSG) ;
"RTN","RGCWKDIN",151,0)
 N X,Y,L,F
"RTN","RGCWKDIN",152,0)
 F X=1:1:$L(PN,",") D
"RTN","RGCWKDIN",153,0)
 .S Y=$P(PN,",",X),F=0
"RTN","RGCWKDIN",154,0)
 .F L=2,3 D  Q:F
"RTN","RGCWKDIN",155,0)
 ..S F=$TR($P($T(+L^@RTN),";",5),"*",",")[(","_Y_",")
"RTN","RGCWKDIN",156,0)
 .D:'F MES(MSG_" patch #"_Y_" must be installed before proceeding.",2)
"RTN","RGCWKDIN",157,0)
 Q
"RTN","RGCWKDIN",158,0)
 ; Display message in MSG and optionally set quit flag to QUIT
"RTN","RGCWKDIN",159,0)
MES(MSG,QUIT) ;
"RTN","RGCWKDIN",160,0)
 D BMES^XPDUTL("  "_$G(MSG))
"RTN","RGCWKDIN",161,0)
 S:$G(QUIT) XPDQUIT=QUIT
"RTN","RGCWKDIN",162,0)
 Q
"RTN","RGCWPTCX")
0^9^B39124291
"RTN","RGCWPTCX",1,0)
RGCWPTCX ;RI/CBMI/DKM - Patient Context Object ;20-Mar-2014 21:53;PIW
"RTN","RGCWPTCX",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 38
"RTN","RGCWPTCX",3,0)
 ; Save/retrieve last patient selected for current institution
"RTN","RGCWPTCX",4,0)
LAST(DATA,DFN) ;
"RTN","RGCWPTCX",5,0)
 D:$$ISACTIVE($G(DFN)) EN^XPAR("USR","RGCWPTCX LAST PATIENT","`"_DUZ(2),"`"_DFN)
"RTN","RGCWPTCX",6,0)
 S DATA=$$GET^XPAR("USR","RGCWPTCX LAST PATIENT",DUZ(2),"I")
"RTN","RGCWPTCX",7,0)
 S:DATA ^DISV(DUZ,"^DPT(")=DATA
"RTN","RGCWPTCX",8,0)
 S:'$$GET^XPAR("ALL","RGCWPTCX RECALL LAST") DATA=""
"RTN","RGCWPTCX",9,0)
 Q
"RTN","RGCWPTCX",10,0)
 ; Return message if data on the legacy system
"RTN","RGCWPTCX",11,0)
 ; DATA(0)=1 if data,  DATA(n)=display message if data
"RTN","RGCWPTCX",12,0)
LEGACY(DATA,DFN) ;
"RTN","RGCWPTCX",13,0)
 S DATA(0)=0
"RTN","RGCWPTCX",14,0)
 I $L($T(HXDATA^A7RDPAGU)) D
"RTN","RGCWPTCX",15,0)
 .D HXDATA^A7RDPAGU(.DATA,DFN)
"RTN","RGCWPTCX",16,0)
 .S:$O(DATA(0)) DATA(0)=1
"RTN","RGCWPTCX",17,0)
 Q
"RTN","RGCWPTCX",18,0)
 ; Return a patient's current location
"RTN","RGCWPTCX",19,0)
INPLOC(DATA,DFN) ;
"RTN","RGCWPTCX",20,0)
 N X
"RTN","RGCWPTCX",21,0)
 S X=$G(^DPT(DFN,.102)),DATA=0
"RTN","RGCWPTCX",22,0)
 S:X X=$P($G(^DGPM(X,0)),U,6)
"RTN","RGCWPTCX",23,0)
 S:X DATA=+$G(^DIC(42,X,44)),$P(DATA,U,2)=$P($G(^DIC(42,X,0)),U),X=$P($G(^DIC(42,X,0)),U,3)
"RTN","RGCWPTCX",24,0)
 S $P(DATA,U,3)=X
"RTN","RGCWPTCX",25,0)
 Q
"RTN","RGCWPTCX",26,0)
 ; Returns true if selectable patient
"RTN","RGCWPTCX",27,0)
ISACTIVE(DFN,QUALS) ;EP
"RTN","RGCWPTCX",28,0)
 N X
"RTN","RGCWPTCX",29,0)
 S:'$D(DEMO) DEMO=+$$GET^XPAR("ALL","RGCWPTCX DEMO MODE",,"Q")
"RTN","RGCWPTCX",30,0)
 S X=$G(^DPT(+DFN,0))
"RTN","RGCWPTCX",31,0)
 Q:'$L(X)!$P(X,U,19) 0
"RTN","RGCWPTCX",32,0)
 I '$P(X,U,21),$$LKPQUAL("@RGCWPTCX DEMO MODE",.QUALS) Q 0
"RTN","RGCWPTCX",33,0)
 Q:$$LKPQUAL("MSC DG ALL SITES HIPAA",.QUALS) 1
"RTN","RGCWPTCX",34,0)
 Q:'$O(^AUPNPAT(DFN,41,0)) '$$LKPQUAL("@RGCWPTCX REQUIRES HRN",.QUALS)
"RTN","RGCWPTCX",35,0)
 Q ''$L($$HRN(DFN))
"RTN","RGCWPTCX",36,0)
 ; Return requested lookup qualifier
"RTN","RGCWPTCX",37,0)
LKPQUAL(QUAL,CACHE) ;EP
"RTN","RGCWPTCX",38,0)
 N RET
"RTN","RGCWPTCX",39,0)
 S RET=$G(CACHE(QUAL))
"RTN","RGCWPTCX",40,0)
 S:'$L(RET) (RET,CACHE(QUAL))=+$$HASKEY^RGCWFUSR(QUAL)
"RTN","RGCWPTCX",41,0)
 Q RET
"RTN","RGCWPTCX",42,0)
 ; Returns sensitive patient status
"RTN","RGCWPTCX",43,0)
ISSENS(DFN) ;
"RTN","RGCWPTCX",44,0)
 N RET
"RTN","RGCWPTCX",45,0)
 D PTSEC^DGSEC4(.RET,DFN,0)
"RTN","RGCWPTCX",46,0)
 Q $G(RET(1))
"RTN","RGCWPTCX",47,0)
 ; Get DFN from ICN
"RTN","RGCWPTCX",48,0)
ICN2DFN(DATA,ICN) ;
"RTN","RGCWPTCX",49,0)
 S DATA=$S($L($T(GETDFN^MPIF001)):$$GETDFN^MPIF001(ICN),1:"")
"RTN","RGCWPTCX",50,0)
 S:DATA<1 DATA=""
"RTN","RGCWPTCX",51,0)
 Q
"RTN","RGCWPTCX",52,0)
 ; Return ICN
"RTN","RGCWPTCX",53,0)
ICN(DFN) N X
"RTN","RGCWPTCX",54,0)
 S X=$S($L($T(GETICN^MPIF001)):+$$GETICN^MPIF001(DFN),1:"")
"RTN","RGCWPTCX",55,0)
 Q $S(X>0:X,1:"")
"RTN","RGCWPTCX",56,0)
 ; Return HRN given DFN
"RTN","RGCWPTCX",57,0)
HRN(DFN) ;EP
"RTN","RGCWPTCX",58,0)
 N X
"RTN","RGCWPTCX",59,0)
 S X=$G(^AUPNPAT(DFN,41,+$G(DUZ(2)),0))
"RTN","RGCWPTCX",60,0)
 Q $S($P(X,U,3):"",1:$P(X,U,2))
"RTN","RGCWPTCX",61,0)
 ; Return MFN given DFN
"RTN","RGCWPTCX",62,0)
EPI(DFN) ;EP
"RTN","RGCWPTCX",63,0)
 Q $S($$TEST^CIAUOS("MSCDPTID"):$$^MSCDPTID(DFN),1:"")
"RTN","RGCWPTCX",64,0)
 ; Return formatted patient detail report
"RTN","RGCWPTCX",65,0)
PTINQ(DATA,DFN) ;
"RTN","RGCWPTCX",66,0)
 S DATA=$$TMPGBL^CIAVMRPC
"RTN","RGCWPTCX",67,0)
 D CAPTURE^CIAUHFS($TR($$GET^XPAR("ALL","RGCWPTCX DETAIL REPORT"),"~",U),DATA,80)
"RTN","RGCWPTCX",68,0)
 Q
"RTN","RGCWPTCX",69,0)
 ; Build Patient Inquiry
"RTN","RGCWPTCX",70,0)
PTINQB(DFN) ;
"RTN","RGCWPTCX",71,0)
 N DOC,TEAM,X,VAOA,PH,DOD,CAUSE,CAUSE2,NARR
"RTN","RGCWPTCX",72,0)
 S DOD=$$GET1^DIQ(2,DFN,.351)
"RTN","RGCWPTCX",73,0)
 I $L(DOD) D
"RTN","RGCWPTCX",74,0)
 .W !,"******** PATIENT IS DECEASED ************"
"RTN","RGCWPTCX",75,0)
 .W !,"Date of Death: ",DOD
"RTN","RGCWPTCX",76,0)
 .I DUZ("AG")="I" D
"RTN","RGCWPTCX",77,0)
 ..S CAUSE=$$GET1^DIQ(9000001,DFN,1114,"I")
"RTN","RGCWPTCX",78,0)
 ..S CAUSE2=$$GET1^DIQ(80,CAUSE,.01)
"RTN","RGCWPTCX",79,0)
 ..S NARR=$$GET1^DIQ(80,CAUSE,3)
"RTN","RGCWPTCX",80,0)
 ..W:$L(NARR) !,"Underlying Cause: ",CAUSE2_" ("_NARR_")"
"RTN","RGCWPTCX",81,0)
 D EN^RGCWPTC1                                                            ; mas patient inquiry
"RTN","RGCWPTCX",82,0)
 S DOC=$$OUTPTPR^RGCWPTPC(DFN)
"RTN","RGCWPTCX",83,0)
 S TEAM=$$OUTPTTM^RGCWPTPC(DFN)
"RTN","RGCWPTCX",84,0)
 I DOC!TEAM  D
"RTN","RGCWPTCX",85,0)
 .W !!,"Primary Care Information:"
"RTN","RGCWPTCX",86,0)
 .W:DOC !,"Primary Practitioner:  ",$P(DOC,U,2)
"RTN","RGCWPTCX",87,0)
 .W:TEAM !,"Primary Care Team:     ",$P(TEAM,U,2)
"RTN","RGCWPTCX",88,0)
 W !!,"Service Connection/Rated Disabilities:"
"RTN","RGCWPTCX",89,0)
 D DIS^DGRPDB
"RTN","RGCWPTCX",90,0)
 ;IHS/MSC/MGH Added EHR patch 8 Insurance
"RTN","RGCWPTCX",91,0)
 I DUZ("AG")="I" D
"RTN","RGCWPTCX",92,0)
 .S VDT="TODAY",VDT=$$DT^CIAU(VDT),LINE=""
"RTN","RGCWPTCX",93,0)
 .I $$MCR^AUPNPAT(DFN,VDT)=1 S LINE="MEDICARE #"_$$MCR^BTIULO2(DFN)_"/"
"RTN","RGCWPTCX",94,0)
 .I $$MCD^AUPNPAT(DFN,VDT)=1 S LINE=LINE_"MEDICAID #"_$$MCD^BTIULO2(DFN)_"/"
"RTN","RGCWPTCX",95,0)
 .I $$PI^AUPNPAT(DFN,VDT)=1 S LINE=LINE_"PVT INS ("_$$PIN^AUPNPAT(DFN,VDT,"E")_")/"
"RTN","RGCWPTCX",96,0)
 .I LINE]"" D
"RTN","RGCWPTCX",97,0)
 ..W !!,"INSURANCE:"
"RTN","RGCWPTCX",98,0)
 ..W !,?5,$E(LINE,1,$L(LINE)-1)
"RTN","RGCWPTCX",99,0)
 E  D
"RTN","RGCWPTCX",100,0)
 .D DISP^DGIBDSP
"RTN","RGCWPTCX",101,0)
 ;Added EHR patch 7
"RTN","RGCWPTCX",102,0)
 I DUZ("AG")="I" D
"RTN","RGCWPTCX",103,0)
 .S PH=$$GET1^DIQ(9000001,DFN,1801)
"RTN","RGCWPTCX",104,0)
 .I PH'="" W !!,"Other Phone Contact: "_PH
"RTN","RGCWPTCX",105,0)
 D OAD^VADPT                                                           ; get NOK address
"RTN","RGCWPTCX",106,0)
 D:$L(VAOA(9))
"RTN","RGCWPTCX",107,0)
 .W !!,"Next of Kin Information:"
"RTN","RGCWPTCX",108,0)
 .W !,"Name:  ",VAOA(9)                                                ; nok name
"RTN","RGCWPTCX",109,0)
 .W:$L(VAOA(10)) " (",VAOA(10),")"                                     ; relationship
"RTN","RGCWPTCX",110,0)
 .W:$L(VAOA(1)) !?7,VAOA(1)                                            ; address line 1
"RTN","RGCWPTCX",111,0)
 .W:$L(VAOA(2)) !?7,VAOA(2)                                            ; line 2
"RTN","RGCWPTCX",112,0)
 .W:$L(VAOA(3)) !?7,VAOA(3)                                            ; line 3
"RTN","RGCWPTCX",113,0)
 .D:$L(VAOA(4))
"RTN","RGCWPTCX",114,0)
 ..W !?7,VAOA(4)                                                       ; city
"RTN","RGCWPTCX",115,0)
 ..W:$L(VAOA(5)) ", "_$P(VAOA(5),U,2)                                  ; state
"RTN","RGCWPTCX",116,0)
 ..W "  ",$P(VAOA(11),U,2)                                             ; zip+4
"RTN","RGCWPTCX",117,0)
 .W:$L(VAOA(8)) !!?7,"Phone number:  ",VAOA(8)                         ; phone
"RTN","RGCWPTCX",118,0)
 ;IHS/MSC/MGH Find Language Data Patch 8
"RTN","RGCWPTCX",119,0)
 I DUZ("AG")="I" D
"RTN","RGCWPTCX",120,0)
 .N PRILAN,PRETER,PREFLAN,PROF,LANDT,IEN
"RTN","RGCWPTCX",121,0)
 .S LANDT=9999999 S LANDT=$O(^AUPNPAT(DFN,86,LANDT),-1) Q:LANDT=""  D
"RTN","RGCWPTCX",122,0)
 ..S IEN=LANDT_","_DFN
"RTN","RGCWPTCX",123,0)
 ..S PRILAN=$$GET1^DIQ(9000001.86,IEN,.02)
"RTN","RGCWPTCX",124,0)
 ..S PRETER=$$GET1^DIQ(9000001.86,IEN,.03)
"RTN","RGCWPTCX",125,0)
 ..S PREFLAN=$$GET1^DIQ(9000001.86,IEN,.04)
"RTN","RGCWPTCX",126,0)
 ..S PROF=$$GET1^DIQ(9000001.86,IEN,.06)
"RTN","RGCWPTCX",127,0)
 ..W !!,"Language Information:"
"RTN","RGCWPTCX",128,0)
 ..W:$L(PRILAN) !?5,"Primary Language: ",PRILAN
"RTN","RGCWPTCX",129,0)
 ..W:$L(PRETER) ?40,"Interpreter Needed: ",PRETER
"RTN","RGCWPTCX",130,0)
 ..W:$L(PREFLAN) !,?5,"Preferred Language: ",PREFLAN
"RTN","RGCWPTCX",131,0)
 ..W:$L(PROF) ?40,"English Proficiency: ",PROF
"RTN","RGCWPTCX",132,0)
 ;IHS/MSC/MGH Communication method
"RTN","RGCWPTCX",133,0)
 I DUZ("AG")="I" D
"RTN","RGCWPTCX",134,0)
 .N MOC,GEN
"RTN","RGCWPTCX",135,0)
 .W !!,"METHOD OF COMMUNICATION:"
"RTN","RGCWPTCX",136,0)
 .S GEN=$$GET1^DIQ(9000001,DFN,4001)
"RTN","RGCWPTCX",137,0)
 .S MOC=$$GET1^DIQ(9000001,DFN,4002)
"RTN","RGCWPTCX",138,0)
 .I GEN'="" W !?5,"PERMISSION FOR E-MAIL: "_GEN
"RTN","RGCWPTCX",139,0)
 .I MOC'="" W !?5,"PREFERRED METHOD: "_MOC
"RTN","RGCWPTCX",140,0)
 D KVAR^VADPT
"RTN","RGCWPTCX",141,0)
 K PRILAN,PRETER,LANDT,PREFLAN,PROF
"RTN","RGCWPTCX",142,0)
 Q
"RTN","RGCWPTCX",143,0)
SETCTX(DFN) ;PEP - Set the patient context
"RTN","RGCWPTCX",144,0)
 N UID
"RTN","RGCWPTCX",145,0)
 S UID=$$GETUID^CIANBUTL
"RTN","RGCWPTCX",146,0)
 D:$L(UID) QUEUE^CIANBEVT("CONTEXT.PATIENT",+DFN,UID)
"RTN","RGCWPTCX",147,0)
 Q:$Q ''$L(UID)
"RTN","RGCWPTCX",148,0)
 Q
"RTN","RGCWPTCX",149,0)
 ; Check for possible dups
"RTN","RGCWPTCX",150,0)
CHKDUP(DATA,DFN) ; EP
"RTN","RGCWPTCX",151,0)
 N DUPS,CNT,X
"RTN","RGCWPTCX",152,0)
 D GUIBS5A^DPTLK6(.DUPS,DFN)
"RTN","RGCWPTCX",153,0)
 I DUPS(1)<1 M DATA=DUPS Q
"RTN","RGCWPTCX",154,0)
 F X=1:0 S X=$O(DUPS(X)) Q:'X  D
"RTN","RGCWPTCX",155,0)
 .I 'DUPS(X) K DUPS(X) Q
"RTN","RGCWPTCX",156,0)
 .I $P(DUPS(X),U,2)=DFN D
"RTN","RGCWPTCX",157,0)
 ..S DUPS(1)=$$CD1(DUPS(X))
"RTN","RGCWPTCX",158,0)
 ..K DUPS(X)
"RTN","RGCWPTCX",159,0)
 .E  S DUPS(X)=$$CD1(DUPS(X))
"RTN","RGCWPTCX",160,0)
 S CNT=0
"RTN","RGCWPTCX",161,0)
 D CD2(1),CD2("You have selected the following patient:"),CD2(DUPS(1)),CD2()
"RTN","RGCWPTCX",162,0)
 D CD2("However, these patients also have the same last name")
"RTN","RGCWPTCX",163,0)
 D CD2("and the same last 4 digits of their SSNs:"),CD2()
"RTN","RGCWPTCX",164,0)
 F X=1:0 S X=$O(DUPS(X)) Q:'X  D CD2(DUPS(X))
"RTN","RGCWPTCX",165,0)
 D CD2(),CD2("Are you sure this is the correct patient?")
"RTN","RGCWPTCX",166,0)
 Q
"RTN","RGCWPTCX",167,0)
CD1(VAL) Q $P(VAL,U,3)_"   DOB: "_$$ENTRY^CIAUDT($P(VAL,U,4))_"   SSN: "_$$SSN^CIAU($P(VAL,U,5))_"   HRN: "_$$HRN($P(VAL,U,2))
"RTN","RGCWPTCX",168,0)
CD2(VAL) S CNT=CNT+1,DATA(CNT)=$G(VAL)
"RTN","RGCWPTCX",169,0)
 Q
"RTN","RGCWPTCX",170,0)
 ;
"RTN","RGCWPTCX",171,0)
FMTSSN(SSN) ;EP - P7
"RTN","RGCWPTCX",172,0)
 N X
"RTN","RGCWPTCX",173,0)
 S X=$E(SSN,6,$L(SSN))
"RTN","RGCWPTCX",174,0)
 Q "XXX-XX-"_$S($L(X):X,1:"XXXX")
"RTN","RGCWPTP1")
0^3^B27496836
"RTN","RGCWPTP1",1,0)
RGCWPTP1 ;RI/CBMI/DKM - Patient List Management ;20-Mar-2014 21:53;PIW
"RTN","RGCWPTP1",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 38
"RTN","RGCWPTP1",3,0)
 ; Return list of patients with clinic appt w/in range
"RTN","RGCWPTP1",4,0)
CLINPTS(DATA,LOC,START,END,MAX) ;EP
"RTN","RGCWPTP1",5,0)
 I +$G(LOC)<1 S DATA(1)="^No clinic identified" Q
"RTN","RGCWPTP1",6,0)
 I '$$ACTLOC^RGCWENCX(LOC) S DATA(1)="^Clinic is not active" Q
"RTN","RGCWPTP1",7,0)
 N DFN,CNT,J,X,DAT,DATX,QUALS,VIEN,VSTR
"RTN","RGCWPTP1",8,0)
 S MAX=$G(MAX,200),CNT=0
"RTN","RGCWPTP1",9,0)
 D:START="" GETPAR^RGCWFPAR(.START,"ORLP DEFAULT CLINIC START DATE",,,"E")
"RTN","RGCWPTP1",10,0)
 D:END="" GETPAR^RGCWFPAR(.END,"ORLP DEFAULT CLINIC STOP DATE",,,"E")
"RTN","RGCWPTP1",11,0)
 D DT^DILF("T",START,.START,"","")
"RTN","RGCWPTP1",12,0)
 D DT^DILF("T",END,.END,"","")
"RTN","RGCWPTP1",13,0)
 I (START=-1)!(END=-1) S DATA(1)="^Error in date range." Q
"RTN","RGCWPTP1",14,0)
 S END=END\1+.9,DAT=START,LOC=+LOC,DATX=$S(START\1=(END\1):"",1:" ")
"RTN","RGCWPTP1",15,0)
 F  S DAT=$O(^SC(LOC,"S",DAT)),J=0 Q:'DAT!(DAT>END)  D:$L($G(^SC(LOC,"S",DAT,1,0)))  Q:CNT'<MAX
"RTN","RGCWPTP1",16,0)
 .S:$L(DATX) DATX=" on "_$$ENTRY^CIAUDT(DAT)
"RTN","RGCWPTP1",17,0)
 .F  S J=$O(^SC(+LOC,"S",DAT,1,J)) Q:'J!(CNT'<MAX)  D
"RTN","RGCWPTP1",18,0)
 ..S X=^SC(LOC,"S",DAT,1,J,0)
"RTN","RGCWPTP1",19,0)
 ..Q:$P(X,U,9)="C"                                                     ; cancelled clinic availability
"RTN","RGCWPTP1",20,0)
 ..S DFN=+X
"RTN","RGCWPTP1",21,0)
 ..S X=$G(^DPT(DFN,"S",DAT,0))
"RTN","RGCWPTP1",22,0)
 ..Q:+X'=LOC                                                           ; appt cancelled/resched
"RTN","RGCWPTP1",23,0)
 ..I $P(X,U,2)'="NT",($P(X,U,2)["C")!($P(X,U,2)["N") Q                 ; quit if appt cancelled or no show
"RTN","RGCWPTP1",24,0)
 ..S VIEN=+$P($G(^SCE(+$P(X,U,20),0)),U,5)
"RTN","RGCWPTP1",25,0)
 ..I VIEN,$D(^AUPNVSIT(VIEN,0)) S VSTR=LOC_";"_+^(0)_";A;"_VIEN
"RTN","RGCWPTP1",26,0)
 ..E  S VSTR=LOC_";"_DAT_";A"
"RTN","RGCWPTP1",27,0)
 ..S:$$ISACTIVE^RGCWPTCX(DFN,.QUALS) CNT=CNT+1,DATA(CNT)=DFN_U_$P(^DPT(DFN,0),U)_U_DATX_U_VSTR
"RTN","RGCWPTP1",28,0)
 I CNT'<MAX D                                                          ;maximum allowable appointments exceeded
"RTN","RGCWPTP1",29,0)
 .K DATA
"RTN","RGCWPTP1",30,0)
 .S DATA(1)="^Too many appointments found; please narrow search range."
"RTN","RGCWPTP1",31,0)
 S:'$D(DATA) DATA(1)="^No appointments."
"RTN","RGCWPTP1",32,0)
 Q
"RTN","RGCWPTP1",33,0)
 ; Return appts for a patient between beginning and end dates for a clinic, if no clinic return all appointments
"RTN","RGCWPTP1",34,0)
PTAPPTS(DATA,DFN,START,END,LOC) ;EP
"RTN","RGCWPTP1",35,0)
 I '$$ACTLOC^RGCWENCX(LOC) S DATA(1)="^Clinic is not active" Q
"RTN","RGCWPTP1",36,0)
 N VASD,VAERR,NUM,CNT,INVDT,INT,EXT,ORSRV
"RTN","RGCWPTP1",37,0)
 S NUM=0,CNT=0
"RTN","RGCWPTP1",38,0)
 I START="" D
"RTN","RGCWPTP1",39,0)
 .D:'$L(LOC) GETPAR^RGCWFPAR(.START,"ORQQAP SEARCH RANGE START",,,"E")
"RTN","RGCWPTP1",40,0)
 .S:START="" START="T"                                                 ;default start date across all clinics is today
"RTN","RGCWPTP1",41,0)
 I END="" D
"RTN","RGCWPTP1",42,0)
 .D:'$L(LOC) GETPAR^RGCWFPAR(.START,"ORQQAP SEARCH RANGE STOP",,,"E")
"RTN","RGCWPTP1",43,0)
 .S:END="" END="T"                                                     ;default end date across all clinics is today
"RTN","RGCWPTP1",44,0)
 D DT^DILF("T",START,.START,"","")
"RTN","RGCWPTP1",45,0)
 D DT^DILF("T",END,.END,"","")
"RTN","RGCWPTP1",46,0)
 I (START=-1)!(END=-1) S DATA(1)="^Error in date range." Q
"RTN","RGCWPTP1",47,0)
 S VASD("F")=START
"RTN","RGCWPTP1",48,0)
 S VASD("T")=END\1+.5
"RTN","RGCWPTP1",49,0)
 S:$L(LOC) VASD("C",LOC)=""
"RTN","RGCWPTP1",50,0)
 S DATA(1)="^No appointments."
"RTN","RGCWPTP1",51,0)
 D SDA^VADPT
"RTN","RGCWPTP1",52,0)
 Q:VAERR=1
"RTN","RGCWPTP1",53,0)
 F  S NUM=$O(^UTILITY("VASD",$J,NUM)) Q:'NUM  D
"RTN","RGCWPTP1",54,0)
 .S INT=^UTILITY("VASD",$J,NUM,"I"),INVDT=9999999-$P(INT,U)
"RTN","RGCWPTP1",55,0)
 .S EXT=^UTILITY("VASD",$J,NUM,"E")
"RTN","RGCWPTP1",56,0)
 .S CNT=CNT+1,DATA(CNT)=$P(INT,U)_U_$P(EXT,U,2)_U_$P(EXT,U,3)_U_$P(EXT,U,4)_U_INVDT
"RTN","RGCWPTP1",57,0)
 K ^UTILITY("VASD",$J)
"RTN","RGCWPTP1",58,0)
 Q
"RTN","RGCWPTP1",59,0)
 ; Return provider list
"RTN","RGCWPTP1",60,0)
PROVLST(DATA,FROM,DIR,MAX) ;EP
"RTN","RGCWPTP1",61,0)
 N IEN,CNT
"RTN","RGCWPTP1",62,0)
 S FROM=$G(FROM),DIR=$G(DIR,1),MAX=$G(MAX,44),CNT=0
"RTN","RGCWPTP1",63,0)
 F  S FROM=$O(^VA(200,"B",FROM),DIR),IEN="" Q:FROM=""  D:$E(FROM)'="*"  Q:CNT'<MAX
"RTN","RGCWPTP1",64,0)
 .F  S IEN=$O(^VA(200,"B",FROM,IEN),DIR) Q:'IEN  D
"RTN","RGCWPTP1",65,0)
 ..I $D(^XUSEC("PROVIDER",IEN)),$$ACTIVE^XUSER(IEN) S CNT=CNT+1,DATA(CNT)=IEN_U_FROM
"RTN","RGCWPTP1",66,0)
 Q
"RTN","RGCWPTP1",67,0)
 ; Return list of patients associated w/ primary provider
"RTN","RGCWPTP1",68,0)
PROVPTS(DATA,PROV) ;EP
"RTN","RGCWPTP1",69,0)
 I +$G(PROV)<1 S DATA(1)="^No provider identified" Q
"RTN","RGCWPTP1",70,0)
 N DFN,CNT,QUALS
"RTN","RGCWPTP1",71,0)
 S (CNT,DFN)=0,DATA(1)="^No patients found."
"RTN","RGCWPTP1",72,0)
 F  S DFN=+$O(^DPT("APR",PROV,DFN)) Q:'DFN  D
"RTN","RGCWPTP1",73,0)
 .S:$$ISACTIVE^RGCWPTCX(DFN,.QUALS) CNT=CNT+1,DATA(CNT)=DFN_U_$P(^DPT(DFN,0),U)
"RTN","RGCWPTP1",74,0)
 Q
"RTN","RGCWPTP1",75,0)
 ; Return list of treating specialties
"RTN","RGCWPTP1",76,0)
SPECLST(DATA,FROM,DIR,MAX) ;EP
"RTN","RGCWPTP1",77,0)
 N CNT,IEN
"RTN","RGCWPTP1",78,0)
 S FROM=$G(FROM),DIR=$G(DIR,1),MAX=$G(MAX,44),CNT=0
"RTN","RGCWPTP1",79,0)
 F  S FROM=$O(^DIC(45.7,"B",FROM),DIR),IEN="" Q:FROM=""  D  Q:CNT'<MAX
"RTN","RGCWPTP1",80,0)
 .F  S IEN=$O(^DIC(45.7,"B",FROM,IEN),DIR) Q:'IEN  D
"RTN","RGCWPTP1",81,0)
 ..S:$$ACTIVE^DGACT(45.7,IEN) CNT=CNT+1,DATA(CNT)=IEN_U_FROM
"RTN","RGCWPTP1",82,0)
 Q
"RTN","RGCWPTP1",83,0)
 ; Return list of patients associated w/ treating specialty
"RTN","RGCWPTP1",84,0)
SPECPTS(DATA,SPEC) ;EP
"RTN","RGCWPTP1",85,0)
 I +$G(SPEC)<1 S DATA(1)="^No specialty identified" Q
"RTN","RGCWPTP1",86,0)
 N CNT,DFN,QUALS
"RTN","RGCWPTP1",87,0)
 S (CNT,DFN)=0,DATA(1)="^No patients found."
"RTN","RGCWPTP1",88,0)
 F  S DFN=+$O(^DPT("ATR",SPEC,DFN)) Q:'DFN  D
"RTN","RGCWPTP1",89,0)
 .S:$$ISACTIVE^RGCWPTCX(DFN,.QUALS) CNT=CNT+1,DATA(CNT)=DFN_U_$P(^DPT(DFN,0),U)
"RTN","RGCWPTP1",90,0)
 Q
"RTN","RGCWPTP1",91,0)
 ; Return list of patients on a ward
"RTN","RGCWPTP1",92,0)
WARDPTS(DATA,LOC) ;EP
"RTN","RGCWPTP1",93,0)
 N CNT,DFN,WARD,QUALS
"RTN","RGCWPTP1",94,0)
 I +$G(LOC)<1 S DATA(1)="^No ward identified." Q
"RTN","RGCWPTP1",95,0)
 S WARD=+$G(^SC(+LOC,42))
"RTN","RGCWPTP1",96,0)
 I '$D(^DIC(42,WARD,0)) S DATA(1)="^Not a valid ward." Q
"RTN","RGCWPTP1",97,0)
 S (CNT,DFN)=0,WARD=$P(^DIC(42,WARD,0),U),DATA(1)="^No patients found."
"RTN","RGCWPTP1",98,0)
 F  S DFN=+$O(^DPT("CN",WARD,DFN)) Q:'DFN  D:$$ISACTIVE^RGCWPTCX(DFN,.QUALS)
"RTN","RGCWPTP1",99,0)
 .S CNT=CNT+1,DATA(CNT)=DFN_U_$P(^DPT(DFN,0),U)_U_$P($G(^DPT(DFN,.101)),U)
"RTN","RGCWPTP1",100,0)
 .S DATA(CNT)=DATA(CNT)_U_$P($$ADMITINF^RGCWENCX(DFN,^DPT("CN",WARD,DFN)),U)
"RTN","RGCWPTP1",101,0)
 Q
"RTN","RGCWPTP1",102,0)
 ; Returns all teams to which a user belongs
"RTN","RGCWPTP1",103,0)
 ;   PER = If nonzero, return personal lists.  Otherwise, return team lists.
"RTN","RGCWPTP1",104,0)
TEAMLST(DATA,PER) ;EP
"RTN","RGCWPTP1",105,0)
 N CNT,IEN,X
"RTN","RGCWPTP1",106,0)
 S (CNT,IEN)=0,PER=''$G(PER)
"RTN","RGCWPTP1",107,0)
 F  S IEN=$O(^OR(100.21,"C",DUZ,IEN)) Q:'IEN  D
"RTN","RGCWPTP1",108,0)
 .S X=$G(^OR(100.21,IEN,0))
"RTN","RGCWPTP1",109,0)
 .S:$P(X,U,2)="P"=PER CNT=CNT+1,DATA(CNT)=IEN_U_X
"RTN","RGCWPTP1",110,0)
 Q
"RTN","RGCWPTP1",111,0)
 ; Return list of patients belonging to a team
"RTN","RGCWPTP1",112,0)
TEAMPTS(DATA,TEAM) ;EP
"RTN","RGCWPTP1",113,0)
 N CNT,IEN,DFN,QUALS
"RTN","RGCWPTP1",114,0)
 S DATA(1)="^No patients found.",(CNT,IEN)=0,TEAM=+TEAM
"RTN","RGCWPTP1",115,0)
 I '$D(^OR(100.21,TEAM,0)) S DATA(1)="^Not a valid team." Q
"RTN","RGCWPTP1",116,0)
 F  S IEN=$O(^OR(100.21,TEAM,10,IEN)) Q:'IEN  S DFN=+$G(^(IEN,0)) D
"RTN","RGCWPTP1",117,0)
 .S:$$ISACTIVE^RGCWPTCX(DFN,.QUALS) CNT=CNT+1,DATA(CNT)=DFN_U_$P(^DPT(DFN,0),U)
"RTN","RGCWPTP1",118,0)
 Q
"RTN","RGCWPTP1",119,0)
 ; Return list of locations
"RTN","RGCWPTP1",120,0)
HOSPLOC(DATA,FROM,DIR,MAX,TYPE,START,END) ;EP
"RTN","RGCWPTP1",121,0)
 D HOSPLOC^RGCWENCX(.DATA,.FROM,.DIR,.MAX,.TYPE,.START,.END)
"RTN","RGCWPTP1",122,0)
 Q
"RTN","RGCWPTP2")
0^4^B6090543
"RTN","RGCWPTP2",1,0)
RGCWPTP2 ;RI/CBMI/DKM - Patient List Management ;20-Mar-2014 21:53;PIW
"RTN","RGCWPTP2",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 38
"RTN","RGCWPTP2",3,0)
 ; Retrieve a given list for a given user
"RTN","RGCWPTP2",4,0)
PLSTPTS(DATA,NAME) ;EP
"RTN","RGCWPTP2",5,0)
 N TMP,ERR,CNT,LP,DFN,PTNM
"RTN","RGCWPTP2",6,0)
 S DATA(1)="^No patients found.",(CNT,LP)=0
"RTN","RGCWPTP2",7,0)
 D GETWP^XPAR(.TMP,"ALL",$$PARAM,$$GETNAME(NAME),.ERR)
"RTN","RGCWPTP2",8,0)
 F  S LP=$O(TMP(LP)) Q:'LP  D
"RTN","RGCWPTP2",9,0)
 .S DFN=+TMP(LP,0)
"RTN","RGCWPTP2",10,0)
 .I DFN D
"RTN","RGCWPTP2",11,0)
 ..S PTNM=$$GET1^DIQ(2,DFN_",",".01")
"RTN","RGCWPTP2",12,0)
 ..S:$L(PTNM) CNT=CNT+1,DATA(CNT)=DFN_U_PTNM
"RTN","RGCWPTP2",13,0)
 Q
"RTN","RGCWPTP2",14,0)
 ; Retrieve a list of personal lists for a user
"RTN","RGCWPTP2",15,0)
PLSTLST(DATA) ;EP
"RTN","RGCWPTP2",16,0)
 N ERR,LP
"RTN","RGCWPTP2",17,0)
 S LP=0
"RTN","RGCWPTP2",18,0)
 D GETLST^XPAR(.DATA,"ALL",$$PARAM,"Q",.ERR)
"RTN","RGCWPTP2",19,0)
 F  S LP=$O(DATA(LP)) Q:'LP  S $P(DATA(LP),U)=$$GETIEN($P(DATA(LP),U,2))
"RTN","RGCWPTP2",20,0)
 Q
"RTN","RGCWPTP2",21,0)
 ; List management API
"RTN","RGCWPTP2",22,0)
MANAGE(DATA,ACTION,NAME,VAL) ;EP
"RTN","RGCWPTP2",23,0)
 S DATA=$$VALIDATE(.NAME,ACTION="C")
"RTN","RGCWPTP2",24,0)
 Q:DATA
"RTN","RGCWPTP2",25,0)
 I ACTION="C" D SETLST(.DATA,NAME) Q
"RTN","RGCWPTP2",26,0)
 I ACTION="R" D RENLST(.DATA,NAME,.VAL) Q
"RTN","RGCWPTP2",27,0)
 I ACTION="S" D SETLST(.DATA,NAME,.VAL) Q
"RTN","RGCWPTP2",28,0)
 I ACTION="D" D DELLST(.DATA,NAME) Q
"RTN","RGCWPTP2",29,0)
 S DATA="-1^Unknown action"
"RTN","RGCWPTP2",30,0)
 Q
"RTN","RGCWPTP2",31,0)
 ; Validate list name
"RTN","RGCWPTP2",32,0)
VALIDATE(NAME,DUP) ;
"RTN","RGCWPTP2",33,0)
 N L
"RTN","RGCWPTP2",34,0)
 S NAME=$$TRIM^CIAU(NAME),L=$L(NAME),DUP=+$G(DUP)
"RTN","RGCWPTP2",35,0)
 Q:L<3!(L>30) "-1^List name must be 3-30 characters in length."
"RTN","RGCWPTP2",36,0)
 Q:NAME'?.(1A,1N,1"_",1" ") "-1^List name contains invalid characters."
"RTN","RGCWPTP2",37,0)
 I DUP,$$GETIEN(NAME) Q "-1^List name already exists."
"RTN","RGCWPTP2",38,0)
 I 'DUP,'$$GETIEN(NAME) Q "-1^List name not found."
"RTN","RGCWPTP2",39,0)
 Q ""
"RTN","RGCWPTP2",40,0)
 ; Rename existing list
"RTN","RGCWPTP2",41,0)
 ;  OLD  - Existing Instance name (aka list name)
"RTN","RGCWPTP2",42,0)
 ;  NEW  - New list name
"RTN","RGCWPTP2",43,0)
RENLST(DATA,OLD,NEW) ;EP
"RTN","RGCWPTP2",44,0)
 S DATA=$$VALIDATE(NEW,1)
"RTN","RGCWPTP2",45,0)
 D:'DATA REP^XPAR("USR",$$PARAM,$$GETNAME(OLD),NEW,.DATA)
"RTN","RGCWPTP2",46,0)
 D:'DATA CHG^XPAR("USR",$$PARAM,NEW,NEW,.DATA)
"RTN","RGCWPTP2",47,0)
 Q
"RTN","RGCWPTP2",48,0)
 ; Set List
"RTN","RGCWPTP2",49,0)
SETLST(DATA,NAME,VAL) ;EP
"RTN","RGCWPTP2",50,0)
 Q:'$L(NAME)
"RTN","RGCWPTP2",51,0)
 S:NAME=+NAME NAME=$$GETNAME(NAME)
"RTN","RGCWPTP2",52,0)
 S VAL=NAME
"RTN","RGCWPTP2",53,0)
 S:$D(VAL)'=11 VAL(1,0)=""
"RTN","RGCWPTP2",54,0)
 D EN^XPAR("USR",$$PARAM,NAME,.VAL,.DATA)
"RTN","RGCWPTP2",55,0)
 Q
"RTN","RGCWPTP2",56,0)
 ; Delete list
"RTN","RGCWPTP2",57,0)
 ;   NAME - List Name
"RTN","RGCWPTP2",58,0)
DELLST(DATA,NAME) ;EP
"RTN","RGCWPTP2",59,0)
 D DEL^XPAR("USR",$$PARAM,$$GETNAME(NAME),.DATA)
"RTN","RGCWPTP2",60,0)
 Q
"RTN","RGCWPTP2",61,0)
 ; Return parameter name/ien
"RTN","RGCWPTP2",62,0)
PARAM(X) Q $S($G(X):$$FIND1^DIC(8989.51,,,$$PARAM),1:"RGCWPTPL PERSONAL LIST")
"RTN","RGCWPTP2",63,0)
 ; Return IEN to file 8989.5
"RTN","RGCWPTP2",64,0)
GETIEN(NAME) ;
"RTN","RGCWPTP2",65,0)
 Q $S(NAME=+NAME:NAME,1:$O(^XTV(8989.5,"AC",$$PARAM(1),+DUZ_";VA(200,",NAME,0)))
"RTN","RGCWPTP2",66,0)
 ; Returns instance name for 8989.5 IEN
"RTN","RGCWPTP2",67,0)
GETNAME(IEN) ;
"RTN","RGCWPTP2",68,0)
 Q $S(IEN=+IEN:$$GET1^DIQ(8989.5,IEN_",",.03),1:IEN)
"RTN","RGCWPTP3")
0^5^B17286095
"RTN","RGCWPTP3",1,0)
RGCWPTP3 ;RI/CBMI/MGH - Patient List Management ;20-Mar-2014 21:53;PIW
"RTN","RGCWPTP3",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 38
"RTN","RGCWPTP3",3,0)
 ; Call logic to manage team lists
"RTN","RGCWPTP3",4,0)
MANAGE(DATA,LIST,ACTION,NAME,VAL) ;
"RTN","RGCWPTP3",5,0)
 D EXEC(12)
"RTN","RGCWPTP3",6,0)
 Q
"RTN","RGCWPTP3",7,0)
 ; Execute logic at specified node
"RTN","RGCWPTP3",8,0)
EXEC(NODE) ;
"RTN","RGCWPTP3",9,0)
 N $ET
"RTN","RGCWPTP3",10,0)
 S $ET="",@$$TRAP^CIAUOS("EXECERR^RGCWPTPL")
"RTN","RGCWPTP3",11,0)
 X $G(^RGCWF(999.2,+LIST,NODE))
"RTN","RGCWPTP3",12,0)
 Q
"RTN","RGCWPTP3",13,0)
 ; List management API
"RTN","RGCWPTP3",14,0)
MAN2(DATA,LIST,ACTION,NAME,VAL) ;EP
"RTN","RGCWPTP3",15,0)
 S DATA=""
"RTN","RGCWPTP3",16,0)
 I ACTION="S"!(ACTION="P")!(ACTION="D") S DATA(1)=$$VALIDATE(NAME)
"RTN","RGCWPTP3",17,0)
 I ACTION="C" S DATA=$$VALIDATE(NAME,1)
"RTN","RGCWPTP3",18,0)
 Q:DATA(1)
"RTN","RGCWPTP3",19,0)
 I ACTION="T" D GETTEAM(.DATA) Q
"RTN","RGCWPTP3",20,0)
 I ACTION="P" D GETLST(.DATA,NAME) Q
"RTN","RGCWPTP3",21,0)
 I ACTION="C" D CRLST(.DATA,NAME) Q
"RTN","RGCWPTP3",22,0)
 I ACTION="S" D SETLST(.DATA,NAME,.VAL) Q
"RTN","RGCWPTP3",23,0)
 I ACTION="D" D DELETE(.DATA,NAME) Q
"RTN","RGCWPTP3",24,0)
 S DATA(1)="-1^Unknown action"
"RTN","RGCWPTP3",25,0)
 Q
"RTN","RGCWPTP3",26,0)
 ;Return the list of providers for this list
"RTN","RGCWPTP3",27,0)
GETLST(DATA,NAME) ;EP
"RTN","RGCWPTP3",28,0)
 N CNT,IEN,PRV,QUALS,DATE,PAT
"RTN","RGCWPTP3",29,0)
 K DATA
"RTN","RGCWPTP3",30,0)
 S DATA(1)="^No Users found.",(CNT,IEN)=0
"RTN","RGCWPTP3",31,0)
 S DATE="TODAY",DATE=$$DT^CIAU(DATE)
"RTN","RGCWPTP3",32,0)
 S TEAM=$$GETIEN(NAME)
"RTN","RGCWPTP3",33,0)
 I '$D(^OR(100.21,TEAM,0)) S DATA(1)="^Not a valid team." Q
"RTN","RGCWPTP3",34,0)
 F  S IEN=$O(^OR(100.21,TEAM,1,IEN)) Q:'IEN  S PRV=+$G(^(IEN,0)) D
"RTN","RGCWPTP3",35,0)
 .S X=$$ACTIVE^RGCWUSCX(PRV,DATE)
"RTN","RGCWPTP3",36,0)
 .I X=1 S CNT=CNT+1,DATA(CNT)=PRV_U_$P(^VA(200,PRV,0),U)_U_"U"
"RTN","RGCWPTP3",37,0)
 .I X=0 S CNT=CNT+1,DATA(CNT)=PRV_"*"_U_$P(^VA(200,PRV,0),U)_U_"U"
"RTN","RGCWPTP3",38,0)
 S IEN=0 F  S IEN=$O(^OR(100.21,TEAM,10,IEN)) Q:'IEN  S PAT=+$G(^(IEN,0)) D
"RTN","RGCWPTP3",39,0)
 .S CNT=CNT+1,DATA(CNT)=PAT_U_$P(^DPT(PAT,0),U)_U_"M"
"RTN","RGCWPTP3",40,0)
 Q
"RTN","RGCWPTP3",41,0)
 ; Validate list name
"RTN","RGCWPTP3",42,0)
VALIDATE(NAME,DUP) ;
"RTN","RGCWPTP3",43,0)
 N L
"RTN","RGCWPTP3",44,0)
 S NAME=$$TRIM^CIAU(NAME),L=$L(NAME),DUP=+$G(DUP)
"RTN","RGCWPTP3",45,0)
 Q:L<3!(L>30) "-1^List name must be 3-30 characters in length."
"RTN","RGCWPTP3",46,0)
 Q:NAME'?.(1A,1N,1"_",1" ") "-1^List name contains invalid characters."
"RTN","RGCWPTP3",47,0)
 I DUP,$$GETIEN(NAME) Q "-1^List name already exists."
"RTN","RGCWPTP3",48,0)
 I 'DUP,'$$GETIEN(NAME) Q "-1^List name not found."
"RTN","RGCWPTP3",49,0)
 Q ""
"RTN","RGCWPTP3",50,0)
CRLST(DATA,NAME) ;EP Create a new team list
"RTN","RGCWPTP3",51,0)
 N DATE,FNUM,FDA,IEN
"RTN","RGCWPTP3",52,0)
 K DATA
"RTN","RGCWPTP3",53,0)
 S DATE="TODAY",DATE=$$DT^CIAU(DATE)
"RTN","RGCWPTP3",54,0)
 S FNUM=100.21
"RTN","RGCWPTP3",55,0)
 S FDA=$NA(FDA(FNUM,"+1,"))
"RTN","RGCWPTP3",56,0)
 S @FDA@(.01)=NAME
"RTN","RGCWPTP3",57,0)
 S @FDA@(.1)=$$UPPER(NAME)
"RTN","RGCWPTP3",58,0)
 S @FDA@(1)="TM"
"RTN","RGCWPTP3",59,0)
 S @FDA@(1.6)=DUZ
"RTN","RGCWPTP3",60,0)
 S @FDA@(1.65)=DATE
"RTN","RGCWPTP3",61,0)
 S @FDA@(1.7)="Y"
"RTN","RGCWPTP3",62,0)
 S DATA(1)=$$UPDATE^BGOUTL(.FDA,"",.IEN)
"RTN","RGCWPTP3",63,0)
 S:'DATA(1) DATA(1)=IEN(1)
"RTN","RGCWPTP3",64,0)
 I $D(IEN(1)) D
"RTN","RGCWPTP3",65,0)
 .S FDA=$NA(FDA(100.212,"+1,"_IEN(1)_","))
"RTN","RGCWPTP3",66,0)
 .S @FDA@(.01)=DUZ
"RTN","RGCWPTP3",67,0)
 .D UPDATE^DIE("","FDA","IEN","ERR")
"RTN","RGCWPTP3",68,0)
 Q
"RTN","RGCWPTP3",69,0)
 ; Set List
"RTN","RGCWPTP3",70,0)
SETLST(DATA,NAME,VAL) ;EP
"RTN","RGCWPTP3",71,0)
 N TEAM,FDA,FNUM,ERR,IEN,CNTU,CNTM,NUM
"RTN","RGCWPTP3",72,0)
 K DATA
"RTN","RGCWPTP3",73,0)
 Q:'$L(NAME)
"RTN","RGCWPTP3",74,0)
 S TEAM=$$GETIEN(NAME)
"RTN","RGCWPTP3",75,0)
 S CNTU=0,CNTM=0
"RTN","RGCWPTP3",76,0)
 I '$D(^OR(100.21,TEAM,0)) S DATA(1)="^Not a valid team." Q
"RTN","RGCWPTP3",77,0)
 D DELLST(.DATA,NAME)
"RTN","RGCWPTP3",78,0)
 S NUM="" F  S NUM=$O(VAL(NUM)) Q:NUM=""  D
"RTN","RGCWPTP3",79,0)
 .I $P(VAL(NUM),U,3)="U"  D
"RTN","RGCWPTP3",80,0)
 ..K FDA,IEN,ERR
"RTN","RGCWPTP3",81,0)
 ..S FDA=$NA(FDA(100.212,"+1,"_TEAM_","))
"RTN","RGCWPTP3",82,0)
 ..S @FDA@(.01)=$P(VAL(NUM),U,1)
"RTN","RGCWPTP3",83,0)
 ..D UPDATE^DIE("","FDA","IEN","ERR")
"RTN","RGCWPTP3",84,0)
 .I $P(VAL(NUM),U,3)="M"  D
"RTN","RGCWPTP3",85,0)
 ..K FDA,IEN,ERR
"RTN","RGCWPTP3",86,0)
 ..S FDA=$NA(FDA(100.2101,"+1,"_TEAM_","))
"RTN","RGCWPTP3",87,0)
 ..S @FDA@(.01)=$P(VAL(NUM),U,1)_";DPT("
"RTN","RGCWPTP3",88,0)
 ..D UPDATE^DIE("","FDA","IEN","ERR")
"RTN","RGCWPTP3",89,0)
 Q
"RTN","RGCWPTP3",90,0)
GETIEN(NAME) ;Get the IEN of the list
"RTN","RGCWPTP3",91,0)
 N IEN
"RTN","RGCWPTP3",92,0)
 S IEN="" S IEN=$O(^OR(100.21,"B",NAME,IEN))
"RTN","RGCWPTP3",93,0)
 Q IEN
"RTN","RGCWPTP3",94,0)
DELLST(DATA,NAME) ;EP
"RTN","RGCWPTP3",95,0)
 N TEAM,FDA,FNUM,PRV,DA,DIK,MEM
"RTN","RGCWPTP3",96,0)
 Q:'$L(NAME)
"RTN","RGCWPTP3",97,0)
 S TEAM=$$GETIEN(NAME)
"RTN","RGCWPTP3",98,0)
 S DATA=0
"RTN","RGCWPTP3",99,0)
 I '$D(^OR(100.21,TEAM,0)) S DATA(1)="^Not a valid team." Q
"RTN","RGCWPTP3",100,0)
 S PRV=0 F  S PRV=$O(^OR(100.21,TEAM,1,PRV)) Q:PRV=""  D
"RTN","RGCWPTP3",101,0)
 .S DA(1)=TEAM,DA=PRV
"RTN","RGCWPTP3",102,0)
 .S DIK="^OR(100.21,DA(1),1,"
"RTN","RGCWPTP3",103,0)
 .S:DA DATA=$$DELETE^BGOUTL(DIK,.DA)
"RTN","RGCWPTP3",104,0)
 S MEM=0 F  S MEM=$O(^OR(100.21,TEAM,10,MEM)) Q:MEM=""  D
"RTN","RGCWPTP3",105,0)
 .S DA(1)=TEAM,DA=MEM
"RTN","RGCWPTP3",106,0)
 .S DIK="^OR(100.21,DA(1),10,"
"RTN","RGCWPTP3",107,0)
 .S:DA DATA=$$DELETE^BGOUTL(DIK,.DA)
"RTN","RGCWPTP3",108,0)
 I DATA="" S DATA=0
"RTN","RGCWPTP3",109,0)
 Q DATA
"RTN","RGCWPTP3",110,0)
DELETE(DATA,NAME) ;Delete entire team
"RTN","RGCWPTP3",111,0)
 N FNUM,IEN
"RTN","RGCWPTP3",112,0)
 K DATA
"RTN","RGCWPTP3",113,0)
 Q:'$L(NAME)
"RTN","RGCWPTP3",114,0)
 S TEAM=$$GETIEN(NAME)
"RTN","RGCWPTP3",115,0)
 S FNUM=100.21,IEN=TEAM
"RTN","RGCWPTP3",116,0)
 S DATA=$$DELETE^BGOUTL(FNUM,IEN)
"RTN","RGCWPTP3",117,0)
 Q
"RTN","RGCWPTP3",118,0)
GETTEAM(DATA) ;Get the teams with this user
"RTN","RGCWPTP3",119,0)
 N CNT,IEN,X
"RTN","RGCWPTP3",120,0)
 S (CNT,IEN)=0
"RTN","RGCWPTP3",121,0)
 F  S IEN=$O(^OR(100.21,"C",DUZ,IEN)) Q:'IEN  D
"RTN","RGCWPTP3",122,0)
 .S X=$G(^OR(100.21,IEN,0))
"RTN","RGCWPTP3",123,0)
 .S:$P(X,U,2)="TM" CNT=CNT+1,DATA(CNT)=IEN_U_X
"RTN","RGCWPTP3",124,0)
 Q
"RTN","RGCWPTP3",125,0)
UPPER(X) ; Convert lower case X to UPPER CASE
"RTN","RGCWPTP3",126,0)
 Q $TR(X,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","RGCWPTPC")
0^6^B8280859
"RTN","RGCWPTPC",1,0)
RGCWPTPC ;RI/CBMI/DKM - RPC calls for provider information ;20-Mar-2014 21:53;PIW
"RTN","RGCWPTPC",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 38
"RTN","RGCWPTPC",3,0)
USESD() Q $G(DUZ("AG"))'="I"
"RTN","RGCWPTPC",4,0)
 ; Get the primary provider
"RTN","RGCWPTPC",5,0)
OUTPTPR(DFN) ;EP
"RTN","RGCWPTPC",6,0)
 Q:$$USESD $$OUTPTPR^SDUTL3(DFN)
"RTN","RGCWPTPC",7,0)
 N PCP
"RTN","RGCWPTPC",8,0)
 S PCP=$$GET1^DIQ(9000001,DFN,.14,"I")
"RTN","RGCWPTPC",9,0)
 Q $S(PCP:PCP_U_$P(^VA(200,PCP,0),U),1:"")
"RTN","RGCWPTPC",10,0)
 ; Get team
"RTN","RGCWPTPC",11,0)
OUTPTTM(DFN) ;EP
"RTN","RGCWPTPC",12,0)
 Q:$$USESD $$OUTPTTM^SDUTL3(DFN)
"RTN","RGCWPTPC",13,0)
 N TM
"RTN","RGCWPTPC",14,0)
 S TM=$O(^BSDPCT("AB",+$$OUTPTPR(DFN),0))
"RTN","RGCWPTPC",15,0)
 Q $S(TM:TM_U_$$GET1^DIQ(9009017.5,TM,.01),1:"")
"RTN","RGCWPTPC",16,0)
 ; Return Primary Care Detail information
"RTN","RGCWPTPC",17,0)
DETAIL(DATA,DFN) ;EP
"RTN","RGCWPTPC",18,0)
 I $$USESD D
"RTN","RGCWPTPC",19,0)
 .N I,X
"RTN","RGCWPTPC",20,0)
 .S X=$$OUTPTTM^SDUTL3(DFN,DT),I=0
"RTN","RGCWPTPC",21,0)
 .I X>0 D
"RTN","RGCWPTPC",22,0)
 ..D ADDDET($P(X,U,2),"Primary Care Team")
"RTN","RGCWPTPC",23,0)
 ..D ADDDET($P($G(^SCTM(404.51,+X,0)),U,2),"Phone")
"RTN","RGCWPTPC",24,0)
 .E  D ADDDET("No Primary Care Team Assigned.")
"RTN","RGCWPTPC",25,0)
 .D ADDPRV("Primary Care Provider",+$$OUTPTPR^SDUTL3(DFN,DT))
"RTN","RGCWPTPC",26,0)
 .D ADDPRV("Associate Provider",+$$OUTPTAP^SDUTL3(DFN,DT))
"RTN","RGCWPTPC",27,0)
 .D ADDPRV("Attending Physician",+$G(^DPT(DFN,.1041)),1)
"RTN","RGCWPTPC",28,0)
 E  D
"RTN","RGCWPTPC",29,0)
 .N I,X,BDPQ,BDPTYPE,BDPCOUNT,BDPRIEN,BDPTYPNM,BDPCPRV
"RTN","RGCWPTPC",30,0)
 .S I=0
"RTN","RGCWPTPC",31,0)
 .D ADDDET("**CURRENT DESIGNATED PROVIDERS - BY PROVIDER CATEGORY TYPE**")
"RTN","RGCWPTPC",32,0)
 .I '$D(^BDPRECN("AA",DFN)) D ADDDET("**--NO EXISTING DESIGNATED PROVIDERS--**") Q
"RTN","RGCWPTPC",33,0)
 .S BDPQ=0,BDPTYPE="",BDPCOUNT=0
"RTN","RGCWPTPC",34,0)
 .F  S BDPTYPE=$O(^BDPRECN("AA",DFN,BDPTYPE)) Q:BDPTYPE=""  D
"RTN","RGCWPTPC",35,0)
 ..S BDPCOUNT=BDPCOUNT+1,BDPRIEN=""
"RTN","RGCWPTPC",36,0)
 ..S BDPTYPNM=$P(^BDPTCAT(BDPTYPE,0),U)                                  ;Type Print
"RTN","RGCWPTPC",37,0)
 ..F  S BDPRIEN=$O(^BDPRECN("AA",DFN,BDPTYPE,BDPRIEN)) Q:BDPRIEN'=+BDPRIEN  D
"RTN","RGCWPTPC",38,0)
 ...S BDPCPRV=+$P($G(^BDPRECN(BDPRIEN,0)),U,3)                           ;Current Provider IEN
"RTN","RGCWPTPC",39,0)
 ...S BDPCPRVP=$S(BDPCPRV:$P($G(^VA(200,BDPCPRV,0)),U),1:"<None Currently Assigned>")
"RTN","RGCWPTPC",40,0)
 ...D ADDDET(BDPCOUNT_"    "_$$LJ^XLFSTR($E(BDPTYPNM,1,30),30)_": "_$$LJ^XLFSTR($E(BDPCPRVP,1,35),45))
"RTN","RGCWPTPC",41,0)
 Q
"RTN","RGCWPTPC",42,0)
ADDDET(TXT,LBL) ;
"RTN","RGCWPTPC",43,0)
 Q:'$L($G(TXT))
"RTN","RGCWPTPC",44,0)
 S:$D(LBL) TXT=$$RJ^XLFSTR(LBL,21)_":  "_TXT
"RTN","RGCWPTPC",45,0)
 S DATA(I)=TXT,I=I+1
"RTN","RGCWPTPC",46,0)
 Q
"RTN","RGCWPTPC",47,0)
ADDPRV(TYP,PRV,FLG) ;
"RTN","RGCWPTPC",48,0)
 D ADDDET(" ")
"RTN","RGCWPTPC",49,0)
 I $D(^VA(200,PRV,0)) D
"RTN","RGCWPTPC",50,0)
 .N X
"RTN","RGCWPTPC",51,0)
 .D ADDDET($P(^VA(200,PRV,0),U),TYP)
"RTN","RGCWPTPC",52,0)
 .S X=$G(^VA(200,PRV,.13))
"RTN","RGCWPTPC",53,0)
 .D ADDDET($P(X,U,7),"Analog Pager")
"RTN","RGCWPTPC",54,0)
 .D ADDDET($P(X,U,8),"Digital Pager")
"RTN","RGCWPTPC",55,0)
 .D ADDDET($P(X,U,2),"Office Phone")
"RTN","RGCWPTPC",56,0)
 E  D:'$G(FLG) ADDDET("No "_TYP_" Assigned.")
"RTN","RGCWPTPC",57,0)
 Q
"RTN","RGCWPTPC",58,0)
 ; Find all providers on the team associated with the primary provider
"RTN","RGCWPTPC",59,0)
TEAM(PRV) ;EP
"RTN","RGCWPTPC",60,0)
 N RGX,RGY,RGTM,RGCT
"RTN","RGCWPTPC",61,0)
 K ^TMP("ORIHS",$J)
"RTN","RGCWPTPC",62,0)
 ;RGX is the team of the primary provider
"RTN","RGCWPTPC",63,0)
 S RGCT=0,RGX=$O(^BSDPCT("AB",PRV,0)),RGY=0
"RTN","RGCWPTPC",64,0)
 Q:'RGX
"RTN","RGCWPTPC",65,0)
 F  S RGY=$O(^BSDPCT(RGX,1,RGY)) Q:RGY=""  D
"RTN","RGCWPTPC",66,0)
 .S RGTM=$P($G(^BSDPCT(RGX,1,RGY,0)),U)
"RTN","RGCWPTPC",67,0)
 .S:RGTM'="" ^TMP("ORIHS",$J,RGTM)=""
"RTN","RGCWPTPC",68,0)
 Q
"RTN","RGCWPTPL")
0^7^B18691423
"RTN","RGCWPTPL",1,0)
RGCWPTPL ;RI/CBMI/DKM - Patient List Management ;20-Mar-2014 21:53;PIW
"RTN","RGCWPTPL",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 38
"RTN","RGCWPTPL",3,0)
 ; Lookup by full or partial SSN
"RTN","RGCWPTPL",4,0)
LOOKUP(DATA,ID) ;
"RTN","RGCWPTPL",5,0)
 N IEN,XREF,CNT,QUALS
"RTN","RGCWPTPL",6,0)
 S DATA=$$TMPGBL^RGCWFRPC,(CNT,IEN)=0,ID=$$UP^XLFSTR($TR(ID,"-")),XREF=$S(ID?4N:"BS",ID?1A4N:"BS5",1:"SSN")
"RTN","RGCWPTPL",7,0)
 F  S IEN=$O(^DPT(XREF,ID,IEN)) Q:'IEN  D
"RTN","RGCWPTPL",8,0)
 .S:$$ISACTIVE^RGCWPTCX(IEN,.QUALS) CNT=CNT+1,@DATA@(CNT)=IEN_U_$P(^DPT(IEN,0),U)_U_$$SSN(IEN)_"   "_$$DOB^DPTLK1(IEN)
"RTN","RGCWPTPL",9,0)
 Q
"RTN","RGCWPTPL",10,0)
 ; Return list of patients with specified HRN
"RTN","RGCWPTPL",11,0)
HRNLKP(DATA,HRN) ;
"RTN","RGCWPTPL",12,0)
 N CNT,DFN,QUALS
"RTN","RGCWPTPL",13,0)
 S CNT=0,HRN=$$UP^XLFSTR($TR(HRN,"-"))
"RTN","RGCWPTPL",14,0)
 S:HRN?1.N HRN=+HRN
"RTN","RGCWPTPL",15,0)
 F DFN=0:0 S DFN=$O(^AUPNPAT("D",HRN,DFN)) Q:'DFN  D:$D(^(DFN,DUZ(2)))
"RTN","RGCWPTPL",16,0)
 .S:$$ISACTIVE^RGCWPTCX(DFN,.QUALS) CNT=CNT+1,DATA(CNT)=DFN_U_$P(^DPT(DFN,0),U)_U_HRN_"   "_$$DOB^DPTLK1(DFN)
"RTN","RGCWPTPL",17,0)
 Q
"RTN","RGCWPTPL",18,0)
 ; Patient lookup using IEN
"RTN","RGCWPTPL",19,0)
IENLKP(DATA,IEN) ;
"RTN","RGCWPTPL",20,0)
 N DFN
"RTN","RGCWPTPL",21,0)
 I $E(IEN)="`" D
"RTN","RGCWPTPL",22,0)
 .S DFN=+$E(IEN,2,$L(IEN))
"RTN","RGCWPTPL",23,0)
 .S:$$ISACTIVE^RGCWPTCX(DFN) DATA(1)=DFN_U_$P(^DPT(DFN,0),U)_U_$$HRN^RGCWPTCX(DFN)_"   "_$$DOB^DPTLK1(DFN)
"RTN","RGCWPTPL",24,0)
 Q
"RTN","RGCWPTPL",25,0)
 ; Patient lookup using DOB
"RTN","RGCWPTPL",26,0)
DOBLKP(DATA,DOB) ;
"RTN","RGCWPTPL",27,0)
 N DFN,%DT,X,Y,CNT,QUALS
"RTN","RGCWPTPL",28,0)
 S DATA=$$TMPGBL^RGCWFRPC
"RTN","RGCWPTPL",29,0)
 I $E(DOB)="B" D
"RTN","RGCWPTPL",30,0)
 .S DOB=$E(DOB,2,$L(DOB)),CNT=0
"RTN","RGCWPTPL",31,0)
 .S %DT="P",X=DOB D ^%DT
"RTN","RGCWPTPL",32,0)
 .I Y>0 S DOB=Y D
"RTN","RGCWPTPL",33,0)
 ..S DFN=0 F  S DFN=$O(^DPT("ADOB",DOB,DFN)) Q:DFN<1  D
"RTN","RGCWPTPL",34,0)
 ...S:$$ISACTIVE^RGCWPTCX(DFN,.QUALS) CNT=CNT+1,@DATA@(CNT)=DFN_U_$P(^DPT(DFN,0),U)_U_$$HRN^RGCWPTCX(DFN)_"   "_$$DOB^DPTLK1(DFN)
"RTN","RGCWPTPL",35,0)
 Q
"RTN","RGCWPTPL",36,0)
 ; Return formatted SSN for patient
"RTN","RGCWPTPL",37,0)
SSN(DFN) N SSN
"RTN","RGCWPTPL",38,0)
 S SSN=$$SSN^DPTLK1(DFN)
"RTN","RGCWPTPL",39,0)
 Q $S(SSN?9N.1"P":$E(SSN,1,3)_"-"_$E(SSN,4,5)_"-"_$E(SSN,6,10),1:"")
"RTN","RGCWPTPL",40,0)
 ; Return a bolus of patient names
"RTN","RGCWPTPL",41,0)
LISTALL(DATA,FROM,DIR,MAX) ;
"RTN","RGCWPTPL",42,0)
 N CNT,IEN,MAX,GBL,QUALS,DEMO
"RTN","RGCWPTPL",43,0)
 S MAX=$G(MAX,44),CNT=0,DEMO=$$LKPQUAL^RGCWPTCX("@RGCWPTCX DEMO MODE",.QUALS)
"RTN","RGCWPTPL",44,0)
 I DEMO D
"RTN","RGCWPTPL",45,0)
 .S IEN=0,GBL=$NA(^TMP("RGCWPTPL",$J))
"RTN","RGCWPTPL",46,0)
 .K @GBL
"RTN","RGCWPTPL",47,0)
 .F  S IEN=$O(^DPT("ATEST",IEN)) Q:'IEN  S @GBL@($E($P(^DPT(IEN,0),U),1,30),IEN)=""
"RTN","RGCWPTPL",48,0)
 E  I '$$LKPQUAL^RGCWPTCX("MSC DG ALL SITES HIPAA",.QUALS),$D(^DPT("ADIV",DUZ(2))) S GBL=$NA(^(DUZ(2)))
"RTN","RGCWPTPL",49,0)
 E  S GBL=$NA(^DPT("B"))
"RTN","RGCWPTPL",50,0)
 F  S FROM=$O(@GBL@(FROM),DIR),IEN=0 Q:FROM=""  D  Q:CNT'<MAX
"RTN","RGCWPTPL",51,0)
 .F  S IEN=$O(@GBL@(FROM,IEN)) Q:'IEN  D
"RTN","RGCWPTPL",52,0)
 ..I 'DEMO,'($D(@GBL@(FROM,IEN))#2),$$LKPQUAL^RGCWPTCX("@RGCWPTCX IGNORE ALIASES",.QUALS) Q
"RTN","RGCWPTPL",53,0)
 ..S:$$ISACTIVE^RGCWPTCX(IEN,.QUALS) CNT=CNT+1,DATA(CNT)=IEN_U_FROM
"RTN","RGCWPTPL",54,0)
 K:DEMO ^TMP("RGCWPTPL",$J)
"RTN","RGCWPTPL",55,0)
 Q
"RTN","RGCWPTPL",56,0)
 ; Returns information about a list or lists
"RTN","RGCWPTPL",57,0)
 ;   LIST = IEN (19930.4) of list (all lists returned if not specified)
"RTN","RGCWPTPL",58,0)
 ;   Returns IEN^NAME^FLAGS^ENTITY^DFLT
"RTN","RGCWPTPL",59,0)
 ;      where DFLT is default item settings as
"RTN","RGCWPTPL",60,0)
 ;         IEN^NAME^START DATE^END DATE^DATE LABEL
"RTN","RGCWPTPL",61,0)
LISTINFO(DATA,LIST) ;
"RTN","RGCWPTPL",62,0)
 N X,X1,X2,INFO,SEQ,ONE,CNT
"RTN","RGCWPTPL",63,0)
 S LIST=+$G(LIST),DATA="",CNT=0
"RTN","RGCWPTPL",64,0)
 I LIST S X1=LIST-1,X2=LIST
"RTN","RGCWPTPL",65,0)
 E  S X1=0,X2=9999999999
"RTN","RGCWPTPL",66,0)
 F  S X1=$O(^RGCWF(999.2,X1)) Q:'X1!(X1>X2)  S X=^(X1,0) I '$P(X,U,5),$$LISTSCRN(X1) D
"RTN","RGCWPTPL",67,0)
 .S INFO=X1_U_$P(X,U,1,3),SEQ=+$P(X,U,4)
"RTN","RGCWPTPL",68,0)
 .S $P(INFO,U,5)=$TR($$GET^XPAR("ALL",$$PARAMITM,"`"_X1),"~",U)
"RTN","RGCWPTPL",69,0)
 .I LIST S DATA=INFO
"RTN","RGCWPTPL",70,0)
 .E  S CNT=CNT+1,DATA(SEQ*1000+CNT)=INFO
"RTN","RGCWPTPL",71,0)
 Q
"RTN","RGCWPTPL",72,0)
 ; Screen logic for lists
"RTN","RGCWPTPL",73,0)
LISTSCRN(LIST) ;
"RTN","RGCWPTPL",74,0)
 I 1
"RTN","RGCWPTPL",75,0)
 D EXEC(13)
"RTN","RGCWPTPL",76,0)
 Q $T
"RTN","RGCWPTPL",77,0)
 ; Call logic to generate patient list
"RTN","RGCWPTPL",78,0)
LISTPTS(DATA,LIST,IEN,FLT) ;
"RTN","RGCWPTPL",79,0)
 N START,END
"RTN","RGCWPTPL",80,0)
 D PARSEFLT(.FLT,.START,.END)
"RTN","RGCWPTPL",81,0)
 D EXEC(10)
"RTN","RGCWPTPL",82,0)
 Q
"RTN","RGCWPTPL",83,0)
 ; Call logic to generate list selections
"RTN","RGCWPTPL",84,0)
LISTSEL(DATA,LIST,FROM,DIR,MAX,FLT) ;
"RTN","RGCWPTPL",85,0)
 N START,END
"RTN","RGCWPTPL",86,0)
 D PARSEFLT(.FLT,.START,.END)
"RTN","RGCWPTPL",87,0)
 D EXEC(11)
"RTN","RGCWPTPL",88,0)
 Q
"RTN","RGCWPTPL",89,0)
 ; Parse list filter
"RTN","RGCWPTPL",90,0)
PARSEFLT(FLT,START,END) ;
"RTN","RGCWPTPL",91,0)
 S FLT=$P($G(FLT),U),START=$P(FLT,";"),END=$P(FLT,";",2)
"RTN","RGCWPTPL",92,0)
 D:$L(START) DT^DILF("T",START,.START,"","")
"RTN","RGCWPTPL",93,0)
 D:$L(END) DT^DILF("T",END,.END,"","")
"RTN","RGCWPTPL",94,0)
 Q
"RTN","RGCWPTPL",95,0)
 ; Call logic to manage user lists
"RTN","RGCWPTPL",96,0)
MANAGE(DATA,LIST,ACTION,NAME,VAL) ;
"RTN","RGCWPTPL",97,0)
 D EXEC(12)
"RTN","RGCWPTPL",98,0)
 Q
"RTN","RGCWPTPL",99,0)
 ; Execute logic at specified node
"RTN","RGCWPTPL",100,0)
EXEC(NODE) ;
"RTN","RGCWPTPL",101,0)
 N $ET
"RTN","RGCWPTPL",102,0)
 S $ET="",@$$TRAP^CIAUOS("EXECERR^RGCWPTPL")
"RTN","RGCWPTPL",103,0)
 D:'$G(LIST) GETDFLT(.LIST)
"RTN","RGCWPTPL",104,0)
 X $G(^RGCWF(999.2,+LIST,NODE))
"RTN","RGCWPTPL",105,0)
 Q
"RTN","RGCWPTPL",106,0)
EXECERR K DATA
"RTN","RGCWPTPL",107,0)
 S DATA(1)="-1^Error: "_$$EC^%ZOSV
"RTN","RGCWPTPL",108,0)
 I 0
"RTN","RGCWPTPL",109,0)
 Q
"RTN","RGCWPTPL",110,0)
 ; Return default patient list source
"RTN","RGCWPTPL",111,0)
GETDFLT(DATA) ;
"RTN","RGCWPTPL",112,0)
 S DATA=$$GET^XPAR("ALL",$$PARAMSRC)
"RTN","RGCWPTPL",113,0)
 D:DATA LISTINFO(.DATA,DATA)
"RTN","RGCWPTPL",114,0)
 Q
"RTN","RGCWPTPL",115,0)
 ; Save new default patient list settings
"RTN","RGCWPTPL",116,0)
 ;   LIST = Default list (if missing, default is deleted)
"RTN","RGCWPTPL",117,0)
 ;  .VAL  = Default settings for lists (optional)
"RTN","RGCWPTPL",118,0)
SAVEDFLT(DATA,LIST,VAL) ;
"RTN","RGCWPTPL",119,0)
 N LP
"RTN","RGCWPTPL",120,0)
 S LIST=$S($G(LIST)>0:"`"_+LIST,1:"@")
"RTN","RGCWPTPL",121,0)
 D EN^XPAR("USR",$$PARAMSRC,1,LIST,.DATA)
"RTN","RGCWPTPL",122,0)
 I 'DATA,$D(VAL) D
"RTN","RGCWPTPL",123,0)
 .;D NDEL^XPAR("USR",$$PARAMITM)
"RTN","RGCWPTPL",124,0)
 .F LP=0:0 S LP=$O(VAL(LP)) Q:'LP!DATA  D
"RTN","RGCWPTPL",125,0)
 ..S VAL=VAL(LP)
"RTN","RGCWPTPL",126,0)
 ..D:VAL>0 EN^XPAR("USR",$$PARAMITM,"`"_+VAL,$TR($P(VAL,U,5,99),U,"~"),.DATA)
"RTN","RGCWPTPL",127,0)
 Q
"RTN","RGCWPTPL",128,0)
 ; Return date ranges for clinic appointments
"RTN","RGCWPTPL",129,0)
CLINRNG(DATA) ;
"RTN","RGCWPTPL",130,0)
 D GETWP^XPAR(.DATA,"ALL","RGCWPTPL DATE RANGES")
"RTN","RGCWPTPL",131,0)
 Q
"RTN","RGCWPTPL",132,0)
 ; Returns parameter name for default source
"RTN","RGCWPTPL",133,0)
PARAMSRC() Q "RGCWPTPL DEFAULT SOURCE"
"RTN","RGCWPTPL",134,0)
 ; Returns parameter name for default item
"RTN","RGCWPTPL",135,0)
PARAMITM() Q "RGCWPTPL DEFAULT ITEM"
"RTN","RGCWPTPS")
0^8^B4836702
"RTN","RGCWPTPS",1,0)
RGCWPTPS ;RI/CBMI/DKM - Patient search ;20-Mar-2014 21:53;PIW
"RTN","RGCWPTPS",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 38
"RTN","RGCWPTPS",3,0)
SEARCH(DATA,MAX,LNAME,FNAME,MRN,SSN,IEN,SEX,DOB) ;EP
"RTN","RGCWPTPS",4,0)
 N CNT
"RTN","RGCWPTPS",5,0)
 S DATA=$$TMPGBL^RGCWFRPC,CNT=0
"RTN","RGCWPTPS",6,0)
 S MAX=$G(MAX,100),LNAME=$G(LNAME),FNAME=$G(FNAME)
"RTN","RGCWPTPS",7,0)
 S MRN=$G(MRN),SSN=$G(SSN),SEX=$G(SEX),DOB=+$G(DOB),IEN=+$G(IEN)
"RTN","RGCWPTPS",8,0)
 I IEN D  Q
"RTN","RGCWPTPS",9,0)
 .N X
"RTN","RGCWPTPS",10,0)
 .D IENLKP^RGCWPTPL(.X,IEN),ADD(.X)
"RTN","RGCWPTPS",11,0)
 I $L(MRN) D  Q
"RTN","RGCWPTPS",12,0)
 .N X
"RTN","RGCWPTPS",13,0)
 .D HRNLKP^RGCWPTPL(.X,MRN)
"RTN","RGCWPTPS",14,0)
 .M @DATA=X
"RTN","RGCWPTPS",15,0)
 I $L(SSN) D  Q
"RTN","RGCWPTPS",16,0)
 .D LOOKUP^RGCWPTPL(.DATA,SSN)
"RTN","RGCWPTPS",17,0)
 I $L(LNAME)<3 D  Q
"RTN","RGCWPTPS",18,0)
 .D ERROR("You must at least supply a SSN, MRN, or last name (minimum 3 characters).")
"RTN","RGCWPTPS",19,0)
 N IEN,GBL,QUALS,DEMO,FROM,LLEN,FLEN,NAME,X0
"RTN","RGCWPTPS",20,0)
 S LNAME=$$UP^XLFSTR(LNAME),FNAME=$$UP^XLFSTR(FNAME),SEX=$$UP^XLFSTR(SEX)
"RTN","RGCWPTPS",21,0)
 S FROM=LNAME,LLEN=$L(LNAME),FLEN=$L(FNAME)
"RTN","RGCWPTPS",22,0)
 S DEMO=$$LKPQUAL^RGCWPTCX("@RGCWPTCX DEMO MODE",.QUALS)
"RTN","RGCWPTPS",23,0)
 I DEMO D
"RTN","RGCWPTPS",24,0)
 .S IEN=0,GBL=$NA(^TMP("RGCWPTPL",$J))
"RTN","RGCWPTPS",25,0)
 .K @GBL
"RTN","RGCWPTPS",26,0)
 .F  S IEN=$O(^DPT("ATEST",IEN)) Q:'IEN  S @GBL@($E($P(^DPT(IEN,0),U),1,30),IEN)=""
"RTN","RGCWPTPS",27,0)
 E  I '$$LKPQUAL^RGCWPTCX("MSC DG ALL SITES HIPAA",.QUALS),$D(^DPT("ADIV",DUZ(2))) S GBL=$NA(^(DUZ(2)))
"RTN","RGCWPTPS",28,0)
 E  S GBL=$NA(^DPT("B"))
"RTN","RGCWPTPS",29,0)
 F  S FROM=$O(@GBL@(FROM)),IEN=0 Q:FROM=""  D  Q:CNT'<MAX
"RTN","RGCWPTPS",30,0)
 .F  S IEN=$O(@GBL@(FROM,IEN)) Q:'IEN  D  Q:CNT'<MAX
"RTN","RGCWPTPS",31,0)
 ..I 'DEMO,'($D(@GBL@(FROM,IEN))#2),$$LKPQUAL^RGCWPTCX("@RGCWPTCX IGNORE ALIASES",.QUALS) Q
"RTN","RGCWPTPS",32,0)
 ..Q:'$$ISACTIVE^RGCWPTCX(IEN,.QUALS)
"RTN","RGCWPTPS",33,0)
 ..S X0=^DPT(IEN,0),NAME=$P(X0,U)
"RTN","RGCWPTPS",34,0)
 ..I $E(NAME,1,LLEN)'=LNAME S MAX=-1 Q
"RTN","RGCWPTPS",35,0)
 ..I FLEN,$E($$TRIM^XLFSTR($P(NAME,",",2)),1,FLEN)'=FNAME Q
"RTN","RGCWPTPS",36,0)
 ..I DOB,+$P(X0,U,3)'=DOB Q
"RTN","RGCWPTPS",37,0)
 ..I $L(SEX),$P(X0,U,2)'=SEX Q
"RTN","RGCWPTPS",38,0)
 ..D ADD(IEN_U_NAME)
"RTN","RGCWPTPS",39,0)
 K:DEMO ^TMP("RGCWPTPL",$J)
"RTN","RGCWPTPS",40,0)
 Q
"RTN","RGCWPTPS",41,0)
ADD(X) S:$L($G(X)) CNT=CNT+1,@DATA@(CNT)=X
"RTN","RGCWPTPS",42,0)
 Q
"RTN","RGCWPTPS",43,0)
ERROR(X) D ADD("-1^"_X)
"RTN","RGCWPTPS",44,0)
 Q
"SEC","^DIC",999.1,999.1,0,"AUDIT")
@
"SEC","^DIC",999.1,999.1,0,"DD")
@
"SEC","^DIC",999.1,999.1,0,"DEL")
@
"SEC","^DIC",999.1,999.1,0,"LAYGO")
@
"SEC","^DIC",999.1,999.1,0,"RD")
@
"SEC","^DIC",999.1,999.1,0,"WR")
@
"SEC","^DIC",999.2,999.2,0,"AUDIT")
@
"SEC","^DIC",999.2,999.2,0,"DD")
@
"SEC","^DIC",999.2,999.2,0,"DEL")
@
"SEC","^DIC",999.2,999.2,0,"LAYGO")
@
"SEC","^DIC",999.2,999.2,0,"RD")
@
"SEC","^DIC",999.2,999.2,0,"WR")
@
"SEC","^DIC",999.201,999.201,0,"AUDIT")
@
"SEC","^DIC",999.201,999.201,0,"DD")
@
"SEC","^DIC",999.201,999.201,0,"DEL")
@
"SEC","^DIC",999.201,999.201,0,"LAYGO")
@
"SEC","^DIC",999.201,999.201,0,"RD")
@
"SEC","^DIC",999.201,999.201,0,"WR")
@
"SEC","^DIC",19941.21,19941.21,0,"AUDIT")
@
"SEC","^DIC",19941.21,19941.21,0,"DD")
@
"SEC","^DIC",19941.21,19941.21,0,"DEL")
@
"SEC","^DIC",19941.21,19941.21,0,"LAYGO")
@
"SEC","^DIC",19941.21,19941.21,0,"RD")
@
"SEC","^DIC",19941.21,19941.21,0,"WR")
@
"TEMP","EC")

"TEMP","FINAL")

"TEMP","INITIAL")

"TEMP","PTRS",19941.212)
20^19941.21^19.1
"TEMP","PTRS",19941.2121)
21^19941.21^19.1
"TEMP","TGT")
2
"VER")
8.0^22.0
"^DD",999.1,999.1,0)
FIELD^^10^5
"^DD",999.1,999.1,0,"DDA")
N
"^DD",999.1,999.1,0,"DT")
3120523
"^DD",999.1,999.1,0,"IX","B",999.1,.01)

"^DD",999.1,999.1,0,"IX","C",999.1,.01)

"^DD",999.1,999.1,0,"NM","CAREWEB SERIALIZATION")

"^DD",999.1,999.1,0,"PT",999.991,.01)

"^DD",999.1,999.1,0,"VRPK")
CAREWEB ENHANCEMENTS
"^DD",999.1,999.1,.01,0)
NAME^RF^^0;1^K:$L(X)>100!($L(X)<3)!'(X'?1P.E) X
"^DD",999.1,999.1,.01,1,0)
^.1
"^DD",999.1,999.1,.01,1,1,0)
999.1^B
"^DD",999.1,999.1,.01,1,1,1)
S ^RGCWF(999.1,"B",$E(X,1,30),DA)=""
"^DD",999.1,999.1,.01,1,1,2)
K ^RGCWF(999.1,"B",$E(X,1,30),DA)
"^DD",999.1,999.1,.01,1,2,0)
999.1^C^MUMPS
"^DD",999.1,999.1,.01,1,2,1)
S ^RGCWF(999.1,"C",$$UP^XLFSTR(X),DA)=""
"^DD",999.1,999.1,.01,1,2,2)
K ^RGCWF(999.1,"C",$$UP^XLFSTR(X),DA)
"^DD",999.1,999.1,.01,1,2,"DT")
3120523
"^DD",999.1,999.1,.01,3)
Alias name of serialized object.
"^DD",999.1,999.1,.01,21,0)
^^1^1^3120522^
"^DD",999.1,999.1,.01,21,1,0)
This is the unique name that identifies this object type.
"^DD",999.1,999.1,.01,"DT")
3120523
"^DD",999.1,999.1,.5,0)
TARGET FILE^P1'^DIC(^0;2^Q
"^DD",999.1,999.1,.5,3)
File or subfile containing target object.
"^DD",999.1,999.1,.5,"DT")
3120523
"^DD",999.1,999.1,1,0)
CUSTOM SERIALIZER^F^^1;E1,20^K:$L(X)>20!($L(X)<1) X
"^DD",999.1,999.1,1,3)
Entry point (TAG^ROUTINE) for custom serializer.
"^DD",999.1,999.1,1,"DT")
3120523
"^DD",999.1,999.1,2,0)
CUSTOM DESERIALIZER^F^^2;E1,20^K:$L(X)>20!($L(X)<1) X
"^DD",999.1,999.1,2,3)
Entry point (TAG^ROUTINE) for custom deserializer.
"^DD",999.1,999.1,2,"DT")
3120523
"^DD",999.1,999.1,10,0)
PROPERTY^999.11^^10;0
"^DD",999.1,999.1,10,"DT")
3120523
"^DD",999.1,999.11,0)
PROPERTY SUB-FIELD^^10^4
"^DD",999.1,999.11,0,"DT")
3120523
"^DD",999.1,999.11,0,"IX","B",999.11,.01)

"^DD",999.1,999.11,0,"NM","PROPERTY")

"^DD",999.1,999.11,0,"UP")
999.1
"^DD",999.1,999.11,.01,0)
PROPERTY^MF^^0;1^K:$L(X)>40!($L(X)<1) X
"^DD",999.1,999.11,.01,1,0)
^.1
"^DD",999.1,999.11,.01,1,1,0)
999.11^B
"^DD",999.1,999.11,.01,1,1,1)
S ^RGCWF(999.1,DA(1),10,"B",$E(X,1,30),DA)=""
"^DD",999.1,999.11,.01,1,1,2)
K ^RGCWF(999.1,DA(1),10,"B",$E(X,1,30),DA)
"^DD",999.1,999.11,.01,3)
Property name to be used in serialization.
"^DD",999.1,999.11,.01,"DT")
3120523
"^DD",999.1,999.11,1,0)
FIELD^F^^0;2^K:$L(X)>40!($L(X)<1) X
"^DD",999.1,999.11,1,3)
Field name or # corresponding to this property.
"^DD",999.1,999.11,1,"DT")
3120523
"^DD",999.1,999.11,2,0)
TYPE^RS^F:FREE TEXT;R:RAW;B:BOOLEAN;D:DATE;M:MULTIPLE;C:CUSTOM;O:OBJECT;W:WORD PROCESSING;^0;3^Q
"^DD",999.1,999.11,2,3)
Encoding type for this property.
"^DD",999.1,999.11,2,"DT")
3120523
"^DD",999.1,999.11,10,0)
CONTROL^F^^10;E1,250^K:$L(X)>250!($L(X)<1) X
"^DD",999.1,999.11,10,3)
Answer must be 1-250 characters in length.
"^DD",999.1,999.11,10,21,0)
^^7^7^3120523.103917
"^DD",999.1,999.11,10,21,1,0)
The format of this field depends on the value of the TYPE field.  For those
"^DD",999.1,999.11,10,21,2,0)
TYPE values not listed below, this field will be ignored.
"^DD",999.1,999.11,10,21,3,0)

"^DD",999.1,999.11,10,21,4,0)
C (Custom) - Executable M code.
"^DD",999.1,999.11,10,21,5,0)
O (Object) - Alias name of the target object.
"^DD",999.1,999.11,10,21,6,0)
M (Multiple) - Alias name of the multiple object.
"^DD",999.1,999.11,10,21,7,0)

"^DD",999.1,999.11,10,"DT")
3120523
"^DD",999.2,999.2,0)
FIELD^^13^9
"^DD",999.2,999.2,0,"IX","B",999.2,.01)

"^DD",999.2,999.2,0,"NM","CAREWEB PATIENT LIST")

"^DD",999.2,999.2,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",999.2,999.2,.01,1,0)
^.1
"^DD",999.2,999.2,.01,1,1,0)
999.2^B
"^DD",999.2,999.2,.01,1,1,1)
S ^RGCWF(999.2,"B",$E(X,1,30),DA)=""
"^DD",999.2,999.2,.01,1,1,2)
K ^RGCWF(999.2,"B",$E(X,1,30),DA)
"^DD",999.2,999.2,.01,3)
Answer must be 3-30 characters in length.
"^DD",999.2,999.2,.01,"DT")
3010913
"^DD",999.2,999.2,1,0)
FLAGS^F^^0;2^K:$L(X)>20!($L(X)<1) X
"^DD",999.2,999.2,1,3)
Enter special control flags.
"^DD",999.2,999.2,1,21,0)
^^9^9^3060911.112102
"^DD",999.2,999.2,1,21,1,0)
These flags control how the list appears on the client.  Values are:
"^DD",999.2,999.2,1,21,2,0)

"^DD",999.2,999.2,1,21,3,0)
D:     Date range required
"^DD",999.2,999.2,1,21,4,0)
E:     Sets encounter context
"^DD",999.2,999.2,1,21,5,0)
L:     Item retrieval uses long list
"^DD",999.2,999.2,1,21,6,0)
M:     Convert selection list to mixed case
"^DD",999.2,999.2,1,21,7,0)
N:     Do not cache list
"^DD",999.2,999.2,1,21,8,0)
S:     Sort selection list
"^DD",999.2,999.2,1,21,9,0)
U:     List can be managed by user
"^DD",999.2,999.2,1,"DT")
3010913
"^DD",999.2,999.2,2,0)
ENTITY^F^^0;3^K:$L(X)>20!($L(X)<1) X
"^DD",999.2,999.2,2,3)
Name of single entity in this list.
"^DD",999.2,999.2,2,"DT")
3010918
"^DD",999.2,999.2,3,0)
SEQUENCE^NJ11,0X^^0;4^K:+X'=X!(X>100000)!(X<0)!(X?.E1"."1N.N) X
"^DD",999.2,999.2,3,3)
Type a whole number between 0 and 100000
"^DD",999.2,999.2,3,"DT")
3010917
"^DD",999.2,999.2,4,0)
DISABLE^S^0:NO;1:YES;^0;5^Q
"^DD",999.2,999.2,4,3)
Enter YES to suppress display of this list.
"^DD",999.2,999.2,4,"DT")
3011002
"^DD",999.2,999.2,10,0)
PATIENT RETRIEVAL^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.2,999.2,10,3)
M code to retrieve list.
"^DD",999.2,999.2,10,9)
@
"^DD",999.2,999.2,10,"DT")
3010918
"^DD",999.2,999.2,11,0)
ITEM RETRIEVAL^K^^11;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.2,999.2,11,3)
M code to retrieve item list.
"^DD",999.2,999.2,11,9)
@
"^DD",999.2,999.2,11,"DT")
3010918
"^DD",999.2,999.2,12,0)
LIST MANAGEMENT^K^^12;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.2,999.2,12,3)
M code to invoke management functions.
"^DD",999.2,999.2,12,9)
@
"^DD",999.2,999.2,12,"DT")
3010918
"^DD",999.2,999.2,13,0)
SCREEN^K^^13;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.2,999.2,13,3)
M code to screen entries.
"^DD",999.2,999.2,13,9)
@
"^DD",999.2,999.2,13,"DT")
3011002
"^DD",999.201,999.201,0)
FIELD^^4^5
"^DD",999.201,999.201,0,"IX","B",999.201,.01)

"^DD",999.201,999.201,0,"NM","CAREWEB NOTIFICATION CONTROL")

"^DD",999.201,999.201,0,"PT",999.994,.01)

"^DD",999.201,999.201,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<2)!'(X'?1P.E) X
"^DD",999.201,999.201,.01,1,0)
^.1
"^DD",999.201,999.201,.01,1,1,0)
999.201^B
"^DD",999.201,999.201,.01,1,1,1)
S ^RGCWF(999.201,"B",$E(X,1,30),DA)=""
"^DD",999.201,999.201,.01,1,1,2)
K ^RGCWF(999.201,"B",$E(X,1,30),DA)
"^DD",999.201,999.201,.01,3)
Answer must be 2-30 characters in length.
"^DD",999.201,999.201,.01,"DT")
3030805
"^DD",999.201,999.201,1,0)
IDENT^RK^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.201,999.201,1,3)
Code to check notification identity.  Set $T to true for positive match.
"^DD",999.201,999.201,1,9)
@
"^DD",999.201,999.201,1,21,0)
^^1^1^3030804.150811
"^DD",999.201,999.201,1,21,1,0)
Should check the notification identifier in AID and set $T to true if a match.
"^DD",999.201,999.201,1,"DT")
3030804
"^DD",999.201,999.201,2,0)
PARSE^RK^^2;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.201,999.201,2,3)
Code to parse data elements from notification.
"^DD",999.201,999.201,2,9)
@
"^DD",999.201,999.201,2,21,0)
^^8^8^3030804.170957
"^DD",999.201,999.201,2,21,1,0)
Code to parse standard data elements from notification.  Elements should be
"^DD",999.201,999.201,2,21,2,0)
returned in ALR array as follows:
"^DD",999.201,999.201,2,21,3,0)

"^DD",999.201,999.201,2,21,4,0)
ALR("DFN")=Patient IEN (if patient-orientation)
"^DD",999.201,999.201,2,21,5,0)
ALR("INF")=Info only flag
"^DD",999.201,999.201,2,21,6,0)
ALR("TYP")=Notification type code
"^DD",999.201,999.201,2,21,7,0)
ALR("PRI")=Priority code
"^DD",999.201,999.201,2,21,8,0)
ALR("XTR")=Additional data
"^DD",999.201,999.201,2,"DT")
3030804
"^DD",999.201,999.201,3,0)
PROCESS^K^^3;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.201,999.201,3,3)
Post processing logic for alert.
"^DD",999.201,999.201,3,9)
@
"^DD",999.201,999.201,3,"DT")
3030805
"^DD",999.201,999.201,4,0)
UPDATE^K^^4;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.201,999.201,4,3)
Optional logic to update alerts for current user.
"^DD",999.201,999.201,4,9)
@
"^DD",999.201,999.201,4,21,0)
^^2^2^3080128.135828
"^DD",999.201,999.201,4,21,1,0)
This logic provides the opportunity to update alerts (add or delete) 
"^DD",999.201,999.201,4,21,2,0)
for the current user prior to retrieving them.
"^DD",999.201,999.201,4,"DT")
3080128
"^DD",19941.21,19941.21,0)
FIELD^^7^14
"^DD",19941.21,19941.21,0,"DT")
3091007
"^DD",19941.21,19941.21,0,"IX","B",19941.21,.01)

"^DD",19941.21,19941.21,0,"NM","CIA EVENT TYPE")

"^DD",19941.21,19941.21,0,"PT",999.995,.01)

"^DD",19941.21,19941.21,0,"PT",19930.995,.01)

"^DD",19941.21,19941.21,0,"PT",19941.23,1)

"^DD",19941.21,19941.21,0,"VRPK")
CAREWEB ENHANCEMENTS
"^DD",19941.21,19941.21,.01,0)
NAME^RF^^0;1^K:$L(X)>100!($L(X)<3)!'(X'?1P.E) X
"^DD",19941.21,19941.21,.01,1,0)
^.1
"^DD",19941.21,19941.21,.01,1,1,0)
19941.21^B
"^DD",19941.21,19941.21,.01,1,1,1)
S ^CIANB(19941.21,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.21,.01,1,1,2)
K ^CIANB(19941.21,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.21,.01,3)
Answer must be 3-100 characters in length.
"^DD",19941.21,19941.21,.01,"DT")
3030611
"^DD",19941.21,19941.21,1,0)
MONITOR^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",19941.21,19941.21,1,3)
M code to invoke monitor for this event type
"^DD",19941.21,19941.21,1,9)
@
"^DD",19941.21,19941.21,1,"DT")
3021021
"^DD",19941.21,19941.21,2,0)
DISABLE^S^0:NO;1:YES;^0;2^Q
"^DD",19941.21,19941.21,2,3)
Enter YES to disable this event type.
"^DD",19941.21,19941.21,2,21,0)
^.001^3^3^3030810^
"^DD",19941.21,19941.21,2,21,1,0)
If set to YES, this event type is disabled.  Once disabled, any attempt to 
"^DD",19941.21,19941.21,2,21,2,0)
enqueue the event will be ignored.  Disabling an event does not affect events
"^DD",19941.21,19941.21,2,21,3,0)
already in the queue. 
"^DD",19941.21,19941.21,2,"DT")
3030810
"^DD",19941.21,19941.21,3,0)
INTERVAL^NJ11,0X^^0;3^K:X<0!(X\1'=X) X
"^DD",19941.21,19941.21,3,3)
Enter the nominal polling interval in seconds.
"^DD",19941.21,19941.21,3,21,0)
^^10^10^3021021.152235
"^DD",19941.21,19941.21,3,21,1,0)
This is the nominal polling interval for the event in seconds.
"^DD",19941.21,19941.21,3,21,2,0)
The actual polling interval is dependent on the event polling
"^DD",19941.21,19941.21,3,21,3,0)
interval set for the client application as a site parameter.
"^DD",19941.21,19941.21,3,21,4,0)
The nominal polling interval guarantees that polling for this
"^DD",19941.21,19941.21,3,21,5,0)
event will not occur more frequently than this setting.
"^DD",19941.21,19941.21,3,21,6,0)
 
"^DD",19941.21,19941.21,3,21,7,0)
For events that are infrequent and/or do not require real time
"^DD",19941.21,19941.21,3,21,8,0)
notification, higher values may be selected for this field to
"^DD",19941.21,19941.21,3,21,9,0)
mitigate impact on system load. 
"^DD",19941.21,19941.21,3,21,10,0)

"^DD",19941.21,19941.21,3,"DT")
3021021
"^DD",19941.21,19941.21,4,0)
LOG EVENT^S^0:NO;1:YES;^0;4^Q
"^DD",19941.21,19941.21,4,3)
Enter YES to enable logging of this event.
"^DD",19941.21,19941.21,4,"DT")
3030611
"^DD",19941.21,19941.21,5,0)
LOG RETENTION^NJ6,0^^0;5^K:+X'=X!(X>999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",19941.21,19941.21,5,3)
Number of days to retain log entries.
"^DD",19941.21,19941.21,5,"DT")
3030611
"^DD",19941.21,19941.21,6,0)
POLLING METHOD^S^0:PER SESSION;1:PER INTERVAL;^0;6^Q
"^DD",19941.21,19941.21,6,3)
Determines how a monitored event is polled.
"^DD",19941.21,19941.21,6,21,0)
^^11^11^3030810.175145
"^DD",19941.21,19941.21,6,21,1,0)
For monitored events, this setting determines how the monitor is invoked
"^DD",19941.21,19941.21,6,21,2,0)
when the polling interval has been reached.  PER SESSION causes the event
"^DD",19941.21,19941.21,6,21,3,0)
monitor to be invoked for each active session, setting the user and
"^DD",19941.21,19941.21,6,21,4,0)
session context prior to each call.  PER INTERVAL cause the event monitor
"^DD",19941.21,19941.21,6,21,5,0)
to be invoked only once per interval.  No user or session context information
"^DD",19941.21,19941.21,6,21,6,0)
is available to the monitor in this case.
"^DD",19941.21,19941.21,6,21,7,0)

"^DD",19941.21,19941.21,6,21,8,0)
PER SESSION is appropriate for events that depend upon a specific user or
"^DD",19941.21,19941.21,6,21,9,0)
session (e.g., notifications).  PER INTERVAL is appropriate for events 
"^DD",19941.21,19941.21,6,21,10,0)
that are independent of a user or session (e.g., status events to display
"^DD",19941.21,19941.21,6,21,11,0)
the host date/time).
"^DD",19941.21,19941.21,6,"DT")
3030810
"^DD",19941.21,19941.21,7,0)
EVENT PROTOCOL^*P101'^ORD(101,^0;7^S DIC("S")="I $E(^(0),1,4)=""CIAV"",$P(^(0),U,4)=""X""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"^DD",19941.21,19941.21,7,12)
Restricts to Extended Action Protocols starting with CIAV
"^DD",19941.21,19941.21,7,12.1)
S DIC("S")="I $E(^(0),1,4)=""CIAV"",$P(^(0),U,4)=""X"""
"^DD",19941.21,19941.21,7,"DT")
3091007
"^DD",19941.21,19941.21,10,0)
DISPLAY LOGIC^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",19941.21,19941.21,10,3)
Logic to display stub info in log viewer.
"^DD",19941.21,19941.21,10,9)
@
"^DD",19941.21,19941.21,10,"DT")
3030611
"^DD",19941.21,19941.21,20,0)
PUBLICATION KEY^19941.212P^^20;0
"^DD",19941.21,19941.21,21,0)
SUBSCRIPTION KEY^19941.2121P^^21;0
"^DD",19941.21,19941.21,99,0)
DESCRIPTION^19941.2199^^99;0
"^DD",19941.21,19941.21,100,0)
ERROR DATE/TIME^D^^100;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",19941.21,19941.21,100,3)
Date and time of last error
"^DD",19941.21,19941.21,100,"DT")
3061129
"^DD",19941.21,19941.21,101,0)
ERROR TEXT^F^^100;2^K:$L(X)>240!($L(X)<1) X
"^DD",19941.21,19941.21,101,3)
Answer must be 1-240 characters in length.
"^DD",19941.21,19941.21,101,"DT")
3061129
"^DD",19941.21,19941.212,0)
PUBLICATION KEY SUB-FIELD^^.01^1
"^DD",19941.21,19941.212,0,"DT")
3021021
"^DD",19941.21,19941.212,0,"IX","B",19941.212,.01)

"^DD",19941.21,19941.212,0,"NM","PUBLICATION KEY")

"^DD",19941.21,19941.212,0,"UP")
19941.21
"^DD",19941.21,19941.212,.01,0)
PUBLICATION KEY^MP19.1'X^DIC(19.1,^0;1^Q
"^DD",19941.21,19941.212,.01,1,0)
^.1
"^DD",19941.21,19941.212,.01,1,1,0)
19941.212^B
"^DD",19941.21,19941.212,.01,1,1,1)
S ^CIANB(19941.21,DA(1),20,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.212,.01,1,1,2)
K ^CIANB(19941.21,DA(1),20,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.212,.01,3)
Security keys required to fire this event.
"^DD",19941.21,19941.212,.01,21,0)
^^2^2^3021021.152715
"^DD",19941.21,19941.212,.01,21,1,0)
If there are entries in this multiple, the user must possess at least one of
"^DD",19941.21,19941.212,.01,21,2,0)
the listed keys in order to fire an event of this type.
"^DD",19941.21,19941.212,.01,"DT")
3040310
"^DD",19941.21,19941.2121,0)
SUBSCRIPTION KEY SUB-FIELD^^.01^1
"^DD",19941.21,19941.2121,0,"DT")
3021021
"^DD",19941.21,19941.2121,0,"IX","B",19941.2121,.01)

"^DD",19941.21,19941.2121,0,"NM","SUBSCRIPTION KEY")

"^DD",19941.21,19941.2121,0,"UP")
19941.21
"^DD",19941.21,19941.2121,.01,0)
SUBSCRIPTION KEY^MP19.1'X^DIC(19.1,^0;1^Q
"^DD",19941.21,19941.2121,.01,1,0)
^.1
"^DD",19941.21,19941.2121,.01,1,1,0)
19941.2121^B
"^DD",19941.21,19941.2121,.01,1,1,1)
S ^CIANB(19941.21,DA(1),21,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.2121,.01,1,1,2)
K ^CIANB(19941.21,DA(1),21,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.2121,.01,3)
Security keys required to receive this event type.
"^DD",19941.21,19941.2121,.01,21,0)
^^2^2^3021021.153002
"^DD",19941.21,19941.2121,.01,21,1,0)
If there are entries in this multiple, the user must possess at least one of
"^DD",19941.21,19941.2121,.01,21,2,0)
the listed keys in order subscribe to an event of this type. 
"^DD",19941.21,19941.2121,.01,"DT")
3040310
"^DD",19941.21,19941.2199,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",19941.21,19941.2199,0,"DT")
3021021
"^DD",19941.21,19941.2199,0,"NM","DESCRIPTION")

"^DD",19941.21,19941.2199,0,"UP")
19941.21
"^DD",19941.21,19941.2199,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",19941.21,19941.2199,.01,3)
Enter a detailed description of this event type.
"^DD",19941.21,19941.2199,.01,"DT")
3021021
"^DIC",999.1,999.1,0)
CAREWEB SERIALIZATION^999.1
"^DIC",999.1,999.1,0,"GL")
^RGCWF(999.1,
"^DIC",999.1,"B","CAREWEB SERIALIZATION",999.1)

"^DIC",999.2,999.2,0)
CAREWEB PATIENT LIST^999.2
"^DIC",999.2,999.2,0,"GL")
^RGCWF(999.2,
"^DIC",999.2,"B","CAREWEB PATIENT LIST",999.2)

"^DIC",999.201,999.201,0)
CAREWEB NOTIFICATION CONTROL^999.201
"^DIC",999.201,999.201,0,"GL")
^RGCWF(999.201,
"^DIC",999.201,"B","CAREWEB NOTIFICATION CONTROL",999.201)

"^DIC",19941.21,19941.21,0)
CIA EVENT TYPE^19941.21
"^DIC",19941.21,19941.21,0,"GL")
^CIANB(19941.21,
"^DIC",19941.21,"B","CIA EVENT TYPE",19941.21)

**INSTALL NAME**
CAREWEB RPMS ENHANCEMENTS 1.0
"BLD",8497,0)
CAREWEB RPMS ENHANCEMENTS 1.0^^0^3140321^n
"BLD",8497,4,0)
^9.64PA^19941.21^3
"BLD",8497,4,999.1,0)
999.1
"BLD",8497,4,999.1,222)
n^y^f^^n^^y^o^n
"BLD",8497,4,999.1,224)
I $$SCRN^RGCWKDTP(Y,1)
"BLD",8497,4,999.201,0)
999.201
"BLD",8497,4,999.201,222)
n^y^f^^y^^y^o^n
"BLD",8497,4,999.201,224)
I $$SCRN^RGCWKDTP(Y,4)
"BLD",8497,4,19941.21,0)
19941.21
"BLD",8497,4,19941.21,222)
n^y^f^^y^^y^o^n
"BLD",8497,4,19941.21,224)
I $$SCRN^RGCWKDTP(Y,5)
"BLD",8497,4,"B",999.1,999.1)

"BLD",8497,4,"B",999.201,999.201)

"BLD",8497,4,"B",19941.21,19941.21)

"BLD",8497,6.3)
29
"BLD",8497,"INI")
PRE^RGCWKDIN
"BLD",8497,"INIT")
POST^RGCWKDIN
"BLD",8497,"KRN",0)
^9.67PA^8994^20
"BLD",8497,"KRN",.4,0)
.4
"BLD",8497,"KRN",.401,0)
.401
"BLD",8497,"KRN",.402,0)
.402
"BLD",8497,"KRN",.403,0)
.403
"BLD",8497,"KRN",.5,0)
.5
"BLD",8497,"KRN",.84,0)
.84
"BLD",8497,"KRN",3.6,0)
3.6
"BLD",8497,"KRN",3.8,0)
3.8
"BLD",8497,"KRN",9.2,0)
9.2
"BLD",8497,"KRN",9.8,0)
9.8
"BLD",8497,"KRN",9.8,"NM",0)
^9.68A^^0
"BLD",8497,"KRN",19,0)
19
"BLD",8497,"KRN",19.1,0)
19.1
"BLD",8497,"KRN",101,0)
101
"BLD",8497,"KRN",409.61,0)
409.61
"BLD",8497,"KRN",771,0)
771
"BLD",8497,"KRN",779.2,0)
779.2
"BLD",8497,"KRN",870,0)
870
"BLD",8497,"KRN",8989.51,0)
8989.51
"BLD",8497,"KRN",8989.51,"NM",0)
^9.68A^^0
"BLD",8497,"KRN",8989.52,0)
8989.52
"BLD",8497,"KRN",8994,0)
8994
"BLD",8497,"KRN",8994,"NM",0)
^9.68A^1^1
"BLD",8497,"KRN",8994,"NM",1,0)
BEHOPTPL LISTINFO1^^0
"BLD",8497,"KRN",8994,"NM","B","BEHOPTPL LISTINFO1",1)

"BLD",8497,"KRN","B",.4,.4)

"BLD",8497,"KRN","B",.401,.401)

"BLD",8497,"KRN","B",.402,.402)

"BLD",8497,"KRN","B",.403,.403)

"BLD",8497,"KRN","B",.5,.5)

"BLD",8497,"KRN","B",.84,.84)

"BLD",8497,"KRN","B",3.6,3.6)

"BLD",8497,"KRN","B",3.8,3.8)

"BLD",8497,"KRN","B",9.2,9.2)

"BLD",8497,"KRN","B",9.8,9.8)

"BLD",8497,"KRN","B",19,19)

"BLD",8497,"KRN","B",19.1,19.1)

"BLD",8497,"KRN","B",101,101)

"BLD",8497,"KRN","B",409.61,409.61)

"BLD",8497,"KRN","B",771,771)

"BLD",8497,"KRN","B",779.2,779.2)

"BLD",8497,"KRN","B",870,870)

"BLD",8497,"KRN","B",8989.51,8989.51)

"BLD",8497,"KRN","B",8989.52,8989.52)

"BLD",8497,"KRN","B",8994,8994)

"BLD",8497,"PRE")
RGCWKDIN
"BLD",8497,"PRET")
PRETRANS^RGCWKDTP
"BLD",8497,"QUES",0)
^9.62^^
"BLD",8497,"REQB",0)
^9.611^^
"FIA",999.1)
CAREWEB SERIALIZATION
"FIA",999.1,0)
^RGCWF(999.1,
"FIA",999.1,0,0)
999.1
"FIA",999.1,0,1)
n^y^f^^n^^y^o^n
"FIA",999.1,0,10)

"FIA",999.1,0,11)
I $$SCRN^RGCWKDTP(Y,1)
"FIA",999.1,0,"RLRO")

"FIA",999.1,999.1)
0
"FIA",999.1,999.11)
0
"FIA",999.201)
CAREWEB NOTIFICATION CONTROL
"FIA",999.201,0)
^RGCWF(999.201,
"FIA",999.201,0,0)
999.201
"FIA",999.201,0,1)
n^y^f^^y^^y^o^n
"FIA",999.201,0,10)

"FIA",999.201,0,11)
I $$SCRN^RGCWKDTP(Y,4)
"FIA",999.201,0,"RLRO")

"FIA",999.201,999.201)
0
"FIA",19941.21)
CIA EVENT TYPE
"FIA",19941.21,0)
^CIANB(19941.21,
"FIA",19941.21,0,0)
19941.21
"FIA",19941.21,0,1)
n^y^f^^y^^y^o^n
"FIA",19941.21,0,10)

"FIA",19941.21,0,11)
I $$SCRN^RGCWKDTP(Y,5)
"FIA",19941.21,0,"RLRO")

"FIA",19941.21,19941.21)
0
"FIA",19941.21,19941.212)
0
"FIA",19941.21,19941.2121)
0
"FIA",19941.21,19941.2199)
0
"INI")
PRE^RGCWKDIN
"INIT")
POST^RGCWKDIN
"KRN",8994,2683,-1)
0^1
"KRN",8994,2683,0)
BEHOPTPL LISTINFO1^LISTINFO^BEHOPTPL^1
"MBREQ")
1
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"PGL",19941.21,0,7,7)
EVENT PROTOCOL^*P101'^ORD(101,^0;7^S DIC("S")="I $E(^(0),1,4)=""CIAV"",$P(^(0),U,4)=""X""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"PRE")
RGCWKDIN
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","RGCWKDIN")
0^^B31823827
"RTN","RGCWKDIN",1,0)
RGCKDIN ;RI/CBMI/DKM - CareWeb KIDS installation support ;18-Mar-2014 23:53;DKM
"RTN","RGCWKDIN",2,0)
 ;;1.0;CAREWEB FRAMEWORK;;;Build 29
"RTN","RGCWKDIN",3,0)
 ; Environment check
"RTN","RGCWKDIN",4,0)
EC X $G(@XPDGREF@("EC"))
"RTN","RGCWKDIN",5,0)
 Q
"RTN","RGCWKDIN",6,0)
 ; Preinit
"RTN","RGCWKDIN",7,0)
PRE N RGX,RGY
"RTN","RGCWKDIN",8,0)
 D MES(),OBJINST,SDINIT^RGCWFUTL(,60,1)
"RTN","RGCWKDIN",9,0)
 F  D  Q:'RGX
"RTN","RGCWKDIN",10,0)
 .S RGX=$$SHOWSESS^RGCWFUTL
"RTN","RGCWKDIN",11,0)
 .R:RGX "Waiting for active sessions to terminate...",RGY:10,!!
"RTN","RGCWKDIN",12,0)
 .I RGX,RGY=U,$$ASK^CIAU("There are still active sessions.  Are you sure you want to proceed") S RGX=0
"RTN","RGCWKDIN",13,0)
 D MES("Proceeding with installation...")
"RTN","RGCWKDIN",14,0)
 D INITIAL,SAVEOPT
"RTN","RGCWKDIN",15,0)
 Q
"RTN","RGCWKDIN",16,0)
 ; Postinit
"RTN","RGCWKDIN",17,0)
POST N PAR,Y
"RTN","RGCWKDIN",18,0)
 X ^%ZOSF("EON"),^%ZOSF("TRMOFF")
"RTN","RGCWKDIN",19,0)
 D RESPTR,DEFPAR,RESTOPT,REGISTER,FINAL
"RTN","RGCWKDIN",20,0)
 W !!!
"RTN","RGCWKDIN",21,0)
 Q
"RTN","RGCWKDIN",22,0)
 ; Execute initial preinit code, if any
"RTN","RGCWKDIN",23,0)
INITIAL ; EP
"RTN","RGCWKDIN",24,0)
 X $G(@XPDGREF@("INITIAL"))
"RTN","RGCWKDIN",25,0)
 Q
"RTN","RGCWKDIN",26,0)
 ; Execute final postinit code, if any
"RTN","RGCWKDIN",27,0)
FINAL ; EP
"RTN","RGCWKDIN",28,0)
 X $G(@XPDGREF@("FINAL"))
"RTN","RGCWKDIN",29,0)
 Q
"RTN","RGCWKDIN",30,0)
 ; Initializes default parameter values.  Does not affect existing entries.
"RTN","RGCWKDIN",31,0)
DEFPAR N PAR,ENT,VAL,INST,LP,Y
"RTN","RGCWKDIN",32,0)
 D MES("Setting up default site parameters...")
"RTN","RGCWKDIN",33,0)
 F LP=0:0 S LP=$O(@XPDGREF@("PARAM",LP)) Q:'LP  K VAL M VAL=^(LP) D
"RTN","RGCWKDIN",34,0)
 .S Y=VAL,VAL=$$MSG^CIAU($P(Y,U,3,999),"|",0),PAR=$P(Y,U),INST=$P(Y,U,2)
"RTN","RGCWKDIN",35,0)
 .S ENT=$$ENT^RGCWFPAR(PAR),ENT=$P(ENT,U,$L(ENT,U))
"RTN","RGCWKDIN",36,0)
 .D:$L(ENT) ADD^XPAR(ENT,PAR,INST,.VAL)
"RTN","RGCWKDIN",37,0)
 Q
"RTN","RGCWKDIN",38,0)
 ; Delete a file or subfile
"RTN","RGCWKDIN",39,0)
 ;   DIU = File or subfile #
"RTN","RGCWKDIN",40,0)
DELFIL(DIU) ; EP
"RTN","RGCWKDIN",41,0)
 N $ET
"RTN","RGCWKDIN",42,0)
 S $ET="",@$$TRAP^CIAUOS("DELERR^RGCWKDIN")
"RTN","RGCWKDIN",43,0)
 Q:'$D(^DD(DIU))
"RTN","RGCWKDIN",44,0)
 S DIU(0)=$S($D(^DIC(DIU)):"D",1:"S")
"RTN","RGCWKDIN",45,0)
 D EN^DIU2
"RTN","RGCWKDIN",46,0)
 Q
"RTN","RGCWKDIN",47,0)
DELERR N ERR
"RTN","RGCWKDIN",48,0)
 S ERR=$$EC^%ZOSV
"RTN","RGCWKDIN",49,0)
 D MES("An error occurred deleting file #"_$G(DIU))
"RTN","RGCWKDIN",50,0)
 D MES("The error was: "_ERR)
"RTN","RGCWKDIN",51,0)
 D MES("Please delete the file manually after correcting the problem.")
"RTN","RGCWKDIN",52,0)
 Q
"RTN","RGCWKDIN",53,0)
 ; Save ITEM and RPC entries for RGCWF CAREWEB FRAMEWORK option
"RTN","RGCWKDIN",54,0)
SAVEOPT N OPT
"RTN","RGCWKDIN",55,0)
 S OPT=$$FIND1^DIC(19,"","X","RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",56,0)
 Q:'OPT
"RTN","RGCWKDIN",57,0)
 M @XPDGREF@("ITMSAVE")=^DIC(19,OPT,10,"B")
"RTN","RGCWKDIN",58,0)
 M @XPDGREF@("RPCSAVE")=^DIC(19,OPT,"RPC","B")
"RTN","RGCWKDIN",59,0)
 Q
"RTN","RGCWKDIN",60,0)
 ; Restore ITEM and RPC entries for RGCWF CAREWEB FRAMEWORK
"RTN","RGCWKDIN",61,0)
RESTOPT N OPT,ITM,RPC
"RTN","RGCWKDIN",62,0)
 S OPT=$$FIND1^DIC(19,"","X","RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",63,0)
 Q:'OPT
"RTN","RGCWKDIN",64,0)
 F ITM=0:0 S ITM=$O(@XPDGREF@("ITMSAVE",ITM)) Q:'ITM  I $$REGCTX^CIAURPC(ITM,OPT)
"RTN","RGCWKDIN",65,0)
 F RPC=0:0 S RPC=$O(@XPDGREF@("RPCSAVE",RPC)) Q:'RPC  I $$REGRPC^CIAURPC(RPC,OPT)
"RTN","RGCWKDIN",66,0)
 Q
"RTN","RGCWKDIN",67,0)
 ; Resolve pointers in multiples (KIDS doesn't)
"RTN","RGCWKDIN",68,0)
RESPTR ; EP
"RTN","RGCWKDIN",69,0)
 N TGT,SRC,SUB,NOD,NAM,VAL,IEN,CNT,SGB,PTR
"RTN","RGCWKDIN",70,0)
 S SUB=0
"RTN","RGCWKDIN",71,0)
 F  S SUB=$O(@XPDGREF@("PTRS",SUB)) Q:'SUB  S X=^(SUB)  D
"RTN","RGCWKDIN",72,0)
 .S NOD=+X,SRC=$P(X,U,2),TGT=$P(X,U,3),SGB=$$ROOT^DILFD(SRC,,1),NAM=""
"RTN","RGCWKDIN",73,0)
 .F  S NAM=$O(@XPDGREF@("PTRS",SUB,NAM)) Q:'$L(NAM)  D
"RTN","RGCWKDIN",74,0)
 ..S IEN=$$FIND1^DIC(SRC,"","QX",NAM),VAL="",CNT=0
"RTN","RGCWKDIN",75,0)
 ..Q:IEN'>0
"RTN","RGCWKDIN",76,0)
 ..K @SGB@(IEN,NOD)
"RTN","RGCWKDIN",77,0)
 ..F  S VAL=$O(@XPDGREF@("PTRS",SUB,NAM,VAL)) Q:'$L(VAL)  D
"RTN","RGCWKDIN",78,0)
 ...S PTR=$$FIND1^DIC(TGT,,"X",VAL)
"RTN","RGCWKDIN",79,0)
 ...I 'PTR D MES("  Failed to resolve "_VAL) Q
"RTN","RGCWKDIN",80,0)
 ...S CNT=CNT+1,@SGB@(IEN,NOD,CNT,0)=PTR,@SGB@(IEN,NOD,"B",PTR,CNT)=""
"RTN","RGCWKDIN",81,0)
 ..S:CNT @SGB@(IEN,NOD,0)=U_SUB_"P^"_CNT_U_CNT
"RTN","RGCWKDIN",82,0)
 Q
"RTN","RGCWKDIN",83,0)
 ; Check binary version against M system
"RTN","RGCWKDIN",84,0)
OBJCHK ; EP
"RTN","RGCWKDIN",85,0)
 N VER,MSYS
"RTN","RGCWKDIN",86,0)
 D GETMSYS(.MSYS,.VER)
"RTN","RGCWKDIN",87,0)
 Q:'$D(MSYS)
"RTN","RGCWKDIN",88,0)
 I '$D(VER) D
"RTN","RGCWKDIN",89,0)
 .D MES("This package contains object code that is not supported on "_MSYS_" installations.",2)
"RTN","RGCWKDIN",90,0)
 E  I VER="" D
"RTN","RGCWKDIN",91,0)
 .D MES("This package does not contain object code for this version of "_MSYS_" installations.",2)
"RTN","RGCWKDIN",92,0)
 Q
"RTN","RGCWKDIN",93,0)
 ; Get M system type and target version
"RTN","RGCWKDIN",94,0)
GETMSYS(MSYS,VER) ;
"RTN","RGCWKDIN",95,0)
 K MSYS,VER
"RTN","RGCWKDIN",96,0)
 Q:'$D(@XPDGREF@("OBJ"))
"RTN","RGCWKDIN",97,0)
 S MSYS=$$UP^XLFSTR($P($$VERSION^%ZOSV(1)," ")),MSYS(0)=$S(MSYS="CACHE":1,MSYS="JUMPS":2,1:0)
"RTN","RGCWKDIN",98,0)
 Q:'$D(@XPDGREF@("OBJ",MSYS(0)))
"RTN","RGCWKDIN",99,0)
 S VER=$TR($$VERSION^%ZOSV()," ")
"RTN","RGCWKDIN",100,0)
 F  Q:'$L(VER)  Q:$D(@XPDGREF@("OBJ",MSYS(0),VER))  S VER=$P(VER,".",1,$L(VER,".")-1)
"RTN","RGCWKDIN",101,0)
 Q
"RTN","RGCWKDIN",102,0)
 ; Install routine binaries
"RTN","RGCWKDIN",103,0)
OBJINST ; EP
"RTN","RGCWKDIN",104,0)
 N MSYS,RTN,OBJ,SUB,GBL
"RTN","RGCWKDIN",105,0)
 D GETMSYS(.MSYS,.VER)
"RTN","RGCWKDIN",106,0)
 Q:'$D(MSYS)
"RTN","RGCWKDIN",107,0)
 Q:$D(@XPDGREF@("OBJ",MSYS(0)))<10
"RTN","RGCWKDIN",108,0)
 S RTN=""
"RTN","RGCWKDIN",109,0)
 D MES("Installing routine binaries...")
"RTN","RGCWKDIN",110,0)
 F  S RTN=$O(@XPDGREF@("OBJ",MSYS(0),VER,RTN)) Q:'$L(RTN)  D
"RTN","RGCWKDIN",111,0)
 .X "ZR  ZS @RTN"
"RTN","RGCWKDIN",112,0)
 .S OBJ="",SUB=0,GBL=$NA(@$S(MSYS(0)=1:"^rOBJ(RTN)",1:"^$R(RTN,""OBJECT"")"))
"RTN","RGCWKDIN",113,0)
 .F  S SUB=$O(@XPDGREF@("OBJ",MSYS(0),VER,RTN,SUB)) Q:'SUB  S OBJ=OBJ_^(SUB,0)
"RTN","RGCWKDIN",114,0)
 .S @GBL=$S(MSYS(0)=1:$$DECODE^CIAUUU(OBJ),1:OBJ)
"RTN","RGCWKDIN",115,0)
 Q
"RTN","RGCWKDIN",116,0)
 ; Perform various registration actions
"RTN","RGCWKDIN",117,0)
REGISTER N X,CTX
"RTN","RGCWKDIN",118,0)
 S CTX=$$GETOPT^CIAURPC("RGCWF CAREWEB FRAMEWORK")
"RTN","RGCWKDIN",119,0)
 Q:'CTX
"RTN","RGCWKDIN",120,0)
 F X="RGCW","CIAV","CIAU","DG","DDR","RGUT","BEH" D REGNMSP^CIAURPC(X,CTX)
"RTN","RGCWKDIN",121,0)
 F X="OR CPRS GUI CHART" D DOREG(X)
"RTN","RGCWKDIN",122,0)
 Q
"RTN","RGCWKDIN",123,0)
 ; Add an option as a subcontext to CareWeb Framework
"RTN","RGCWKDIN",124,0)
 ; Remove any redundant RPC's
"RTN","RGCWKDIN",125,0)
DOREG(OPT) ;
"RTN","RGCWKDIN",126,0)
 N RPC,CNT1,CNT2,STAT,IEN
"RTN","RGCWKDIN",127,0)
 S IEN=$$GETOPT^CIAURPC(OPT)
"RTN","RGCWKDIN",128,0)
 Q:'IEN
"RTN","RGCWKDIN",129,0)
 W !!,"Registering ",OPT," as a subcontext under RGCWF CAREWEB FRAMEWORK...",!
"RTN","RGCWKDIN",130,0)
 I $$REGCTX^CIAURPC(IEN,CTX)
"RTN","RGCWKDIN",131,0)
 W "Removing redundant RPC references...",!
"RTN","RGCWKDIN",132,0)
 S (CNT1,CNT2)=0
"RTN","RGCWKDIN",133,0)
 F RPC=0:0 S RPC=$O(^DIC(19,IEN,"RPC","B",RPC)) Q:'RPC  D
"RTN","RGCWKDIN",134,0)
 .S STAT=$$REGRPC^CIAURPC(RPC,CTX,1)
"RTN","RGCWKDIN",135,0)
 .Q:STAT=-1
"RTN","RGCWKDIN",136,0)
 .W $$GET1^DIQ(8994,RPC,.01)_" - "
"RTN","RGCWKDIN",137,0)
 .I STAT=1 W "Removed",! S CNT1=CNT1+1
"RTN","RGCWKDIN",138,0)
 .E  I 'STAT W "Not removed",! S CNT2=CNT2+1
"RTN","RGCWKDIN",139,0)
 W !,CNT1," remote procedure(s) removed",!
"RTN","RGCWKDIN",140,0)
 W:CNT2 CNT2," remote procedure(s) could not be removed",!!
"RTN","RGCWKDIN",141,0)
 Q
"RTN","RGCWKDIN",142,0)
 ; Check if specified routine is installed
"RTN","RGCWKDIN",143,0)
RTNTST(RTN,VN,MSG) ;
"RTN","RGCWKDIN",144,0)
 D:$$RTNVER(RTN)<VN MES(MSG_" must be installed before proceeding.",2)
"RTN","RGCWKDIN",145,0)
 Q
"RTN","RGCWKDIN",146,0)
 ; Get version # for specified routine
"RTN","RGCWKDIN",147,0)
RTNVER(RTN) ;
"RTN","RGCWKDIN",148,0)
 Q $P($T(+2^@RTN),";",3)
"RTN","RGCWKDIN",149,0)
 ; Check patch #s for specified routine
"RTN","RGCWKDIN",150,0)
PATCH(RTN,PN,MSG) ;
"RTN","RGCWKDIN",151,0)
 N X,Y,L,F
"RTN","RGCWKDIN",152,0)
 F X=1:1:$L(PN,",") D
"RTN","RGCWKDIN",153,0)
 .S Y=$P(PN,",",X),F=0
"RTN","RGCWKDIN",154,0)
 .F L=2,3 D  Q:F
"RTN","RGCWKDIN",155,0)
 ..S F=$TR($P($T(+L^@RTN),";",5),"*",",")[(","_Y_",")
"RTN","RGCWKDIN",156,0)
 .D:'F MES(MSG_" patch #"_Y_" must be installed before proceeding.",2)
"RTN","RGCWKDIN",157,0)
 Q
"RTN","RGCWKDIN",158,0)
 ; Display message in MSG and optionally set quit flag to QUIT
"RTN","RGCWKDIN",159,0)
MES(MSG,QUIT) ;
"RTN","RGCWKDIN",160,0)
 D BMES^XPDUTL("  "_$G(MSG))
"RTN","RGCWKDIN",161,0)
 S:$G(QUIT) XPDQUIT=QUIT
"RTN","RGCWKDIN",162,0)
 Q
"SEC","^DIC",999.1,999.1,0,"AUDIT")
@
"SEC","^DIC",999.1,999.1,0,"DD")
@
"SEC","^DIC",999.1,999.1,0,"DEL")
@
"SEC","^DIC",999.1,999.1,0,"LAYGO")
@
"SEC","^DIC",999.1,999.1,0,"RD")
@
"SEC","^DIC",999.1,999.1,0,"WR")
@
"SEC","^DIC",999.201,999.201,0,"AUDIT")
@
"SEC","^DIC",999.201,999.201,0,"DD")
@
"SEC","^DIC",999.201,999.201,0,"DEL")
@
"SEC","^DIC",999.201,999.201,0,"LAYGO")
@
"SEC","^DIC",999.201,999.201,0,"RD")
@
"SEC","^DIC",999.201,999.201,0,"WR")
@
"SEC","^DIC",19941.21,19941.21,0,"AUDIT")
@
"SEC","^DIC",19941.21,19941.21,0,"DD")
@
"SEC","^DIC",19941.21,19941.21,0,"DEL")
@
"SEC","^DIC",19941.21,19941.21,0,"LAYGO")
@
"SEC","^DIC",19941.21,19941.21,0,"RD")
@
"SEC","^DIC",19941.21,19941.21,0,"WR")
@
"TEMP","EC")

"TEMP","FINAL")
D REGCTX^CIAURPC("CIAV VUECENTRIC","RGCWF CAREWEB FRAMEWORK")
"TEMP","INITIAL")

"TEMP","PTRS",19941.212)
20^19941.21^19.1
"TEMP","PTRS",19941.2121)
21^19941.21^19.1
"TEMP","TGT")
11
"VER")
8.0^22.0
"^DD",999.1,999.1,0)
FIELD^^10^5
"^DD",999.1,999.1,0,"DDA")
N
"^DD",999.1,999.1,0,"DT")
3120523
"^DD",999.1,999.1,0,"IX","B",999.1,.01)

"^DD",999.1,999.1,0,"IX","C",999.1,.01)

"^DD",999.1,999.1,0,"NM","CAREWEB SERIALIZATION")

"^DD",999.1,999.1,0,"PT",999.991,.01)

"^DD",999.1,999.1,0,"VRPK")
CAREWEB ENHANCEMENTS
"^DD",999.1,999.1,.01,0)
NAME^RF^^0;1^K:$L(X)>100!($L(X)<3)!'(X'?1P.E) X
"^DD",999.1,999.1,.01,1,0)
^.1
"^DD",999.1,999.1,.01,1,1,0)
999.1^B
"^DD",999.1,999.1,.01,1,1,1)
S ^RGCWF(999.1,"B",$E(X,1,30),DA)=""
"^DD",999.1,999.1,.01,1,1,2)
K ^RGCWF(999.1,"B",$E(X,1,30),DA)
"^DD",999.1,999.1,.01,1,2,0)
999.1^C^MUMPS
"^DD",999.1,999.1,.01,1,2,1)
S ^RGCWF(999.1,"C",$$UP^XLFSTR(X),DA)=""
"^DD",999.1,999.1,.01,1,2,2)
K ^RGCWF(999.1,"C",$$UP^XLFSTR(X),DA)
"^DD",999.1,999.1,.01,1,2,"DT")
3120523
"^DD",999.1,999.1,.01,3)
Alias name of serialized object.
"^DD",999.1,999.1,.01,21,0)
^^1^1^3120522^
"^DD",999.1,999.1,.01,21,1,0)
This is the unique name that identifies this object type.
"^DD",999.1,999.1,.01,"DT")
3120523
"^DD",999.1,999.1,.5,0)
TARGET FILE^P1'^DIC(^0;2^Q
"^DD",999.1,999.1,.5,3)
File or subfile containing target object.
"^DD",999.1,999.1,.5,"DT")
3120523
"^DD",999.1,999.1,1,0)
CUSTOM SERIALIZER^F^^1;E1,20^K:$L(X)>20!($L(X)<1) X
"^DD",999.1,999.1,1,3)
Entry point (TAG^ROUTINE) for custom serializer.
"^DD",999.1,999.1,1,"DT")
3120523
"^DD",999.1,999.1,2,0)
CUSTOM DESERIALIZER^F^^2;E1,20^K:$L(X)>20!($L(X)<1) X
"^DD",999.1,999.1,2,3)
Entry point (TAG^ROUTINE) for custom deserializer.
"^DD",999.1,999.1,2,"DT")
3120523
"^DD",999.1,999.1,10,0)
PROPERTY^999.11^^10;0
"^DD",999.1,999.1,10,"DT")
3120523
"^DD",999.1,999.11,0)
PROPERTY SUB-FIELD^^10^4
"^DD",999.1,999.11,0,"DT")
3120523
"^DD",999.1,999.11,0,"IX","B",999.11,.01)

"^DD",999.1,999.11,0,"NM","PROPERTY")

"^DD",999.1,999.11,0,"UP")
999.1
"^DD",999.1,999.11,.01,0)
PROPERTY^MF^^0;1^K:$L(X)>40!($L(X)<1) X
"^DD",999.1,999.11,.01,1,0)
^.1
"^DD",999.1,999.11,.01,1,1,0)
999.11^B
"^DD",999.1,999.11,.01,1,1,1)
S ^RGCWF(999.1,DA(1),10,"B",$E(X,1,30),DA)=""
"^DD",999.1,999.11,.01,1,1,2)
K ^RGCWF(999.1,DA(1),10,"B",$E(X,1,30),DA)
"^DD",999.1,999.11,.01,3)
Property name to be used in serialization.
"^DD",999.1,999.11,.01,"DT")
3120523
"^DD",999.1,999.11,1,0)
FIELD^F^^0;2^K:$L(X)>40!($L(X)<1) X
"^DD",999.1,999.11,1,3)
Field name or # corresponding to this property.
"^DD",999.1,999.11,1,"DT")
3120523
"^DD",999.1,999.11,2,0)
TYPE^RS^F:FREE TEXT;R:RAW;B:BOOLEAN;D:DATE;M:MULTIPLE;C:CUSTOM;O:OBJECT;W:WORD PROCESSING;^0;3^Q
"^DD",999.1,999.11,2,3)
Encoding type for this property.
"^DD",999.1,999.11,2,"DT")
3120523
"^DD",999.1,999.11,10,0)
CONTROL^F^^10;E1,250^K:$L(X)>250!($L(X)<1) X
"^DD",999.1,999.11,10,3)
Answer must be 1-250 characters in length.
"^DD",999.1,999.11,10,21,0)
^^7^7^3120523.103917
"^DD",999.1,999.11,10,21,1,0)
The format of this field depends on the value of the TYPE field.  For those
"^DD",999.1,999.11,10,21,2,0)
TYPE values not listed below, this field will be ignored.
"^DD",999.1,999.11,10,21,3,0)

"^DD",999.1,999.11,10,21,4,0)
C (Custom) - Executable M code.
"^DD",999.1,999.11,10,21,5,0)
O (Object) - Alias name of the target object.
"^DD",999.1,999.11,10,21,6,0)
M (Multiple) - Alias name of the multiple object.
"^DD",999.1,999.11,10,21,7,0)

"^DD",999.1,999.11,10,"DT")
3120523
"^DD",999.201,999.201,0)
FIELD^^4^5
"^DD",999.201,999.201,0,"IX","B",999.201,.01)

"^DD",999.201,999.201,0,"NM","CAREWEB NOTIFICATION CONTROL")

"^DD",999.201,999.201,0,"PT",999.994,.01)

"^DD",999.201,999.201,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<2)!'(X'?1P.E) X
"^DD",999.201,999.201,.01,1,0)
^.1
"^DD",999.201,999.201,.01,1,1,0)
999.201^B
"^DD",999.201,999.201,.01,1,1,1)
S ^RGCWF(999.201,"B",$E(X,1,30),DA)=""
"^DD",999.201,999.201,.01,1,1,2)
K ^RGCWF(999.201,"B",$E(X,1,30),DA)
"^DD",999.201,999.201,.01,3)
Answer must be 2-30 characters in length.
"^DD",999.201,999.201,.01,"DT")
3030805
"^DD",999.201,999.201,1,0)
IDENT^RK^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.201,999.201,1,3)
Code to check notification identity.  Set $T to true for positive match.
"^DD",999.201,999.201,1,9)
@
"^DD",999.201,999.201,1,21,0)
^^1^1^3030804.150811
"^DD",999.201,999.201,1,21,1,0)
Should check the notification identifier in AID and set $T to true if a match.
"^DD",999.201,999.201,1,"DT")
3030804
"^DD",999.201,999.201,2,0)
PARSE^RK^^2;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.201,999.201,2,3)
Code to parse data elements from notification.
"^DD",999.201,999.201,2,9)
@
"^DD",999.201,999.201,2,21,0)
^^8^8^3030804.170957
"^DD",999.201,999.201,2,21,1,0)
Code to parse standard data elements from notification.  Elements should be
"^DD",999.201,999.201,2,21,2,0)
returned in ALR array as follows:
"^DD",999.201,999.201,2,21,3,0)

"^DD",999.201,999.201,2,21,4,0)
ALR("DFN")=Patient IEN (if patient-orientation)
"^DD",999.201,999.201,2,21,5,0)
ALR("INF")=Info only flag
"^DD",999.201,999.201,2,21,6,0)
ALR("TYP")=Notification type code
"^DD",999.201,999.201,2,21,7,0)
ALR("PRI")=Priority code
"^DD",999.201,999.201,2,21,8,0)
ALR("XTR")=Additional data
"^DD",999.201,999.201,2,"DT")
3030804
"^DD",999.201,999.201,3,0)
PROCESS^K^^3;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.201,999.201,3,3)
Post processing logic for alert.
"^DD",999.201,999.201,3,9)
@
"^DD",999.201,999.201,3,"DT")
3030805
"^DD",999.201,999.201,4,0)
UPDATE^K^^4;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",999.201,999.201,4,3)
Optional logic to update alerts for current user.
"^DD",999.201,999.201,4,9)
@
"^DD",999.201,999.201,4,21,0)
^^2^2^3080128.135828
"^DD",999.201,999.201,4,21,1,0)
This logic provides the opportunity to update alerts (add or delete) 
"^DD",999.201,999.201,4,21,2,0)
for the current user prior to retrieving them.
"^DD",999.201,999.201,4,"DT")
3080128
"^DD",19941.21,19941.21,0)
FIELD^^7^14
"^DD",19941.21,19941.21,0,"DT")
3091007
"^DD",19941.21,19941.21,0,"IX","B",19941.21,.01)

"^DD",19941.21,19941.21,0,"NM","CIA EVENT TYPE")

"^DD",19941.21,19941.21,0,"PT",999.995,.01)

"^DD",19941.21,19941.21,0,"PT",19930.995,.01)

"^DD",19941.21,19941.21,0,"PT",19941.23,1)

"^DD",19941.21,19941.21,0,"VRPK")
CAREWEB ENHANCEMENTS
"^DD",19941.21,19941.21,.01,0)
NAME^RF^^0;1^K:$L(X)>100!($L(X)<3)!'(X'?1P.E) X
"^DD",19941.21,19941.21,.01,1,0)
^.1
"^DD",19941.21,19941.21,.01,1,1,0)
19941.21^B
"^DD",19941.21,19941.21,.01,1,1,1)
S ^CIANB(19941.21,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.21,.01,1,1,2)
K ^CIANB(19941.21,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.21,.01,3)
Answer must be 3-100 characters in length.
"^DD",19941.21,19941.21,.01,"DT")
3030611
"^DD",19941.21,19941.21,1,0)
MONITOR^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",19941.21,19941.21,1,3)
M code to invoke monitor for this event type
"^DD",19941.21,19941.21,1,9)
@
"^DD",19941.21,19941.21,1,"DT")
3021021
"^DD",19941.21,19941.21,2,0)
DISABLE^S^0:NO;1:YES;^0;2^Q
"^DD",19941.21,19941.21,2,3)
Enter YES to disable this event type.
"^DD",19941.21,19941.21,2,21,0)
^.001^3^3^3030810^
"^DD",19941.21,19941.21,2,21,1,0)
If set to YES, this event type is disabled.  Once disabled, any attempt to 
"^DD",19941.21,19941.21,2,21,2,0)
enqueue the event will be ignored.  Disabling an event does not affect events
"^DD",19941.21,19941.21,2,21,3,0)
already in the queue. 
"^DD",19941.21,19941.21,2,"DT")
3030810
"^DD",19941.21,19941.21,3,0)
INTERVAL^NJ11,0X^^0;3^K:X<0!(X\1'=X) X
"^DD",19941.21,19941.21,3,3)
Enter the nominal polling interval in seconds.
"^DD",19941.21,19941.21,3,21,0)
^^10^10^3021021.152235
"^DD",19941.21,19941.21,3,21,1,0)
This is the nominal polling interval for the event in seconds.
"^DD",19941.21,19941.21,3,21,2,0)
The actual polling interval is dependent on the event polling
"^DD",19941.21,19941.21,3,21,3,0)
interval set for the client application as a site parameter.
"^DD",19941.21,19941.21,3,21,4,0)
The nominal polling interval guarantees that polling for this
"^DD",19941.21,19941.21,3,21,5,0)
event will not occur more frequently than this setting.
"^DD",19941.21,19941.21,3,21,6,0)
 
"^DD",19941.21,19941.21,3,21,7,0)
For events that are infrequent and/or do not require real time
"^DD",19941.21,19941.21,3,21,8,0)
notification, higher values may be selected for this field to
"^DD",19941.21,19941.21,3,21,9,0)
mitigate impact on system load. 
"^DD",19941.21,19941.21,3,21,10,0)

"^DD",19941.21,19941.21,3,"DT")
3021021
"^DD",19941.21,19941.21,4,0)
LOG EVENT^S^0:NO;1:YES;^0;4^Q
"^DD",19941.21,19941.21,4,3)
Enter YES to enable logging of this event.
"^DD",19941.21,19941.21,4,"DT")
3030611
"^DD",19941.21,19941.21,5,0)
LOG RETENTION^NJ6,0^^0;5^K:+X'=X!(X>999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",19941.21,19941.21,5,3)
Number of days to retain log entries.
"^DD",19941.21,19941.21,5,"DT")
3030611
"^DD",19941.21,19941.21,6,0)
POLLING METHOD^S^0:PER SESSION;1:PER INTERVAL;^0;6^Q
"^DD",19941.21,19941.21,6,3)
Determines how a monitored event is polled.
"^DD",19941.21,19941.21,6,21,0)
^^11^11^3030810.175145
"^DD",19941.21,19941.21,6,21,1,0)
For monitored events, this setting determines how the monitor is invoked
"^DD",19941.21,19941.21,6,21,2,0)
when the polling interval has been reached.  PER SESSION causes the event
"^DD",19941.21,19941.21,6,21,3,0)
monitor to be invoked for each active session, setting the user and
"^DD",19941.21,19941.21,6,21,4,0)
session context prior to each call.  PER INTERVAL cause the event monitor
"^DD",19941.21,19941.21,6,21,5,0)
to be invoked only once per interval.  No user or session context information
"^DD",19941.21,19941.21,6,21,6,0)
is available to the monitor in this case.
"^DD",19941.21,19941.21,6,21,7,0)

"^DD",19941.21,19941.21,6,21,8,0)
PER SESSION is appropriate for events that depend upon a specific user or
"^DD",19941.21,19941.21,6,21,9,0)
session (e.g., notifications).  PER INTERVAL is appropriate for events 
"^DD",19941.21,19941.21,6,21,10,0)
that are independent of a user or session (e.g., status events to display
"^DD",19941.21,19941.21,6,21,11,0)
the host date/time).
"^DD",19941.21,19941.21,6,"DT")
3030810
"^DD",19941.21,19941.21,7,0)
EVENT PROTOCOL^*P101'^ORD(101,^0;7^S DIC("S")="I $E(^(0),1,4)=""CIAV"",$P(^(0),U,4)=""X""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"^DD",19941.21,19941.21,7,12)
Restricts to Extended Action Protocols starting with CIAV
"^DD",19941.21,19941.21,7,12.1)
S DIC("S")="I $E(^(0),1,4)=""CIAV"",$P(^(0),U,4)=""X"""
"^DD",19941.21,19941.21,7,"DT")
3091007
"^DD",19941.21,19941.21,10,0)
DISPLAY LOGIC^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",19941.21,19941.21,10,3)
Logic to display stub info in log viewer.
"^DD",19941.21,19941.21,10,9)
@
"^DD",19941.21,19941.21,10,"DT")
3030611
"^DD",19941.21,19941.21,20,0)
PUBLICATION KEY^19941.212P^^20;0
"^DD",19941.21,19941.21,21,0)
SUBSCRIPTION KEY^19941.2121P^^21;0
"^DD",19941.21,19941.21,99,0)
DESCRIPTION^19941.2199^^99;0
"^DD",19941.21,19941.21,100,0)
ERROR DATE/TIME^D^^100;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",19941.21,19941.21,100,3)
Date and time of last error
"^DD",19941.21,19941.21,100,"DT")
3061129
"^DD",19941.21,19941.21,101,0)
ERROR TEXT^F^^100;2^K:$L(X)>240!($L(X)<1) X
"^DD",19941.21,19941.21,101,3)
Answer must be 1-240 characters in length.
"^DD",19941.21,19941.21,101,"DT")
3061129
"^DD",19941.21,19941.212,0)
PUBLICATION KEY SUB-FIELD^^.01^1
"^DD",19941.21,19941.212,0,"DT")
3021021
"^DD",19941.21,19941.212,0,"IX","B",19941.212,.01)

"^DD",19941.21,19941.212,0,"NM","PUBLICATION KEY")

"^DD",19941.21,19941.212,0,"UP")
19941.21
"^DD",19941.21,19941.212,.01,0)
PUBLICATION KEY^MP19.1'X^DIC(19.1,^0;1^Q
"^DD",19941.21,19941.212,.01,1,0)
^.1
"^DD",19941.21,19941.212,.01,1,1,0)
19941.212^B
"^DD",19941.21,19941.212,.01,1,1,1)
S ^CIANB(19941.21,DA(1),20,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.212,.01,1,1,2)
K ^CIANB(19941.21,DA(1),20,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.212,.01,3)
Security keys required to fire this event.
"^DD",19941.21,19941.212,.01,21,0)
^^2^2^3021021.152715
"^DD",19941.21,19941.212,.01,21,1,0)
If there are entries in this multiple, the user must possess at least one of
"^DD",19941.21,19941.212,.01,21,2,0)
the listed keys in order to fire an event of this type.
"^DD",19941.21,19941.212,.01,"DT")
3040310
"^DD",19941.21,19941.2121,0)
SUBSCRIPTION KEY SUB-FIELD^^.01^1
"^DD",19941.21,19941.2121,0,"DT")
3021021
"^DD",19941.21,19941.2121,0,"IX","B",19941.2121,.01)

"^DD",19941.21,19941.2121,0,"NM","SUBSCRIPTION KEY")

"^DD",19941.21,19941.2121,0,"UP")
19941.21
"^DD",19941.21,19941.2121,.01,0)
SUBSCRIPTION KEY^MP19.1'X^DIC(19.1,^0;1^Q
"^DD",19941.21,19941.2121,.01,1,0)
^.1
"^DD",19941.21,19941.2121,.01,1,1,0)
19941.2121^B
"^DD",19941.21,19941.2121,.01,1,1,1)
S ^CIANB(19941.21,DA(1),21,"B",$E(X,1,30),DA)=""
"^DD",19941.21,19941.2121,.01,1,1,2)
K ^CIANB(19941.21,DA(1),21,"B",$E(X,1,30),DA)
"^DD",19941.21,19941.2121,.01,3)
Security keys required to receive this event type.
"^DD",19941.21,19941.2121,.01,21,0)
^^2^2^3021021.153002
"^DD",19941.21,19941.2121,.01,21,1,0)
If there are entries in this multiple, the user must possess at least one of
"^DD",19941.21,19941.2121,.01,21,2,0)
the listed keys in order subscribe to an event of this type. 
"^DD",19941.21,19941.2121,.01,"DT")
3040310
"^DD",19941.21,19941.2199,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",19941.21,19941.2199,0,"DT")
3021021
"^DD",19941.21,19941.2199,0,"NM","DESCRIPTION")

"^DD",19941.21,19941.2199,0,"UP")
19941.21
"^DD",19941.21,19941.2199,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",19941.21,19941.2199,.01,3)
Enter a detailed description of this event type.
"^DD",19941.21,19941.2199,.01,"DT")
3021021
"^DIC",999.1,999.1,0)
CAREWEB SERIALIZATION^999.1
"^DIC",999.1,999.1,0,"GL")
^RGCWF(999.1,
"^DIC",999.1,"B","CAREWEB SERIALIZATION",999.1)

"^DIC",999.201,999.201,0)
CAREWEB NOTIFICATION CONTROL^999.201
"^DIC",999.201,999.201,0,"GL")
^RGCWF(999.201,
"^DIC",999.201,"B","CAREWEB NOTIFICATION CONTROL",999.201)

"^DIC",19941.21,19941.21,0)
CIA EVENT TYPE^19941.21
"^DIC",19941.21,19941.21,0,"GL")
^CIANB(19941.21,
"^DIC",19941.21,"B","CIA EVENT TYPE",19941.21)

**END**
**END**
